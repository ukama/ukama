// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/notification/event-notify/pb/gen"
)

// EventNotification is an autogenerated mock type for the EventNotification type
type EventNotification struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *EventNotification) Get(id string) (*gen.GetResponse, error) {
	ret := _m.Called(id)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: orgId, networkId, subscriberId, userId, role
func (_m *EventNotification) GetAll(orgId string, networkId string, subscriberId string, userId string, role string) (*gen.GetAllResponse, error) {
	ret := _m.Called(orgId, networkId, subscriberId, userId, role)

	var r0 *gen.GetAllResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (*gen.GetAllResponse, error)); ok {
		return rf(orgId, networkId, subscriberId, userId, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) *gen.GetAllResponse); ok {
		r0 = rf(orgId, networkId, subscriberId, userId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetAllResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(orgId, networkId, subscriberId, userId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationStream provides a mock function with given fields: orgId, networkId, subscriberId, userId, scopes
func (_m *EventNotification) GetNotificationStream(orgId string, networkId string, subscriberId string, userId string, scopes []string) (gen.EventToNotifyService_GetNotificationStreamClient, error) {
	ret := _m.Called(orgId, networkId, subscriberId, userId, scopes)

	var r0 gen.EventToNotifyService_GetNotificationStreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string) (gen.EventToNotifyService_GetNotificationStreamClient, error)); ok {
		return rf(orgId, networkId, subscriberId, userId, scopes)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string) gen.EventToNotifyService_GetNotificationStreamClient); ok {
		r0 = rf(orgId, networkId, subscriberId, userId, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.EventToNotifyService_GetNotificationStreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, []string) error); ok {
		r1 = rf(orgId, networkId, subscriberId, userId, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, isRead
func (_m *EventNotification) UpdateStatus(id string, isRead bool) (*gen.UpdateStatusResponse, error) {
	ret := _m.Called(id, isRead)

	var r0 *gen.UpdateStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.UpdateStatusResponse, error)); ok {
		return rf(id, isRead)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.UpdateStatusResponse); ok {
		r0 = rf(id, isRead)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(id, isRead)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventNotification interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventNotification creates a new instance of EventNotification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventNotification(t mockConstructorTestingTNewEventNotification) *EventNotification {
	mock := &EventNotification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
