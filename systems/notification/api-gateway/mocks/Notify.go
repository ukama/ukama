// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/notification/notify/pb/gen"
)

// Notify is an autogenerated mock type for the Notify type
type Notify struct {
	mock.Mock
}

// Add provides a mock function with given fields: nodeId, severity, ntype, serviceName, description, details, status, epochTime
func (_m *Notify) Add(nodeId string, severity string, ntype string, serviceName string, description string, details string, status uint32, epochTime uint32) (*gen.AddResponse, error) {
	ret := _m.Called(nodeId, severity, ntype, serviceName, description, details, status, epochTime)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, uint32, uint32) (*gen.AddResponse, error)); ok {
		return rf(nodeId, severity, ntype, serviceName, description, details, status, epochTime)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, uint32, uint32) *gen.AddResponse); ok {
		r0 = rf(nodeId, severity, ntype, serviceName, description, details, status, epochTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, uint32, uint32) error); ok {
		r1 = rf(nodeId, severity, ntype, serviceName, description, details, status, epochTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Notify) Delete(id string) (*gen.DeleteResponse, error) {
	ret := _m.Called(id)

	var r0 *gen.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.DeleteResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.DeleteResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *Notify) Get(id string) (*gen.GetResponse, error) {
	ret := _m.Called(id)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: nodeId, serviceName, nType, count, sort
func (_m *Notify) List(nodeId string, serviceName string, nType string, count uint32, sort bool) (*gen.ListResponse, error) {
	ret := _m.Called(nodeId, serviceName, nType, count, sort)

	var r0 *gen.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, uint32, bool) (*gen.ListResponse, error)); ok {
		return rf(nodeId, serviceName, nType, count, sort)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, uint32, bool) *gen.ListResponse); ok {
		r0 = rf(nodeId, serviceName, nType, count, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, uint32, bool) error); ok {
		r1 = rf(nodeId, serviceName, nType, count, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Purge provides a mock function with given fields: nodeId, serviceName, nType
func (_m *Notify) Purge(nodeId string, serviceName string, nType string) (*gen.ListResponse, error) {
	ret := _m.Called(nodeId, serviceName, nType)

	var r0 *gen.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.ListResponse, error)); ok {
		return rf(nodeId, serviceName, nType)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.ListResponse); ok {
		r0 = rf(nodeId, serviceName, nType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(nodeId, serviceName, nType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNotify interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotify creates a new instance of Notify. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotify(t mockConstructorTestingTNewNotify) *Notify {
	mock := &Notify{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
