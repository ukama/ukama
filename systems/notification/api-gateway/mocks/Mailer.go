// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/notification/mailer/pb/gen"
)

// Mailer is an autogenerated mock type for the Mailer type
type Mailer struct {
	mock.Mock
}

// GetEmailById provides a mock function with given fields: _a0
func (_m *Mailer) GetEmailById(_a0 *gen.GetEmailByIdRequest) (*gen.GetEmailByIdResponse, error) {
	ret := _m.Called(_a0)

	var r0 *gen.GetEmailByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetEmailByIdRequest) (*gen.GetEmailByIdResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetEmailByIdRequest) *gen.GetEmailByIdResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetEmailByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetEmailByIdRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: _a0
func (_m *Mailer) SendEmail(_a0 *gen.SendEmailRequest) (*gen.SendEmailResponse, error) {
	ret := _m.Called(_a0)

	var r0 *gen.SendEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.SendEmailRequest) (*gen.SendEmailResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*gen.SendEmailRequest) *gen.SendEmailResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SendEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.SendEmailRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMailer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMailer creates a new instance of Mailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMailer(t mockConstructorTestingTNewMailer) *Mailer {
	mock := &Mailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
