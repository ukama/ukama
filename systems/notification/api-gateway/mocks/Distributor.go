// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/notification/distributor/pb/gen"
)

// Distributor is an autogenerated mock type for the Distributor type
type Distributor struct {
	mock.Mock
}

// GetNotificationStream provides a mock function with given fields: orgId, networkId, subscriberId, userId, scopes
func (_m *Distributor) GetNotificationStream(orgId string, networkId string, subscriberId string, userId string, scopes []string) (gen.DistributorService_GetNotificationStreamClient, error) {
	ret := _m.Called(orgId, networkId, subscriberId, userId, scopes)

	var r0 gen.DistributorService_GetNotificationStreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string) (gen.DistributorService_GetNotificationStreamClient, error)); ok {
		return rf(orgId, networkId, subscriberId, userId, scopes)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string) gen.DistributorService_GetNotificationStreamClient); ok {
		r0 = rf(orgId, networkId, subscriberId, userId, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.DistributorService_GetNotificationStreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, []string) error); ok {
		r1 = rf(orgId, networkId, subscriberId, userId, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDistributor interface {
	mock.TestingT
	Cleanup(func())
}

// NewDistributor creates a new instance of Distributor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDistributor(t mockConstructorTestingTNewDistributor) *Distributor {
	mock := &Distributor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
