// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/notify/internal/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// NotificationRepo is an autogenerated mock type for the NotificationRepo type
type NotificationRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: n
func (_m *NotificationRepo) Add(n *db.Notification) error {
	ret := _m.Called(n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Notification) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *NotificationRepo) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NotificationRepo) Get(id uuid.UUID) (*db.Notification, error) {
	ret := _m.Called(id)

	var r0 *db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Notification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Notification); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: nodeId, serviceName, nType, count, sort
func (_m *NotificationRepo) List(nodeId string, serviceName string, nType string, count uint32, sort bool) ([]db.Notification, error) {
	ret := _m.Called(nodeId, serviceName, nType, count, sort)

	var r0 []db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, uint32, bool) ([]db.Notification, error)); ok {
		return rf(nodeId, serviceName, nType, count, sort)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, uint32, bool) []db.Notification); ok {
		r0 = rf(nodeId, serviceName, nType, count, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, uint32, bool) error); ok {
		r1 = rf(nodeId, serviceName, nType, count, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Purge provides a mock function with given fields: nodeId, serviceName, nType
func (_m *NotificationRepo) Purge(nodeId string, serviceName string, nType string) ([]db.Notification, error) {
	ret := _m.Called(nodeId, serviceName, nType)

	var r0 []db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]db.Notification, error)); ok {
		return rf(nodeId, serviceName, nType)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []db.Notification); ok {
		r0 = rf(nodeId, serviceName, nType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(nodeId, serviceName, nType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNotificationRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationRepo creates a new instance of NotificationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationRepo(t mockConstructorTestingTNewNotificationRepo) *NotificationRepo {
	mock := &NotificationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
