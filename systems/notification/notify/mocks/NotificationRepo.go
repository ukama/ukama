// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "github.com/ukama/ukama/systems/notification/notify/internal/db"
import mock "github.com/stretchr/testify/mock"

// NotificationRepo is an autogenerated mock type for the NotificationRepo type
type NotificationRepo struct {
	mock.Mock
}

// CleanEverything provides a mock function with given fields:
func (_m *NotificationRepo) CleanEverything() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotification provides a mock function with given fields: id
func (_m *NotificationRepo) DeleteNotification(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotificationForNode provides a mock function with given fields: nodeId, ntype
func (_m *NotificationRepo) DeleteNotificationForNode(nodeId string, ntype string) error {
	ret := _m.Called(nodeId, ntype)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeId, ntype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotificationForService provides a mock function with given fields: service, ntype
func (_m *NotificationRepo) DeleteNotificationForService(service string, ntype string) error {
	ret := _m.Called(service, ntype)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(service, ntype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotificationForNode provides a mock function with given fields: nodeId, ntype
func (_m *NotificationRepo) GetNotificationForNode(nodeId string, ntype string) (*[]db.Notification, error) {
	ret := _m.Called(nodeId, ntype)

	var r0 *[]db.Notification
	if rf, ok := ret.Get(0).(func(string, string) *[]db.Notification); ok {
		r0 = rf(nodeId, ntype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nodeId, ntype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationForService provides a mock function with given fields: service, ntype
func (_m *NotificationRepo) GetNotificationForService(service string, ntype string) (*[]db.Notification, error) {
	ret := _m.Called(service, ntype)

	var r0 *[]db.Notification
	if rf, ok := ret.Get(0).(func(string, string) *[]db.Notification); ok {
		r0 = rf(service, ntype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(service, ntype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: n
func (_m *NotificationRepo) Insert(n *db.Notification) error {
	ret := _m.Called(n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Notification) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *NotificationRepo) List() (*[]db.Notification, error) {
	ret := _m.Called()

	var r0 *[]db.Notification
	if rf, ok := ret.Get(0).(func() *[]db.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationForNode provides a mock function with given fields: nodeId, count
func (_m *NotificationRepo) ListNotificationForNode(nodeId string, count int) (*[]db.Notification, error) {
	ret := _m.Called(nodeId, count)

	var r0 *[]db.Notification
	if rf, ok := ret.Get(0).(func(string, int) *[]db.Notification); ok {
		r0 = rf(nodeId, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(nodeId, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationForService provides a mock function with given fields: service, count
func (_m *NotificationRepo) ListNotificationForService(service string, count int) (*[]db.Notification, error) {
	ret := _m.Called(service, count)

	var r0 *[]db.Notification
	if rf, ok := ret.Get(0).(func(string, int) *[]db.Notification); ok {
		r0 = rf(service, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(service, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
