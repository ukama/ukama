// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/notification/event-notify/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// EventToNotifyServiceClient is an autogenerated mock type for the EventToNotifyServiceClient type
type EventToNotifyServiceClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *EventToNotifyServiceClient) Get(ctx context.Context, in *gen.GetRequest, opts ...grpc.CallOption) (*gen.GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest, ...grpc.CallOption) (*gen.GetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest, ...grpc.CallOption) *gen.GetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, in, opts
func (_m *EventToNotifyServiceClient) GetAll(ctx context.Context, in *gen.GetAllRequest, opts ...grpc.CallOption) (*gen.GetAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetAllResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllRequest, ...grpc.CallOption) (*gen.GetAllResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllRequest, ...grpc.CallOption) *gen.GetAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetAllResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationStream provides a mock function with given fields: ctx, in, opts
func (_m *EventToNotifyServiceClient) GetNotificationStream(ctx context.Context, in *gen.NotificationStreamRequest, opts ...grpc.CallOption) (gen.EventToNotifyService_GetNotificationStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 gen.EventToNotifyService_GetNotificationStreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NotificationStreamRequest, ...grpc.CallOption) (gen.EventToNotifyService_GetNotificationStreamClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NotificationStreamRequest, ...grpc.CallOption) gen.EventToNotifyService_GetNotificationStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.EventToNotifyService_GetNotificationStreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NotificationStreamRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, in, opts
func (_m *EventToNotifyServiceClient) UpdateStatus(ctx context.Context, in *gen.UpdateStatusRequest, opts ...grpc.CallOption) (*gen.UpdateStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStatusRequest, ...grpc.CallOption) (*gen.UpdateStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStatusRequest, ...grpc.CallOption) *gen.UpdateStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventToNotifyServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventToNotifyServiceClient creates a new instance of EventToNotifyServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventToNotifyServiceClient(t mockConstructorTestingTNewEventToNotifyServiceClient) *EventToNotifyServiceClient {
	mock := &EventToNotifyServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
