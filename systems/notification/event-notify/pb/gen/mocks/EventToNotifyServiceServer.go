// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/notification/event-notify/pb/gen"
)

// EventToNotifyServiceServer is an autogenerated mock type for the EventToNotifyServiceServer type
type EventToNotifyServiceServer struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *EventToNotifyServiceServer) Get(_a0 context.Context, _a1 *gen.GetRequest) (*gen.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) (*gen.GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) *gen.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *EventToNotifyServiceServer) GetAll(_a0 context.Context, _a1 *gen.GetAllRequest) (*gen.GetAllResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *gen.GetAllResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllRequest) (*gen.GetAllResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllRequest) *gen.GetAllResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetAllResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationsStream provides a mock function with given fields: _a0, _a1
func (_m *EventToNotifyServiceServer) NotificationsStream(_a0 *gen.NotificationsStreamRequest, _a1 gen.EventToNotifyService_NotificationsStreamServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gen.NotificationsStreamRequest, gen.EventToNotifyService_NotificationsStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *EventToNotifyServiceServer) UpdateStatus(_a0 context.Context, _a1 *gen.UpdateStatusRequest) (*gen.UpdateStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *gen.UpdateStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStatusRequest) (*gen.UpdateStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStatusRequest) *gen.UpdateStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEventToNotifyServiceServer provides a mock function with given fields:
func (_m *EventToNotifyServiceServer) mustEmbedUnimplementedEventToNotifyServiceServer() {
	_m.Called()
}

// NewEventToNotifyServiceServer creates a new instance of EventToNotifyServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventToNotifyServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventToNotifyServiceServer {
	mock := &EventToNotifyServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
