// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/event-notify/pkg/db"
)

// EventMsgRepo is an autogenerated mock type for the EventMsgRepo type
type EventMsgRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: event
func (_m *EventMsgRepo) Add(event *db.EventMsg) (uint, error) {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.EventMsg) (uint, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(*db.EventMsg) uint); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*db.EventMsg) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *EventMsgRepo) Get(id uint) (*db.EventMsg, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.EventMsg
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*db.EventMsg, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *db.EventMsg); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.EventMsg)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventMsgRepo creates a new instance of EventMsgRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventMsgRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventMsgRepo {
	mock := &EventMsgRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
