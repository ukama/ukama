// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/event-notify/pkg/db"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: user
func (_m *UserRepo) Add(user *db.Users) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsers provides a mock function with given fields: orgId, networkId, subscriberId, userId, role
func (_m *UserRepo) GetUsers(orgId string, networkId string, subscriberId string, userId string, role db.RoleType) ([]*db.Users, error) {
	ret := _m.Called(orgId, networkId, subscriberId, userId, role)

	var r0 []*db.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, db.RoleType) ([]*db.Users, error)); ok {
		return rf(orgId, networkId, subscriberId, userId, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, db.RoleType) []*db.Users); ok {
		r0 = rf(orgId, networkId, subscriberId, userId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, db.RoleType) error); ok {
		r1 = rf(orgId, networkId, subscriberId, userId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
