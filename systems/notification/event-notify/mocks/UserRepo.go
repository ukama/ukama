// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/event-notify/pkg/db"

	roles "github.com/ukama/ukama/systems/common/roles"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: user
func (_m *UserRepo) Add(user *db.Users) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: orgId
func (_m *UserRepo) GetAllUsers(orgId string) ([]*db.Users, error) {
	ret := _m.Called(orgId)

	var r0 []*db.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*db.Users, error)); ok {
		return rf(orgId)
	}
	if rf, ok := ret.Get(0).(func(string) []*db.Users); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriber provides a mock function with given fields: subscriberId
func (_m *UserRepo) GetSubscriber(subscriberId string) (*db.Users, error) {
	ret := _m.Called(subscriberId)

	var r0 *db.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Users, error)); ok {
		return rf(subscriberId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Users); ok {
		r0 = rf(subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userId
func (_m *UserRepo) GetUser(userId string) (*db.Users, error) {
	ret := _m.Called(userId)

	var r0 *db.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Users, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Users); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithRoles provides a mock function with given fields: orgId, _a1
func (_m *UserRepo) GetUserWithRoles(orgId string, _a1 []roles.RoleType) ([]*db.Users, error) {
	ret := _m.Called(orgId, _a1)

	var r0 []*db.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []roles.RoleType) ([]*db.Users, error)); ok {
		return rf(orgId, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, []roles.RoleType) []*db.Users); ok {
		r0 = rf(orgId, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []roles.RoleType) error); ok {
		r1 = rf(orgId, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: orgId, networkId, subscriberId, userId, role
func (_m *UserRepo) GetUsers(orgId string, networkId string, subscriberId string, userId string, role uint8) ([]*db.Users, error) {
	ret := _m.Called(orgId, networkId, subscriberId, userId, role)

	var r0 []*db.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, uint8) ([]*db.Users, error)); ok {
		return rf(orgId, networkId, subscriberId, userId, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, uint8) []*db.Users); ok {
		r0 = rf(orgId, networkId, subscriberId, userId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, uint8) error); ok {
		r1 = rf(orgId, networkId, subscriberId, userId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
