// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/event-notify/pkg/db"
)

// NodeStateRepo is an autogenerated mock type for the NodeStateRepo type
type NodeStateRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: nodeState
func (_m *NodeStateRepo) Add(nodeState *db.NodeState) error {
	ret := _m.Called(nodeState)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.NodeState) error); ok {
		r0 = rf(nodeState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNodeStates provides a mock function with given fields:
func (_m *NodeStateRepo) GetAllNodeStates() ([]*db.NodeState, error) {
	ret := _m.Called()

	var r0 []*db.NodeState
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*db.NodeState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*db.NodeState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.NodeState)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeState provides a mock function with given fields: nodeId
func (_m *NodeStateRepo) GetNodeState(nodeId string) (*db.NodeState, error) {
	ret := _m.Called(nodeId)

	var r0 *db.NodeState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.NodeState, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.NodeState); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NodeState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeStateRepo creates a new instance of NodeStateRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeStateRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeStateRepo {
	mock := &NodeStateRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
