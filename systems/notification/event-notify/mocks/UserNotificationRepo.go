// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/event-notify/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// UserNotificationRepo is an autogenerated mock type for the UserNotificationRepo type
type UserNotificationRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: un
func (_m *UserNotificationRepo) Add(un []*db.UserNotification) error {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*db.UserNotification) error); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotificationsByUserID provides a mock function with given fields: id
func (_m *UserNotificationRepo) GetNotificationsByUserID(id string) ([]*db.Notifications, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByUserID")
	}

	var r0 []*db.Notifications
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*db.Notifications, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []*db.Notifications); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Notifications)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, isRead
func (_m *UserNotificationRepo) Update(id uuid.UUID, isRead bool) error {
	ret := _m.Called(id, isRead)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) error); ok {
		r0 = rf(id, isRead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserNotificationRepo creates a new instance of UserNotificationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserNotificationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserNotificationRepo {
	mock := &UserNotificationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
