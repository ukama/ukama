// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	gen "github.com/ukama/ukama/systems/notification/distributor/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DistributorServiceServer is an autogenerated mock type for the DistributorServiceServer type
type DistributorServiceServer struct {
	mock.Mock
}

// GetNotificationStream provides a mock function with given fields: _a0, _a1
func (_m *DistributorServiceServer) GetNotificationStream(_a0 *gen.NotificationStreamRequest, _a1 grpc.ServerStreamingServer[gen.Notification]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gen.NotificationStreamRequest, grpc.ServerStreamingServer[gen.Notification]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mustEmbedUnimplementedDistributorServiceServer provides a mock function with given fields:
func (_m *DistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {
	_m.Called()
}

// NewDistributorServiceServer creates a new instance of DistributorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDistributorServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DistributorServiceServer {
	mock := &DistributorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
