// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: distributor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributorServiceClient is the client API for DistributorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributorServiceClient interface {
	NotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (DistributorService_NotificationStreamClient, error)
	GetNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
}

type distributorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributorServiceClient(cc grpc.ClientConnInterface) DistributorServiceClient {
	return &distributorServiceClient{cc}
}

func (c *distributorServiceClient) NotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (DistributorService_NotificationStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributorService_ServiceDesc.Streams[0], "/ukama.notification.distributor.v1.DistributorService/NotificationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributorServiceNotificationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DistributorService_NotificationStreamClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type distributorServiceNotificationStreamClient struct {
	grpc.ClientStream
}

func (x *distributorServiceNotificationStreamClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *distributorServiceClient) GetNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, "/ukama.notification.distributor.v1.DistributorService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributorServiceServer is the server API for DistributorService service.
// All implementations must embed UnimplementedDistributorServiceServer
// for forward compatibility
type DistributorServiceServer interface {
	NotificationStream(*NotificationStreamRequest, DistributorService_NotificationStreamServer) error
	GetNotifications(context.Context, *NotificationsRequest) (*NotificationsResponse, error)
	mustEmbedUnimplementedDistributorServiceServer()
}

// UnimplementedDistributorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributorServiceServer struct {
}

func (UnimplementedDistributorServiceServer) NotificationStream(*NotificationStreamRequest, DistributorService_NotificationStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NotificationStream not implemented")
}
func (UnimplementedDistributorServiceServer) GetNotifications(context.Context, *NotificationsRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedDistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {}

// UnsafeDistributorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributorServiceServer will
// result in compilation errors.
type UnsafeDistributorServiceServer interface {
	mustEmbedUnimplementedDistributorServiceServer()
}

func RegisterDistributorServiceServer(s grpc.ServiceRegistrar, srv DistributorServiceServer) {
	s.RegisterService(&DistributorService_ServiceDesc, srv)
}

func _DistributorService_NotificationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistributorServiceServer).NotificationStream(m, &distributorServiceNotificationStreamServer{stream})
}

type DistributorService_NotificationStreamServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type distributorServiceNotificationStreamServer struct {
	grpc.ServerStream
}

func (x *distributorServiceNotificationStreamServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _DistributorService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.notification.distributor.v1.DistributorService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).GetNotifications(ctx, req.(*NotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributorService_ServiceDesc is the grpc.ServiceDesc for DistributorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.notification.distributor.v1.DistributorService",
	HandlerType: (*DistributorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifications",
			Handler:    _DistributorService_GetNotifications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotificationStream",
			Handler:       _DistributorService_NotificationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "distributor.proto",
}
