// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: distributor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributorServiceClient is the client API for DistributorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributorServiceClient interface {
	GetNotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (DistributorService_GetNotificationStreamClient, error)
}

type distributorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributorServiceClient(cc grpc.ClientConnInterface) DistributorServiceClient {
	return &distributorServiceClient{cc}
}

func (c *distributorServiceClient) GetNotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (DistributorService_GetNotificationStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributorService_ServiceDesc.Streams[0], "/ukama.notification.distributor.v1.DistributorService/GetNotificationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributorServiceGetNotificationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DistributorService_GetNotificationStreamClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type distributorServiceGetNotificationStreamClient struct {
	grpc.ClientStream
}

func (x *distributorServiceGetNotificationStreamClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributorServiceServer is the server API for DistributorService service.
// All implementations must embed UnimplementedDistributorServiceServer
// for forward compatibility
type DistributorServiceServer interface {
	GetNotificationStream(*NotificationStreamRequest, DistributorService_GetNotificationStreamServer) error
	mustEmbedUnimplementedDistributorServiceServer()
}

// UnimplementedDistributorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributorServiceServer struct {
}

func (UnimplementedDistributorServiceServer) GetNotificationStream(*NotificationStreamRequest, DistributorService_GetNotificationStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotificationStream not implemented")
}
func (UnimplementedDistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {}

// UnsafeDistributorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributorServiceServer will
// result in compilation errors.
type UnsafeDistributorServiceServer interface {
	mustEmbedUnimplementedDistributorServiceServer()
}

func RegisterDistributorServiceServer(s grpc.ServiceRegistrar, srv DistributorServiceServer) {
	s.RegisterService(&DistributorService_ServiceDesc, srv)
}

func _DistributorService_GetNotificationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistributorServiceServer).GetNotificationStream(m, &distributorServiceGetNotificationStreamServer{stream})
}

type DistributorService_GetNotificationStreamServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type distributorServiceGetNotificationStreamServer struct {
	grpc.ServerStream
}

func (x *distributorServiceGetNotificationStreamServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// DistributorService_ServiceDesc is the grpc.ServiceDesc for DistributorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.notification.distributor.v1.DistributorService",
	HandlerType: (*DistributorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotificationStream",
			Handler:       _DistributorService_GetNotificationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "distributor.proto",
}
