// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/distributor/pkg/db"

	notification "github.com/ukama/ukama/systems/common/notification"
)

// NotifyHandler is an autogenerated mock type for the NotifyHandler type
type NotifyHandler struct {
	mock.Mock
}

// Deregister provides a mock function with given fields: id
func (_m *NotifyHandler) Deregister(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Deregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: orgId, networkId, subscriberId, userId, scopes
func (_m *NotifyHandler) Register(orgId string, networkId string, subscriberId string, userId string, scopes []notification.NotificationScope) (string, *db.Sub) {
	ret := _m.Called(orgId, networkId, subscriberId, userId, scopes)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 *db.Sub
	if rf, ok := ret.Get(0).(func(string, string, string, string, []notification.NotificationScope) (string, *db.Sub)); ok {
		return rf(orgId, networkId, subscriberId, userId, scopes)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, []notification.NotificationScope) string); ok {
		r0 = rf(orgId, networkId, subscriberId, userId, scopes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, []notification.NotificationScope) *db.Sub); ok {
		r1 = rf(orgId, networkId, subscriberId, userId, scopes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.Sub)
		}
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *NotifyHandler) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *NotifyHandler) Stop() {
	_m.Called()
}

// NewNotifyHandler creates a new instance of NotifyHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifyHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotifyHandler {
	mock := &NotifyHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
