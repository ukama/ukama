// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/member/pb/gen"

	pbgen "github.com/ukama/ukama/systems/registry/network/pb/gen"
)

// RegistryProvider is an autogenerated mock type for the RegistryProvider type
type RegistryProvider struct {
	mock.Mock
}

// GetMember provides a mock function with given fields: orgName, uuid
func (_m *RegistryProvider) GetMember(orgName string, uuid string) (*gen.MemberResponse, error) {
	ret := _m.Called(orgName, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetMember")
	}

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.MemberResponse, error)); ok {
		return rf(orgName, uuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.MemberResponse); ok {
		r0 = rf(orgName, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: orgName, netID
func (_m *RegistryProvider) GetNetwork(orgName string, netID string) (*pbgen.GetResponse, error) {
	ret := _m.Called(orgName, netID)

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *pbgen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pbgen.GetResponse, error)); ok {
		return rf(orgName, netID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pbgen.GetResponse); ok {
		r0 = rf(orgName, netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRegistryProvider creates a new instance of RegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryProvider {
	mock := &RegistryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
