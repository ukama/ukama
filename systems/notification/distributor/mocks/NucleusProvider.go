// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/nucleus/org/pb/gen"

	pbgen "github.com/ukama/ukama/systems/nucleus/user/pb/gen"
)

// NucleusProvider is an autogenerated mock type for the NucleusProvider type
type NucleusProvider struct {
	mock.Mock
}

// GetOrg provides a mock function with given fields: orgName
func (_m *NucleusProvider) GetOrg(orgName string) (*gen.GetByNameResponse, error) {
	ret := _m.Called(orgName)

	var r0 *gen.GetByNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByNameResponse, error)); ok {
		return rf(orgName)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByNameResponse); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Whoami provides a mock function with given fields: orgName, uuid
func (_m *NucleusProvider) Whoami(orgName string, uuid string) (*pbgen.WhoamiResponse, error) {
	ret := _m.Called(orgName, uuid)

	var r0 *pbgen.WhoamiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pbgen.WhoamiResponse, error)); ok {
		return rf(orgName, uuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pbgen.WhoamiResponse); ok {
		r0 = rf(orgName, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.WhoamiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNucleusProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewNucleusProvider creates a new instance of NucleusProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNucleusProvider(t mockConstructorTestingTNewNucleusProvider) *NucleusProvider {
	mock := &NucleusProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
