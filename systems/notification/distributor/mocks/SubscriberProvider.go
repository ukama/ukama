// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/registry/pb/gen"
)

// SubscriberProvider is an autogenerated mock type for the SubscriberProvider type
type SubscriberProvider struct {
	mock.Mock
}

// GetSubscriber provides a mock function with given fields: orgName, subscriberId
func (_m *SubscriberProvider) GetSubscriber(orgName string, subscriberId string) (*gen.GetSubscriberResponse, error) {
	ret := _m.Called(orgName, subscriberId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriber")
	}

	var r0 *gen.GetSubscriberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.GetSubscriberResponse, error)); ok {
		return rf(orgName, subscriberId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.GetSubscriberResponse); ok {
		r0 = rf(orgName, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSubscriberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriberProvider creates a new instance of SubscriberProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriberProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriberProvider {
	mock := &SubscriberProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
