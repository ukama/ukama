// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/notification/mailer/pb/gen"
)

// MaillingServiceServer is an autogenerated mock type for the MaillingServiceServer type
type MaillingServiceServer struct {
	mock.Mock
}

// SendEmail provides a mock function with given fields: _a0, _a1
func (_m *MaillingServiceServer) SendEmail(_a0 context.Context, _a1 *gen.SendEmailRequest) (*gen.SendEmailResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.SendEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SendEmailRequest) (*gen.SendEmailResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SendEmailRequest) *gen.SendEmailResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SendEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SendEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedMaillingServiceServer provides a mock function with given fields:
func (_m *MaillingServiceServer) mustEmbedUnimplementedMaillingServiceServer() {
	_m.Called()
}

// NewMaillingServiceServer creates a new instance of MaillingServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaillingServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MaillingServiceServer {
	mock := &MaillingServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
