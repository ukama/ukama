// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/notification/mailer/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// MailerRepo is an autogenerated mock type for the MailerRepo type
type MailerRepo struct {
	mock.Mock
}

// GetEmailById provides a mock function with given fields: mailerId
func (_m *MailerRepo) GetEmailById(mailerId uuid.UUID) (*db.Mailing, error) {
	ret := _m.Called(mailerId)

	var r0 *db.Mailing
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Mailing, error)); ok {
		return rf(mailerId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Mailing); ok {
		r0 = rf(mailerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Mailing)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(mailerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: mail
func (_m *MailerRepo) SendEmail(mail *db.Mailing) error {
	ret := _m.Called(mail)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Mailing) error); ok {
		r0 = rf(mail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMailerRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMailerRepo creates a new instance of MailerRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMailerRepo(t mockConstructorTestingTNewMailerRepo) *MailerRepo {
	mock := &MailerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
