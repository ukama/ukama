// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"

	ukama "github.com/ukama/ukama/systems/common/pb/gen/ukama"
)

// QueuePublisher is an autogenerated mock type for the QueuePublisher type
type QueuePublisher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *QueuePublisher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: msg
func (_m *QueuePublisher) Publish(msg *ukama.NodeFeederMessage) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ukama.NodeFeederMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishProto provides a mock function with given fields: payload, routingKey
func (_m *QueuePublisher) PublishProto(payload protoreflect.ProtoMessage, routingKey string) error {
	ret := _m.Called(payload, routingKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(protoreflect.ProtoMessage, string) error); ok {
		r0 = rf(payload, routingKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishToQueue provides a mock function with given fields: queueName, payload
func (_m *QueuePublisher) PublishToQueue(queueName string, payload interface{}) error {
	ret := _m.Called(queueName, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(queueName, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQueuePublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueuePublisher creates a new instance of QueuePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueuePublisher(t mockConstructorTestingTNewQueuePublisher) *QueuePublisher {
	mock := &QueuePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
