<<<<<<< HEAD
// Code generated by mockery v2.20.0. DO NOT EDIT.
=======
// Code generated by mockery v2.30.1. DO NOT EDIT.
>>>>>>> nodefeeder_updates

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/node/pb/gen"
)

// RegistryProvider is an autogenerated mock type for the RegistryProvider type
type RegistryProvider struct {
	mock.Mock
}

// GetAllNodes provides a mock function with given fields: org
func (_m *RegistryProvider) GetAllNodes(org string) (*gen.GetNodesResponse, error) {
	ret := _m.Called(org)

	var r0 *gen.GetNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetNodesResponse, error)); ok {
		return rf(org)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetNodesResponse); ok {
		r0 = rf(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

<<<<<<< HEAD
type mockConstructorTestingTNewRegistryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistryProvider creates a new instance of RegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistryProvider(t mockConstructorTestingTNewRegistryProvider) *RegistryProvider {
=======
// NewRegistryProvider creates a new instance of RegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryProvider {
>>>>>>> nodefeeder_updates
	mock := &RegistryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
