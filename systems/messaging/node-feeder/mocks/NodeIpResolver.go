// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// NodeIpResolver is an autogenerated mock type for the NodeIpResolver type
type NodeIpResolver struct {
	mock.Mock
}

// Resolve provides a mock function with given fields: nodeId
func (_m *NodeIpResolver) Resolve(nodeId ukama.NodeID) (string, error) {
	ret := _m.Called(nodeId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) (string, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) string); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNodeIpResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeIpResolver creates a new instance of NodeIpResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeIpResolver(t mockConstructorTestingTNewNodeIpResolver) *NodeIpResolver {
	mock := &NodeIpResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
