syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/messaging/nns/pb/gen";

import "validator.proto";
import "google/api/annotations.proto";

package ukama.messaging.nns.v1;


service Nns { // The Node Name Service (like DNS)
    rpc Get(GetNodeIPRequest) returns (GetNodeIPResponse);
    rpc Set(SetNodeIPRequest) returns (SetNodeIPResponse);
    rpc List(ListNodeIPRequest) returns (ListNodeIPResponse) {
        option (google.api.http) = {
            post: "/v1/nns/list"
            body: "*"
        };
    }
    rpc Delete(DeleteNodeIPRequest) returns (DeleteNodeIPResponse);
    rpc GetNodeOrgMapList(NodeOrgMapListRequest) returns (NodeOrgMapListResponse);
    rpc GetNodeIPMapList(NodeIPMapListRequest) returns (NodeIPMapListResponse);
}   


message GetNodeIPRequest{
    string nodeId = 1;
}

message GetNodeIPResponse{
    string ip = 1;
}


message SetNodeIPRequest{
    string nodeId = 1  [(validator.field) = { string_not_empty: true}];
    string nodeIp = 2  [(validator.field) = { string_not_empty: true,  regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
    string meshIp = 3  [(validator.field) =  { string_not_empty: true,  regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
    int32 nodePort = 4;
    int32 meshPort = 5;
    string org = 6;
    string network = 7;
    string site = 8;
}

message SetNodeIPResponse{
}


message ListNodeIPResponse {
    repeated string ips  = 1;
}

message ListNodeIPRequest{

}

message DeleteNodeIPRequest{
    string nodeId = 1  [(validator.field) = { string_not_empty: true}];
}

message DeleteNodeIPResponse{

}

message NodeOrgMapListRequest{

}

message NodeOrgMap {
    string nodeId = 1  [(validator.field) = { string_not_empty: true}];
    string nodeIp = 2  [(validator.field) = { string_not_empty: true,  regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
    int32 nodePort = 3;
    int32 meshPort = 4;
    string org = 5;
    string network = 6;
    string site = 7;
    string domainname = 8;
}
message NodeOrgMapListResponse{
  repeated NodeOrgMap map = 1 ;
}

message NodeIPMapListRequest{

}

message NodeIPMap {
    string nodeId = 1  [(validator.field) = { string_not_empty: true}];
    string nodeIp = 2  [(validator.field) = { string_not_empty: true,  regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}
message NodeIPMapListResponse{
  repeated NodeIPMap map =1 ;   
}