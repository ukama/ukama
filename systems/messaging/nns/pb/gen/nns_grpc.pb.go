// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: nns.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NnsClient is the client API for Nns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NnsClient interface {
	Get(ctx context.Context, in *GetNodeIPRequest, opts ...grpc.CallOption) (*GetNodeIPResponse, error)
	Set(ctx context.Context, in *SetNodeIPRequest, opts ...grpc.CallOption) (*SetNodeIPResponse, error)
	List(ctx context.Context, in *ListNodeIPRequest, opts ...grpc.CallOption) (*ListNodeIPResponse, error)
	Delete(ctx context.Context, in *DeleteNodeIPRequest, opts ...grpc.CallOption) (*DeleteNodeIPResponse, error)
	GetNodeOrgMapList(ctx context.Context, in *NodeOrgMapListRequest, opts ...grpc.CallOption) (*NodeOrgMapListResponse, error)
	GetNodeIPMapList(ctx context.Context, in *NodeIPMapListRequest, opts ...grpc.CallOption) (*NodeIPMapListResponse, error)
}

type nnsClient struct {
	cc grpc.ClientConnInterface
}

func NewNnsClient(cc grpc.ClientConnInterface) NnsClient {
	return &nnsClient{cc}
}

func (c *nnsClient) Get(ctx context.Context, in *GetNodeIPRequest, opts ...grpc.CallOption) (*GetNodeIPResponse, error) {
	out := new(GetNodeIPResponse)
	err := c.cc.Invoke(ctx, "/ukama.messaging.nns.v1.Nns/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nnsClient) Set(ctx context.Context, in *SetNodeIPRequest, opts ...grpc.CallOption) (*SetNodeIPResponse, error) {
	out := new(SetNodeIPResponse)
	err := c.cc.Invoke(ctx, "/ukama.messaging.nns.v1.Nns/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nnsClient) List(ctx context.Context, in *ListNodeIPRequest, opts ...grpc.CallOption) (*ListNodeIPResponse, error) {
	out := new(ListNodeIPResponse)
	err := c.cc.Invoke(ctx, "/ukama.messaging.nns.v1.Nns/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nnsClient) Delete(ctx context.Context, in *DeleteNodeIPRequest, opts ...grpc.CallOption) (*DeleteNodeIPResponse, error) {
	out := new(DeleteNodeIPResponse)
	err := c.cc.Invoke(ctx, "/ukama.messaging.nns.v1.Nns/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nnsClient) GetNodeOrgMapList(ctx context.Context, in *NodeOrgMapListRequest, opts ...grpc.CallOption) (*NodeOrgMapListResponse, error) {
	out := new(NodeOrgMapListResponse)
	err := c.cc.Invoke(ctx, "/ukama.messaging.nns.v1.Nns/GetNodeOrgMapList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nnsClient) GetNodeIPMapList(ctx context.Context, in *NodeIPMapListRequest, opts ...grpc.CallOption) (*NodeIPMapListResponse, error) {
	out := new(NodeIPMapListResponse)
	err := c.cc.Invoke(ctx, "/ukama.messaging.nns.v1.Nns/GetNodeIPMapList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NnsServer is the server API for Nns service.
// All implementations must embed UnimplementedNnsServer
// for forward compatibility
type NnsServer interface {
	Get(context.Context, *GetNodeIPRequest) (*GetNodeIPResponse, error)
	Set(context.Context, *SetNodeIPRequest) (*SetNodeIPResponse, error)
	List(context.Context, *ListNodeIPRequest) (*ListNodeIPResponse, error)
	Delete(context.Context, *DeleteNodeIPRequest) (*DeleteNodeIPResponse, error)
	GetNodeOrgMapList(context.Context, *NodeOrgMapListRequest) (*NodeOrgMapListResponse, error)
	GetNodeIPMapList(context.Context, *NodeIPMapListRequest) (*NodeIPMapListResponse, error)
	mustEmbedUnimplementedNnsServer()
}

// UnimplementedNnsServer must be embedded to have forward compatible implementations.
type UnimplementedNnsServer struct {
}

func (UnimplementedNnsServer) Get(context.Context, *GetNodeIPRequest) (*GetNodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNnsServer) Set(context.Context, *SetNodeIPRequest) (*SetNodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedNnsServer) List(context.Context, *ListNodeIPRequest) (*ListNodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNnsServer) Delete(context.Context, *DeleteNodeIPRequest) (*DeleteNodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNnsServer) GetNodeOrgMapList(context.Context, *NodeOrgMapListRequest) (*NodeOrgMapListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeOrgMapList not implemented")
}
func (UnimplementedNnsServer) GetNodeIPMapList(context.Context, *NodeIPMapListRequest) (*NodeIPMapListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeIPMapList not implemented")
}
func (UnimplementedNnsServer) mustEmbedUnimplementedNnsServer() {}

// UnsafeNnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NnsServer will
// result in compilation errors.
type UnsafeNnsServer interface {
	mustEmbedUnimplementedNnsServer()
}

func RegisterNnsServer(s grpc.ServiceRegistrar, srv NnsServer) {
	s.RegisterService(&Nns_ServiceDesc, srv)
}

func _Nns_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NnsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.messaging.nns.v1.Nns/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NnsServer).Get(ctx, req.(*GetNodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nns_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NnsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.messaging.nns.v1.Nns/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NnsServer).Set(ctx, req.(*SetNodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nns_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NnsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.messaging.nns.v1.Nns/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NnsServer).List(ctx, req.(*ListNodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nns_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NnsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.messaging.nns.v1.Nns/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NnsServer).Delete(ctx, req.(*DeleteNodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nns_GetNodeOrgMapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeOrgMapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NnsServer).GetNodeOrgMapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.messaging.nns.v1.Nns/GetNodeOrgMapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NnsServer).GetNodeOrgMapList(ctx, req.(*NodeOrgMapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nns_GetNodeIPMapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeIPMapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NnsServer).GetNodeIPMapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.messaging.nns.v1.Nns/GetNodeIPMapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NnsServer).GetNodeIPMapList(ctx, req.(*NodeIPMapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nns_ServiceDesc is the grpc.ServiceDesc for Nns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.messaging.nns.v1.Nns",
	HandlerType: (*NnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Nns_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Nns_Set_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Nns_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Nns_Delete_Handler,
		},
		{
			MethodName: "GetNodeOrgMapList",
			Handler:    _Nns_GetNodeOrgMapList_Handler,
		},
		{
			MethodName: "GetNodeIPMapList",
			Handler:    _Nns_GetNodeIPMapList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nns.proto",
}
