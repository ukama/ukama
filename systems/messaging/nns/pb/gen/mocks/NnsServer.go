// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/messaging/nns/pb/gen"
)

// NnsServer is an autogenerated mock type for the NnsServer type
type NnsServer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *NnsServer) Delete(_a0 context.Context, _a1 *gen.DeleteNodeIPRequest) (*gen.DeleteNodeIPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeIPRequest) (*gen.DeleteNodeIPResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeIPRequest) *gen.DeleteNodeIPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteNodeIPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *NnsServer) Get(_a0 context.Context, _a1 *gen.GetNodeIPRequest) (*gen.GetNodeIPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeIPRequest) (*gen.GetNodeIPResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeIPRequest) *gen.GetNodeIPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeIPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeIPMapList provides a mock function with given fields: _a0, _a1
func (_m *NnsServer) GetNodeIPMapList(_a0 context.Context, _a1 *gen.NodeIPMapListRequest) (*gen.NodeIPMapListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.NodeIPMapListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeIPMapListRequest) (*gen.NodeIPMapListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeIPMapListRequest) *gen.NodeIPMapListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NodeIPMapListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NodeIPMapListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeOrgMapList provides a mock function with given fields: _a0, _a1
func (_m *NnsServer) GetNodeOrgMapList(_a0 context.Context, _a1 *gen.NodeOrgMapListRequest) (*gen.NodeOrgMapListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.NodeOrgMapListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeOrgMapListRequest) (*gen.NodeOrgMapListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeOrgMapListRequest) *gen.NodeOrgMapListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NodeOrgMapListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NodeOrgMapListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *NnsServer) List(_a0 context.Context, _a1 *gen.ListNodeIPRequest) (*gen.ListNodeIPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ListNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListNodeIPRequest) (*gen.ListNodeIPResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListNodeIPRequest) *gen.ListNodeIPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListNodeIPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *NnsServer) Set(_a0 context.Context, _a1 *gen.SetNodeIPRequest) (*gen.SetNodeIPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.SetNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetNodeIPRequest) (*gen.SetNodeIPResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetNodeIPRequest) *gen.SetNodeIPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetNodeIPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNnsServer provides a mock function with given fields:
func (_m *NnsServer) mustEmbedUnimplementedNnsServer() {
	_m.Called()
}

type mockConstructorTestingTNewNnsServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNnsServer creates a new instance of NnsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNnsServer(t mockConstructorTestingTNewNnsServer) *NnsServer {
	mock := &NnsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
