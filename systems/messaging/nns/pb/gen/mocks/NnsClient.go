// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/messaging/nns/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NnsClient is an autogenerated mock type for the NnsClient type
type NnsClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *NnsClient) Delete(ctx context.Context, in *gen.DeleteNodeIPRequest, opts ...grpc.CallOption) (*gen.DeleteNodeIPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeIPRequest, ...grpc.CallOption) (*gen.DeleteNodeIPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeIPRequest, ...grpc.CallOption) *gen.DeleteNodeIPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteNodeIPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *NnsClient) Get(ctx context.Context, in *gen.GetNodeIPRequest, opts ...grpc.CallOption) (*gen.GetNodeIPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeIPRequest, ...grpc.CallOption) (*gen.GetNodeIPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeIPRequest, ...grpc.CallOption) *gen.GetNodeIPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeIPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeIPMapList provides a mock function with given fields: ctx, in, opts
func (_m *NnsClient) GetNodeIPMapList(ctx context.Context, in *gen.NodeIPMapListRequest, opts ...grpc.CallOption) (*gen.NodeIPMapListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.NodeIPMapListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeIPMapListRequest, ...grpc.CallOption) (*gen.NodeIPMapListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeIPMapListRequest, ...grpc.CallOption) *gen.NodeIPMapListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NodeIPMapListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NodeIPMapListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeOrgMapList provides a mock function with given fields: ctx, in, opts
func (_m *NnsClient) GetNodeOrgMapList(ctx context.Context, in *gen.NodeOrgMapListRequest, opts ...grpc.CallOption) (*gen.NodeOrgMapListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.NodeOrgMapListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeOrgMapListRequest, ...grpc.CallOption) (*gen.NodeOrgMapListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeOrgMapListRequest, ...grpc.CallOption) *gen.NodeOrgMapListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NodeOrgMapListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NodeOrgMapListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *NnsClient) List(ctx context.Context, in *gen.ListNodeIPRequest, opts ...grpc.CallOption) (*gen.ListNodeIPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ListNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListNodeIPRequest, ...grpc.CallOption) (*gen.ListNodeIPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListNodeIPRequest, ...grpc.CallOption) *gen.ListNodeIPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListNodeIPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, in, opts
func (_m *NnsClient) Set(ctx context.Context, in *gen.SetNodeIPRequest, opts ...grpc.CallOption) (*gen.SetNodeIPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.SetNodeIPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetNodeIPRequest, ...grpc.CallOption) (*gen.SetNodeIPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetNodeIPRequest, ...grpc.CallOption) *gen.SetNodeIPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetNodeIPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetNodeIPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNnsClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewNnsClient creates a new instance of NnsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNnsClient(t mockConstructorTestingTNewNnsClient) *NnsClient {
	mock := &NnsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
