// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nns.proto

package gen

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	regexp "regexp"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetNodeIPRequest) Validate() error {
	return nil
}
func (this *GetNodeIPResponse) Validate() error {
	return nil
}

var _regex_SetNodeIPRequest_NodeIp = regexp.MustCompile(`^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`)
var _regex_SetNodeIPRequest_MeshIp = regexp.MustCompile(`^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`)

func (this *SetNodeIPRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	if !_regex_SetNodeIPRequest_NodeIp.MatchString(this.NodeIp) {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeIp", fmt.Errorf(`value '%v' must be a string conforming to regex "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"`, this.NodeIp))
	}
	if this.NodeIp == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeIp", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeIp))
	}
	if !_regex_SetNodeIPRequest_MeshIp.MatchString(this.MeshIp) {
		return github_com_mwitkow_go_proto_validators.FieldError("MeshIp", fmt.Errorf(`value '%v' must be a string conforming to regex "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"`, this.MeshIp))
	}
	if this.MeshIp == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("MeshIp", fmt.Errorf(`value '%v' must not be an empty string`, this.MeshIp))
	}
	return nil
}
func (this *SetNodeIPResponse) Validate() error {
	return nil
}
func (this *ListNodeIPResponse) Validate() error {
	return nil
}
func (this *ListNodeIPRequest) Validate() error {
	return nil
}
func (this *DeleteNodeIPRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	return nil
}
func (this *DeleteNodeIPResponse) Validate() error {
	return nil
}
func (this *NodeOrgMapListRequest) Validate() error {
	return nil
}

var _regex_NodeOrgMap_NodeIp = regexp.MustCompile(`^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`)

func (this *NodeOrgMap) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	if !_regex_NodeOrgMap_NodeIp.MatchString(this.NodeIp) {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeIp", fmt.Errorf(`value '%v' must be a string conforming to regex "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"`, this.NodeIp))
	}
	if this.NodeIp == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeIp", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeIp))
	}
	return nil
}
func (this *NodeOrgMapListResponse) Validate() error {
	for _, item := range this.Map {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Map", err)
			}
		}
	}
	return nil
}
func (this *NodeIPMapListRequest) Validate() error {
	return nil
}

var _regex_NodeIPMap_NodeIp = regexp.MustCompile(`^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`)

func (this *NodeIPMap) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	if !_regex_NodeIPMap_NodeIp.MatchString(this.NodeIp) {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeIp", fmt.Errorf(`value '%v' must be a string conforming to regex "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"`, this.NodeIp))
	}
	if this.NodeIp == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeIp", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeIp))
	}
	return nil
}
func (this *NodeIPMapListResponse) Validate() error {
	for _, item := range this.Map {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Map", err)
			}
		}
	}
	return nil
}
