// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: nns.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNodeIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *GetNodeIPRequest) Reset() {
	*x = GetNodeIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeIPRequest) ProtoMessage() {}

func (x *GetNodeIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeIPRequest.ProtoReflect.Descriptor instead.
func (*GetNodeIPRequest) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{0}
}

func (x *GetNodeIPRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GetNodeIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetNodeIPResponse) Reset() {
	*x = GetNodeIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeIPResponse) ProtoMessage() {}

func (x *GetNodeIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeIPResponse.ProtoReflect.Descriptor instead.
func (*GetNodeIPResponse) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{1}
}

func (x *GetNodeIPResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type SetNodeIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeIp   string `protobuf:"bytes,2,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`
	MeshIp   string `protobuf:"bytes,3,opt,name=meshIp,proto3" json:"meshIp,omitempty"`
	NodePort int32  `protobuf:"varint,4,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	MeshPort int32  `protobuf:"varint,5,opt,name=meshPort,proto3" json:"meshPort,omitempty"`
	Org      string `protobuf:"bytes,6,opt,name=org,proto3" json:"org,omitempty"`
	Network  string `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Site     string `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *SetNodeIPRequest) Reset() {
	*x = SetNodeIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeIPRequest) ProtoMessage() {}

func (x *SetNodeIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeIPRequest.ProtoReflect.Descriptor instead.
func (*SetNodeIPRequest) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{2}
}

func (x *SetNodeIPRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SetNodeIPRequest) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *SetNodeIPRequest) GetMeshIp() string {
	if x != nil {
		return x.MeshIp
	}
	return ""
}

func (x *SetNodeIPRequest) GetNodePort() int32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

func (x *SetNodeIPRequest) GetMeshPort() int32 {
	if x != nil {
		return x.MeshPort
	}
	return 0
}

func (x *SetNodeIPRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *SetNodeIPRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *SetNodeIPRequest) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type SetNodeIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNodeIPResponse) Reset() {
	*x = SetNodeIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeIPResponse) ProtoMessage() {}

func (x *SetNodeIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeIPResponse.ProtoReflect.Descriptor instead.
func (*SetNodeIPResponse) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{3}
}

type ListNodeIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *ListNodeIPResponse) Reset() {
	*x = ListNodeIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeIPResponse) ProtoMessage() {}

func (x *ListNodeIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeIPResponse.ProtoReflect.Descriptor instead.
func (*ListNodeIPResponse) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{4}
}

func (x *ListNodeIPResponse) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type ListNodeIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNodeIPRequest) Reset() {
	*x = ListNodeIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeIPRequest) ProtoMessage() {}

func (x *ListNodeIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeIPRequest.ProtoReflect.Descriptor instead.
func (*ListNodeIPRequest) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{5}
}

type DeleteNodeIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *DeleteNodeIPRequest) Reset() {
	*x = DeleteNodeIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeIPRequest) ProtoMessage() {}

func (x *DeleteNodeIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeIPRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeIPRequest) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteNodeIPRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DeleteNodeIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNodeIPResponse) Reset() {
	*x = DeleteNodeIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeIPResponse) ProtoMessage() {}

func (x *DeleteNodeIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeIPResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeIPResponse) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{7}
}

type NodeOrgMapListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeOrgMapListRequest) Reset() {
	*x = NodeOrgMapListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOrgMapListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOrgMapListRequest) ProtoMessage() {}

func (x *NodeOrgMapListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOrgMapListRequest.ProtoReflect.Descriptor instead.
func (*NodeOrgMapListRequest) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{8}
}

type NodeOrgMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeIp     string `protobuf:"bytes,2,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`
	NodePort   int32  `protobuf:"varint,3,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	MeshPort   int32  `protobuf:"varint,4,opt,name=meshPort,proto3" json:"meshPort,omitempty"`
	Org        string `protobuf:"bytes,5,opt,name=org,proto3" json:"org,omitempty"`
	Network    string `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	Site       string `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	Domainname string `protobuf:"bytes,8,opt,name=domainname,proto3" json:"domainname,omitempty"`
}

func (x *NodeOrgMap) Reset() {
	*x = NodeOrgMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOrgMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOrgMap) ProtoMessage() {}

func (x *NodeOrgMap) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOrgMap.ProtoReflect.Descriptor instead.
func (*NodeOrgMap) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{9}
}

func (x *NodeOrgMap) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeOrgMap) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *NodeOrgMap) GetNodePort() int32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

func (x *NodeOrgMap) GetMeshPort() int32 {
	if x != nil {
		return x.MeshPort
	}
	return 0
}

func (x *NodeOrgMap) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *NodeOrgMap) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NodeOrgMap) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *NodeOrgMap) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

type NodeOrgMapListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map []*NodeOrgMap `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty"`
}

func (x *NodeOrgMapListResponse) Reset() {
	*x = NodeOrgMapListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOrgMapListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOrgMapListResponse) ProtoMessage() {}

func (x *NodeOrgMapListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOrgMapListResponse.ProtoReflect.Descriptor instead.
func (*NodeOrgMapListResponse) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{10}
}

func (x *NodeOrgMapListResponse) GetMap() []*NodeOrgMap {
	if x != nil {
		return x.Map
	}
	return nil
}

type NodeIPMapListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeIPMapListRequest) Reset() {
	*x = NodeIPMapListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeIPMapListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPMapListRequest) ProtoMessage() {}

func (x *NodeIPMapListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPMapListRequest.ProtoReflect.Descriptor instead.
func (*NodeIPMapListRequest) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{11}
}

type NodeIPMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeIp string `protobuf:"bytes,2,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`
}

func (x *NodeIPMap) Reset() {
	*x = NodeIPMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeIPMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPMap) ProtoMessage() {}

func (x *NodeIPMap) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPMap.ProtoReflect.Descriptor instead.
func (*NodeIPMap) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{12}
}

func (x *NodeIPMap) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeIPMap) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

type NodeIPMapListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map []*NodeIPMap `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty"`
}

func (x *NodeIPMapListResponse) Reset() {
	*x = NodeIPMapListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nns_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeIPMapListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPMapListResponse) ProtoMessage() {}

func (x *NodeIPMapListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nns_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPMapListResponse.ProtoReflect.Descriptor instead.
func (*NodeIPMapListResponse) Descriptor() ([]byte, []int) {
	return file_nns_proto_rawDescGZIP(), []int{13}
}

func (x *NodeIPMapListResponse) GetMap() []*NodeIPMap {
	if x != nil {
		return x.Map
	}
	return nil
}

var File_nns_proto protoreflect.FileDescriptor

var file_nns_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x23,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0xc2, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x71, 0xe2, 0xdf, 0x1f, 0x6d, 0x0a,
	0x69, 0x5e, 0x28, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x7c, 0x32,
	0x5b, 0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35, 0x5b, 0x30, 0x2d,
	0x35, 0x5d, 0x29, 0x5c, 0x2e, 0x29, 0x7b, 0x33, 0x7d, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x32, 0x7d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x7c, 0x32, 0x35, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x29, 0x24, 0x58, 0x01, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x71, 0xe2, 0xdf, 0x1f, 0x6d, 0x0a, 0x69, 0x5e, 0x28, 0x28,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x34,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x29, 0x5c,
	0x2e, 0x29, 0x7b, 0x33, 0x7d, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d,
	0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35, 0x5b,
	0x30, 0x2d, 0x35, 0x5d, 0x29, 0x24, 0x58, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x4e, 0x6f, 0x64,
	0x65, 0x4f, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x67, 0x4d, 0x61,
	0x70, 0x12, 0x1e, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x71, 0xe2, 0xdf, 0x1f, 0x6d, 0x0a, 0x69, 0x5e, 0x28, 0x28, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x29, 0x5c, 0x2e, 0x29, 0x7b,
	0x33, 0x7d, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x7c, 0x32, 0x5b,
	0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35, 0x5b, 0x30, 0x2d, 0x35,
	0x5d, 0x29, 0x24, 0x58, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x67,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x67, 0x4d, 0x61, 0x70,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x22, 0x16, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4d,
	0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01,
	0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x71, 0xe2, 0xdf,
	0x1f, 0x6d, 0x0a, 0x69, 0x5e, 0x28, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d,
	0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32,
	0x7d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35,
	0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x29, 0x5c, 0x2e, 0x29, 0x7b, 0x33, 0x7d, 0x28, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x34, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x35, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x29, 0x24, 0x58, 0x01, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x22, 0x4c, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x70,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x32, 0xff, 0x04, 0x0a, 0x03, 0x4e, 0x6e, 0x73, 0x12, 0x5a, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x12, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x67,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x6e, 0x6e, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nns_proto_rawDescOnce sync.Once
	file_nns_proto_rawDescData = file_nns_proto_rawDesc
)

func file_nns_proto_rawDescGZIP() []byte {
	file_nns_proto_rawDescOnce.Do(func() {
		file_nns_proto_rawDescData = protoimpl.X.CompressGZIP(file_nns_proto_rawDescData)
	})
	return file_nns_proto_rawDescData
}

var file_nns_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_nns_proto_goTypes = []interface{}{
	(*GetNodeIPRequest)(nil),       // 0: ukama.messaging.nns.v1.GetNodeIPRequest
	(*GetNodeIPResponse)(nil),      // 1: ukama.messaging.nns.v1.GetNodeIPResponse
	(*SetNodeIPRequest)(nil),       // 2: ukama.messaging.nns.v1.SetNodeIPRequest
	(*SetNodeIPResponse)(nil),      // 3: ukama.messaging.nns.v1.SetNodeIPResponse
	(*ListNodeIPResponse)(nil),     // 4: ukama.messaging.nns.v1.ListNodeIPResponse
	(*ListNodeIPRequest)(nil),      // 5: ukama.messaging.nns.v1.ListNodeIPRequest
	(*DeleteNodeIPRequest)(nil),    // 6: ukama.messaging.nns.v1.DeleteNodeIPRequest
	(*DeleteNodeIPResponse)(nil),   // 7: ukama.messaging.nns.v1.DeleteNodeIPResponse
	(*NodeOrgMapListRequest)(nil),  // 8: ukama.messaging.nns.v1.NodeOrgMapListRequest
	(*NodeOrgMap)(nil),             // 9: ukama.messaging.nns.v1.NodeOrgMap
	(*NodeOrgMapListResponse)(nil), // 10: ukama.messaging.nns.v1.NodeOrgMapListResponse
	(*NodeIPMapListRequest)(nil),   // 11: ukama.messaging.nns.v1.NodeIPMapListRequest
	(*NodeIPMap)(nil),              // 12: ukama.messaging.nns.v1.NodeIPMap
	(*NodeIPMapListResponse)(nil),  // 13: ukama.messaging.nns.v1.NodeIPMapListResponse
}
var file_nns_proto_depIdxs = []int32{
	9,  // 0: ukama.messaging.nns.v1.NodeOrgMapListResponse.map:type_name -> ukama.messaging.nns.v1.NodeOrgMap
	12, // 1: ukama.messaging.nns.v1.NodeIPMapListResponse.map:type_name -> ukama.messaging.nns.v1.NodeIPMap
	0,  // 2: ukama.messaging.nns.v1.Nns.Get:input_type -> ukama.messaging.nns.v1.GetNodeIPRequest
	2,  // 3: ukama.messaging.nns.v1.Nns.Set:input_type -> ukama.messaging.nns.v1.SetNodeIPRequest
	5,  // 4: ukama.messaging.nns.v1.Nns.List:input_type -> ukama.messaging.nns.v1.ListNodeIPRequest
	6,  // 5: ukama.messaging.nns.v1.Nns.Delete:input_type -> ukama.messaging.nns.v1.DeleteNodeIPRequest
	8,  // 6: ukama.messaging.nns.v1.Nns.GetNodeOrgMapList:input_type -> ukama.messaging.nns.v1.NodeOrgMapListRequest
	11, // 7: ukama.messaging.nns.v1.Nns.GetNodeIPMapList:input_type -> ukama.messaging.nns.v1.NodeIPMapListRequest
	1,  // 8: ukama.messaging.nns.v1.Nns.Get:output_type -> ukama.messaging.nns.v1.GetNodeIPResponse
	3,  // 9: ukama.messaging.nns.v1.Nns.Set:output_type -> ukama.messaging.nns.v1.SetNodeIPResponse
	4,  // 10: ukama.messaging.nns.v1.Nns.List:output_type -> ukama.messaging.nns.v1.ListNodeIPResponse
	7,  // 11: ukama.messaging.nns.v1.Nns.Delete:output_type -> ukama.messaging.nns.v1.DeleteNodeIPResponse
	10, // 12: ukama.messaging.nns.v1.Nns.GetNodeOrgMapList:output_type -> ukama.messaging.nns.v1.NodeOrgMapListResponse
	13, // 13: ukama.messaging.nns.v1.Nns.GetNodeIPMapList:output_type -> ukama.messaging.nns.v1.NodeIPMapListResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_nns_proto_init() }
func file_nns_proto_init() {
	if File_nns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOrgMapListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOrgMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOrgMapListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeIPMapListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeIPMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nns_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeIPMapListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nns_proto_goTypes,
		DependencyIndexes: file_nns_proto_depIdxs,
		MessageInfos:      file_nns_proto_msgTypes,
	}.Build()
	File_nns_proto = out.File
	file_nns_proto_rawDesc = nil
	file_nns_proto_goTypes = nil
	file_nns_proto_depIdxs = nil
}
