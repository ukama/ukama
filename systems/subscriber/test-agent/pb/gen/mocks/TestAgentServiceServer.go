// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/test-agent/pb/gen"
)

// TestAgentServiceServer is an autogenerated mock type for the TestAgentServiceServer type
type TestAgentServiceServer struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: _a0, _a1
func (_m *TestAgentServiceServer) ActivateSim(_a0 context.Context, _a1 *gen.ActivateSimRequest) (*gen.ActivateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ActivateSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateSimRequest) (*gen.ActivateSimResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateSimRequest) *gen.ActivateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ActivateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindSim provides a mock function with given fields: _a0, _a1
func (_m *TestAgentServiceServer) BindSim(_a0 context.Context, _a1 *gen.BindSimRequest) (*gen.BindSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.BindSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BindSimRequest) (*gen.BindSimResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BindSimRequest) *gen.BindSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.BindSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.BindSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateSim provides a mock function with given fields: _a0, _a1
func (_m *TestAgentServiceServer) DeactivateSim(_a0 context.Context, _a1 *gen.DeactivateSimRequest) (*gen.DeactivateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeactivateSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateSimRequest) (*gen.DeactivateSimResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateSimRequest) *gen.DeactivateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeactivateSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeactivateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: _a0, _a1
func (_m *TestAgentServiceServer) GetSim(_a0 context.Context, _a1 *gen.GetSimRequest) (*gen.GetSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest) (*gen.GetSimResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest) *gen.GetSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSim provides a mock function with given fields: _a0, _a1
func (_m *TestAgentServiceServer) TerminateSim(_a0 context.Context, _a1 *gen.TerminateSimRequest) (*gen.TerminateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.TerminateSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.TerminateSimRequest) (*gen.TerminateSimResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.TerminateSimRequest) *gen.TerminateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.TerminateSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.TerminateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTestAgentServiceServer provides a mock function with given fields:
func (_m *TestAgentServiceServer) mustEmbedUnimplementedTestAgentServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewTestAgentServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTestAgentServiceServer creates a new instance of TestAgentServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTestAgentServiceServer(t mockConstructorTestingTNewTestAgentServiceServer) *TestAgentServiceServer {
	mock := &TestAgentServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
