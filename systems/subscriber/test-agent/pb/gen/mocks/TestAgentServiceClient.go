// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/subscriber/test-agent/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// TestAgentServiceClient is an autogenerated mock type for the TestAgentServiceClient type
type TestAgentServiceClient struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: ctx, in, opts
func (_m *TestAgentServiceClient) ActivateSim(ctx context.Context, in *gen.ActivateSimRequest, opts ...grpc.CallOption) (*gen.ActivateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ActivateSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateSimRequest, ...grpc.CallOption) (*gen.ActivateSimResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateSimRequest, ...grpc.CallOption) *gen.ActivateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ActivateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindSim provides a mock function with given fields: ctx, in, opts
func (_m *TestAgentServiceClient) BindSim(ctx context.Context, in *gen.BindSimRequest, opts ...grpc.CallOption) (*gen.BindSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.BindSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BindSimRequest, ...grpc.CallOption) (*gen.BindSimResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BindSimRequest, ...grpc.CallOption) *gen.BindSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.BindSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.BindSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateSim provides a mock function with given fields: ctx, in, opts
func (_m *TestAgentServiceClient) DeactivateSim(ctx context.Context, in *gen.DeactivateSimRequest, opts ...grpc.CallOption) (*gen.DeactivateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeactivateSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateSimRequest, ...grpc.CallOption) (*gen.DeactivateSimResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateSimRequest, ...grpc.CallOption) *gen.DeactivateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeactivateSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeactivateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: ctx, in, opts
func (_m *TestAgentServiceClient) GetSim(ctx context.Context, in *gen.GetSimRequest, opts ...grpc.CallOption) (*gen.GetSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) (*gen.GetSimResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) *gen.GetSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSim provides a mock function with given fields: ctx, in, opts
func (_m *TestAgentServiceClient) TerminateSim(ctx context.Context, in *gen.TerminateSimRequest, opts ...grpc.CallOption) (*gen.TerminateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.TerminateSimResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.TerminateSimRequest, ...grpc.CallOption) (*gen.TerminateSimResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.TerminateSimRequest, ...grpc.CallOption) *gen.TerminateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.TerminateSimResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.TerminateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTestAgentServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTestAgentServiceClient creates a new instance of TestAgentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTestAgentServiceClient(t mockConstructorTestingTNewTestAgentServiceClient) *TestAgentServiceClient {
	mock := &TestAgentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
