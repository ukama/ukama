// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: test_agent.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestAgentServiceClient is the client API for TestAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAgentServiceClient interface {
	GetSim(ctx context.Context, in *GetSimRequest, opts ...grpc.CallOption) (*GetSimResponse, error)
	ActivateSim(ctx context.Context, in *ActivateSimRequest, opts ...grpc.CallOption) (*ActivateSimResponse, error)
	DeactivateSim(ctx context.Context, in *DeactivateSimRequest, opts ...grpc.CallOption) (*DeactivateSimResponse, error)
	TerminateSim(ctx context.Context, in *TerminateSimRequest, opts ...grpc.CallOption) (*TerminateSimResponse, error)
}

type testAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAgentServiceClient(cc grpc.ClientConnInterface) TestAgentServiceClient {
	return &testAgentServiceClient{cc}
}

func (c *testAgentServiceClient) GetSim(ctx context.Context, in *GetSimRequest, opts ...grpc.CallOption) (*GetSimResponse, error) {
	out := new(GetSimResponse)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.test_agent.v1.TestAgentService/GetSim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAgentServiceClient) ActivateSim(ctx context.Context, in *ActivateSimRequest, opts ...grpc.CallOption) (*ActivateSimResponse, error) {
	out := new(ActivateSimResponse)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.test_agent.v1.TestAgentService/ActivateSim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAgentServiceClient) DeactivateSim(ctx context.Context, in *DeactivateSimRequest, opts ...grpc.CallOption) (*DeactivateSimResponse, error) {
	out := new(DeactivateSimResponse)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.test_agent.v1.TestAgentService/DeactivateSim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAgentServiceClient) TerminateSim(ctx context.Context, in *TerminateSimRequest, opts ...grpc.CallOption) (*TerminateSimResponse, error) {
	out := new(TerminateSimResponse)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.test_agent.v1.TestAgentService/TerminateSim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAgentServiceServer is the server API for TestAgentService service.
// All implementations must embed UnimplementedTestAgentServiceServer
// for forward compatibility
type TestAgentServiceServer interface {
	GetSim(context.Context, *GetSimRequest) (*GetSimResponse, error)
	ActivateSim(context.Context, *ActivateSimRequest) (*ActivateSimResponse, error)
	DeactivateSim(context.Context, *DeactivateSimRequest) (*DeactivateSimResponse, error)
	TerminateSim(context.Context, *TerminateSimRequest) (*TerminateSimResponse, error)
	mustEmbedUnimplementedTestAgentServiceServer()
}

// UnimplementedTestAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestAgentServiceServer struct {
}

func (UnimplementedTestAgentServiceServer) GetSim(context.Context, *GetSimRequest) (*GetSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSim not implemented")
}
func (UnimplementedTestAgentServiceServer) ActivateSim(context.Context, *ActivateSimRequest) (*ActivateSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSim not implemented")
}
func (UnimplementedTestAgentServiceServer) DeactivateSim(context.Context, *DeactivateSimRequest) (*DeactivateSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSim not implemented")
}
func (UnimplementedTestAgentServiceServer) TerminateSim(context.Context, *TerminateSimRequest) (*TerminateSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSim not implemented")
}
func (UnimplementedTestAgentServiceServer) mustEmbedUnimplementedTestAgentServiceServer() {}

// UnsafeTestAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAgentServiceServer will
// result in compilation errors.
type UnsafeTestAgentServiceServer interface {
	mustEmbedUnimplementedTestAgentServiceServer()
}

func RegisterTestAgentServiceServer(s grpc.ServiceRegistrar, srv TestAgentServiceServer) {
	s.RegisterService(&TestAgentService_ServiceDesc, srv)
}

func _TestAgentService_GetSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).GetSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.test_agent.v1.TestAgentService/GetSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).GetSim(ctx, req.(*GetSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAgentService_ActivateSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).ActivateSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.test_agent.v1.TestAgentService/ActivateSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).ActivateSim(ctx, req.(*ActivateSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAgentService_DeactivateSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).DeactivateSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.test_agent.v1.TestAgentService/DeactivateSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).DeactivateSim(ctx, req.(*DeactivateSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAgentService_TerminateSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).TerminateSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.test_agent.v1.TestAgentService/TerminateSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).TerminateSim(ctx, req.(*TerminateSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestAgentService_ServiceDesc is the grpc.ServiceDesc for TestAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.subscriber.test_agent.v1.TestAgentService",
	HandlerType: (*TestAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSim",
			Handler:    _TestAgentService_GetSim_Handler,
		},
		{
			MethodName: "ActivateSim",
			Handler:    _TestAgentService_ActivateSim_Handler,
		},
		{
			MethodName: "DeactivateSim",
			Handler:    _TestAgentService_DeactivateSim_Handler,
		},
		{
			MethodName: "TerminateSim",
			Handler:    _TestAgentService_TerminateSim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_agent.proto",
}
