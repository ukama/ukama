// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	providers "github.com/ukama/ukama/systems/subscriber/sim-manager/pkg/clients/providers"
)

// PackageInfoClient is an autogenerated mock type for the PackageInfoClient type
type PackageInfoClient struct {
	mock.Mock
}

// GetPackageInfo provides a mock function with given fields: packageID
func (_m *PackageInfoClient) GetPackageInfo(packageID string) (*providers.PackageInfo, error) {
	ret := _m.Called(packageID)

	var r0 *providers.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*providers.PackageInfo, error)); ok {
		return rf(packageID)
	}
	if rf, ok := ret.Get(0).(func(string) *providers.PackageInfo); ok {
		r0 = rf(packageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providers.PackageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPackageInfoClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackageInfoClient creates a new instance of PackageInfoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackageInfoClient(t mockConstructorTestingTNewPackageInfoClient) *PackageInfoClient {
	mock := &PackageInfoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
