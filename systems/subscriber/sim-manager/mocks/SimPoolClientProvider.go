// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/sim-pool/pb/gen"
)

// SimPoolClientProvider is an autogenerated mock type for the SimPoolClientProvider type
type SimPoolClientProvider struct {
	mock.Mock
}

// GetClient provides a mock function with given fields:
func (_m *SimPoolClientProvider) GetClient() (gen.SimServiceClient, error) {
	ret := _m.Called()

	var r0 gen.SimServiceClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (gen.SimServiceClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() gen.SimServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.SimServiceClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSimPoolClientProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimPoolClientProvider creates a new instance of SimPoolClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimPoolClientProvider(t mockConstructorTestingTNewSimPoolClientProvider) *SimPoolClientProvider {
	mock := &SimPoolClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
