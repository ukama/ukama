// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	providers "github.com/ukama/ukama/systems/subscriber/sim-manager/pkg/clients/providers"
)

// OperatorClient is an autogenerated mock type for the OperatorClient type
type OperatorClient struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: iccid
func (_m *OperatorClient) ActivateSim(iccid string) error {
	ret := _m.Called(iccid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeactivateSim provides a mock function with given fields: iccid
func (_m *OperatorClient) DeactivateSim(iccid string) error {
	ret := _m.Called(iccid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSimInfo provides a mock function with given fields: iccid
func (_m *OperatorClient) GetSimInfo(iccid string) (*providers.SimInfo, error) {
	ret := _m.Called(iccid)

	var r0 *providers.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*providers.SimInfo, error)); ok {
		return rf(iccid)
	}
	if rf, ok := ret.Get(0).(func(string) *providers.SimInfo); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providers.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSim provides a mock function with given fields: iccid
func (_m *OperatorClient) TerminateSim(iccid string) error {
	ret := _m.Called(iccid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOperatorClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewOperatorClient creates a new instance of OperatorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperatorClient(t mockConstructorTestingTNewOperatorClient) *OperatorClient {
	mock := &OperatorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
