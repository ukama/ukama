// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/subscriber/sim-manager/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// PackageRepo is an autogenerated mock type for the PackageRepo type
type PackageRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: pkg, nestedFunc
func (_m *PackageRepo) Add(pkg *db.Package, nestedFunc func(*db.Package, *gorm.DB) error) error {
	ret := _m.Called(pkg, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Package, func(*db.Package, *gorm.DB) error) error); ok {
		r0 = rf(pkg, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: packageID, nestedFunc
func (_m *PackageRepo) Delete(packageID uuid.UUID, nestedFunc func(uuid.UUID, *gorm.DB) error) error {
	ret := _m.Called(packageID, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(uuid.UUID, *gorm.DB) error) error); ok {
		r0 = rf(packageID, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: packageID
func (_m *PackageRepo) Get(packageID uuid.UUID) (*db.Package, error) {
	ret := _m.Called(packageID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Package, error)); ok {
		return rf(packageID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Package); ok {
		r0 = rf(packageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySim provides a mock function with given fields: simID
func (_m *PackageRepo) GetBySim(simID uuid.UUID) ([]db.Package, error) {
	ret := _m.Called(simID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySim")
	}

	var r0 []db.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Package, error)); ok {
		return rf(simID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Package); ok {
		r0 = rf(simID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(simID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverlap provides a mock function with given fields: _a0
func (_m *PackageRepo) GetOverlap(_a0 *db.Package) ([]db.Package, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOverlap")
	}

	var r0 []db.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Package) ([]db.Package, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*db.Package) []db.Package); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.Package) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: pkg, nestedFunc
func (_m *PackageRepo) Update(pkg *db.Package, nestedFunc func(*db.Package, *gorm.DB) error) error {
	ret := _m.Called(pkg, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Package, func(*db.Package, *gorm.DB) error) error); ok {
		r0 = rf(pkg, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPackageRepo creates a new instance of PackageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageRepo {
	mock := &PackageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
