// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	adapters "github.com/ukama/ukama/systems/subscriber/sim-manager/pkg/clients/adapters"

	mock "github.com/stretchr/testify/mock"
)

// AgentAdapter is an autogenerated mock type for the AgentAdapter type
type AgentAdapter struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) ActivateSim(_a0 context.Context, _a1 adapters.ReqData) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ActivateSim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, adapters.ReqData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) BindSim(_a0 context.Context, _a1 string) (any, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BindSim")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (any, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) any); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *AgentAdapter) Close() {
	_m.Called()
}

// DeactivateSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) DeactivateSim(_a0 context.Context, _a1 adapters.ReqData) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateSim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, adapters.ReqData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) GetSim(_a0 context.Context, _a1 string) (any, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSim")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (any, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) any); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsages provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *AgentAdapter) GetUsages(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string, _a5 string) (any, any, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	if len(ret) == 0 {
		panic("no return value specified for GetUsages")
	}

	var r0 any
	var r1 any
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (any, any, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) any); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) any); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(any)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TerminateSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) TerminateSim(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TerminateSim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePackage provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) UpdatePackage(_a0 context.Context, _a1 adapters.ReqData) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, adapters.ReqData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAgentAdapter creates a new instance of AgentAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentAdapter {
	mock := &AgentAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
