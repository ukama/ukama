// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AgentAdapter is an autogenerated mock type for the AgentAdapter type
type AgentAdapter struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) ActivateSim(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *AgentAdapter) Close() {
	_m.Called()
}

// DeactivateSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) DeactivateSim(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) GetSim(_a0 context.Context, _a1 string) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSim provides a mock function with given fields: _a0, _a1
func (_m *AgentAdapter) TerminateSim(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAgentAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAgentAdapter creates a new instance of AgentAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAgentAdapter(t mockConstructorTestingTNewAgentAdapter) *AgentAdapter {
	mock := &AgentAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
