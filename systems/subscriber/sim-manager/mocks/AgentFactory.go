// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	adapters "github.com/ukama/ukama/systems/subscriber/sim-manager/pkg/clients/adapters"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// AgentFactory is an autogenerated mock type for the AgentFactory type
type AgentFactory struct {
	mock.Mock
}

// GetAgentAdapter provides a mock function with given fields: _a0
func (_m *AgentFactory) GetAgentAdapter(_a0 ukama.SimType) (adapters.AgentAdapter, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentAdapter")
	}

	var r0 adapters.AgentAdapter
	var r1 bool
	if rf, ok := ret.Get(0).(func(ukama.SimType) (adapters.AgentAdapter, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ukama.SimType) adapters.AgentAdapter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapters.AgentAdapter)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.SimType) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewAgentFactory creates a new instance of AgentFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentFactory {
	mock := &AgentFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
