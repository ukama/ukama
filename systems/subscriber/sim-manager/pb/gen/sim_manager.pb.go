// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: sim_manager.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllocateSimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId string `protobuf:"bytes,1,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
	SimToken     string `protobuf:"bytes,2,opt,name=simToken,proto3" json:"simToken,omitempty"`
	PackageId    string `protobuf:"bytes,3,opt,name=packageId,json=plan_id,proto3" json:"packageId,omitempty"`
	NetworkId    string `protobuf:"bytes,4,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
	SimType      string `protobuf:"bytes,5,opt,name=simType,proto3" json:"simType,omitempty"`
}

func (x *AllocateSimRequest) Reset() {
	*x = AllocateSimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateSimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateSimRequest) ProtoMessage() {}

func (x *AllocateSimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateSimRequest.ProtoReflect.Descriptor instead.
func (*AllocateSimRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{0}
}

func (x *AllocateSimRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *AllocateSimRequest) GetSimToken() string {
	if x != nil {
		return x.SimToken
	}
	return ""
}

func (x *AllocateSimRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *AllocateSimRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *AllocateSimRequest) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

type AllocateSimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim *Sim `protobuf:"bytes,1,opt,name=sim,proto3" json:"sim,omitempty"`
}

func (x *AllocateSimResponse) Reset() {
	*x = AllocateSimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateSimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateSimResponse) ProtoMessage() {}

func (x *AllocateSimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateSimResponse.ProtoReflect.Descriptor instead.
func (*AllocateSimResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{1}
}

func (x *AllocateSimResponse) GetSim() *Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type GetSimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId string `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
}

func (x *GetSimRequest) Reset() {
	*x = GetSimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimRequest) ProtoMessage() {}

func (x *GetSimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimRequest.ProtoReflect.Descriptor instead.
func (*GetSimRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{2}
}

func (x *GetSimRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

type GetSimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim *Sim `protobuf:"bytes,1,opt,name=sim,proto3" json:"sim,omitempty"`
}

func (x *GetSimResponse) Reset() {
	*x = GetSimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimResponse) ProtoMessage() {}

func (x *GetSimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimResponse.ProtoReflect.Descriptor instead.
func (*GetSimResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{3}
}

func (x *GetSimResponse) GetSim() *Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type ListSimsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSimsRequest) Reset() {
	*x = ListSimsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSimsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSimsRequest) ProtoMessage() {}

func (x *ListSimsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSimsRequest.ProtoReflect.Descriptor instead.
func (*ListSimsRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{4}
}

type ListSimsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sims []*Sim `protobuf:"bytes,1,rep,name=sims,proto3" json:"sims,omitempty"`
}

func (x *ListSimsResponse) Reset() {
	*x = ListSimsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSimsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSimsResponse) ProtoMessage() {}

func (x *ListSimsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSimsResponse.ProtoReflect.Descriptor instead.
func (*ListSimsResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{5}
}

func (x *ListSimsResponse) GetSims() []*Sim {
	if x != nil {
		return x.Sims
	}
	return nil
}

type GetSimsBySubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId string `protobuf:"bytes,1,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
}

func (x *GetSimsBySubscriberRequest) Reset() {
	*x = GetSimsBySubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimsBySubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimsBySubscriberRequest) ProtoMessage() {}

func (x *GetSimsBySubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimsBySubscriberRequest.ProtoReflect.Descriptor instead.
func (*GetSimsBySubscriberRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{6}
}

func (x *GetSimsBySubscriberRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

type GetSimsBySubscriberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId string `protobuf:"bytes,1,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
	Sims         []*Sim `protobuf:"bytes,2,rep,name=sims,proto3" json:"sims,omitempty"`
}

func (x *GetSimsBySubscriberResponse) Reset() {
	*x = GetSimsBySubscriberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimsBySubscriberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimsBySubscriberResponse) ProtoMessage() {}

func (x *GetSimsBySubscriberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimsBySubscriberResponse.ProtoReflect.Descriptor instead.
func (*GetSimsBySubscriberResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{7}
}

func (x *GetSimsBySubscriberResponse) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *GetSimsBySubscriberResponse) GetSims() []*Sim {
	if x != nil {
		return x.Sims
	}
	return nil
}

type GetSimsByNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId string `protobuf:"bytes,1,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
}

func (x *GetSimsByNetworkRequest) Reset() {
	*x = GetSimsByNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimsByNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimsByNetworkRequest) ProtoMessage() {}

func (x *GetSimsByNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimsByNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetSimsByNetworkRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{8}
}

func (x *GetSimsByNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type GetSimsByNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId string `protobuf:"bytes,1,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
	Sims      []*Sim `protobuf:"bytes,2,rep,name=sims,proto3" json:"sims,omitempty"`
}

func (x *GetSimsByNetworkResponse) Reset() {
	*x = GetSimsByNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimsByNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimsByNetworkResponse) ProtoMessage() {}

func (x *GetSimsByNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimsByNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetSimsByNetworkResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetSimsByNetworkResponse) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GetSimsByNetworkResponse) GetSims() []*Sim {
	if x != nil {
		return x.Sims
	}
	return nil
}

type ToggleSimStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId  string `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ToggleSimStatusRequest) Reset() {
	*x = ToggleSimStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleSimStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleSimStatusRequest) ProtoMessage() {}

func (x *ToggleSimStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleSimStatusRequest.ProtoReflect.Descriptor instead.
func (*ToggleSimStatusRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{10}
}

func (x *ToggleSimStatusRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

func (x *ToggleSimStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ToggleSimStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ToggleSimStatusResponse) Reset() {
	*x = ToggleSimStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleSimStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleSimStatusResponse) ProtoMessage() {}

func (x *ToggleSimStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleSimStatusResponse.ProtoReflect.Descriptor instead.
func (*ToggleSimStatusResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{11}
}

type DeleteSimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId string `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
}

func (x *DeleteSimRequest) Reset() {
	*x = DeleteSimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSimRequest) ProtoMessage() {}

func (x *DeleteSimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSimRequest.ProtoReflect.Descriptor instead.
func (*DeleteSimRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSimRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

type DeleteSimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSimResponse) Reset() {
	*x = DeleteSimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSimResponse) ProtoMessage() {}

func (x *DeleteSimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSimResponse.ProtoReflect.Descriptor instead.
func (*DeleteSimResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{13}
}

type AddPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId     string                 `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
	PackageId string                 `protobuf:"bytes,3,opt,name=packageId,json=package_id,proto3" json:"packageId,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startDate,json=start_date,proto3" json:"startDate,omitempty"`
}

func (x *AddPackageRequest) Reset() {
	*x = AddPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPackageRequest) ProtoMessage() {}

func (x *AddPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPackageRequest.ProtoReflect.Descriptor instead.
func (*AddPackageRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{14}
}

func (x *AddPackageRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

func (x *AddPackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *AddPackageRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

type AddPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPackageResponse) Reset() {
	*x = AddPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPackageResponse) ProtoMessage() {}

func (x *AddPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPackageResponse.ProtoReflect.Descriptor instead.
func (*AddPackageResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{15}
}

type GetPackagesBySimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId string `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
}

func (x *GetPackagesBySimRequest) Reset() {
	*x = GetPackagesBySimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPackagesBySimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackagesBySimRequest) ProtoMessage() {}

func (x *GetPackagesBySimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackagesBySimRequest.ProtoReflect.Descriptor instead.
func (*GetPackagesBySimRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{16}
}

func (x *GetPackagesBySimRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

type GetPackagesBySimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId    string     `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
	Packages []*Package `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
}

func (x *GetPackagesBySimResponse) Reset() {
	*x = GetPackagesBySimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPackagesBySimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackagesBySimResponse) ProtoMessage() {}

func (x *GetPackagesBySimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackagesBySimResponse.ProtoReflect.Descriptor instead.
func (*GetPackagesBySimResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{17}
}

func (x *GetPackagesBySimResponse) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

func (x *GetPackagesBySimResponse) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

type SetActivePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId     string `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
	PackageId string `protobuf:"bytes,3,opt,name=packageId,json=package_id,proto3" json:"packageId,omitempty"`
}

func (x *SetActivePackageRequest) Reset() {
	*x = SetActivePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePackageRequest) ProtoMessage() {}

func (x *SetActivePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePackageRequest.ProtoReflect.Descriptor instead.
func (*SetActivePackageRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{18}
}

func (x *SetActivePackageRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

func (x *SetActivePackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type SetActivePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActivePackageResponse) Reset() {
	*x = SetActivePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePackageResponse) ProtoMessage() {}

func (x *SetActivePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePackageResponse.ProtoReflect.Descriptor instead.
func (*SetActivePackageResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{19}
}

type RemovePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimId     string `protobuf:"bytes,1,opt,name=simId,json=sim_id,proto3" json:"simId,omitempty"`
	PackageId string `protobuf:"bytes,3,opt,name=packageId,json=package_id,proto3" json:"packageId,omitempty"`
}

func (x *RemovePackageRequest) Reset() {
	*x = RemovePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePackageRequest) ProtoMessage() {}

func (x *RemovePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePackageRequest.ProtoReflect.Descriptor instead.
func (*RemovePackageRequest) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{20}
}

func (x *RemovePackageRequest) GetSimId() string {
	if x != nil {
		return x.SimId
	}
	return ""
}

func (x *RemovePackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type RemovePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePackageResponse) Reset() {
	*x = RemovePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePackageResponse) ProtoMessage() {}

func (x *RemovePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePackageResponse.ProtoReflect.Descriptor instead.
func (*RemovePackageResponse) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{21}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,json=start_date,proto3" json:"startDate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,json=end_date,proto3" json:"endDate,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{22}
}

func (x *Package) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Package) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Package) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type Sim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriberId       string                 `protobuf:"bytes,2,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
	NetworkId          string                 `protobuf:"bytes,3,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
	OrgId              string                 `protobuf:"bytes,4,opt,name=orgId,json=org_id,proto3" json:"orgId,omitempty"`
	Package            *Package               `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	Iccid              string                 `protobuf:"bytes,6,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Msisdn             string                 `protobuf:"bytes,7,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Imsi               string                 `protobuf:"bytes,8,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Type               string                 `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	IsPhysical         bool                   `protobuf:"varint,11,opt,name=isPhysical,json=is_physical,proto3" json:"isPhysical,omitempty"`
	FirstActivatedOn   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=firstActivatedOn,proto3" json:"firstActivatedOn,omitempty"`
	LastActivatedOn    *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=lastActivatedOn,proto3" json:"lastActivatedOn,omitempty"`
	ActivationsCount   uint64                 `protobuf:"varint,14,opt,name=activationsCount,proto3" json:"activationsCount,omitempty"`
	DeactivationsCount uint64                 `protobuf:"varint,15,opt,name=deactivationsCount,proto3" json:"deactivationsCount,omitempty"`
	AllocatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=allocatedAt,json=allocated_at,proto3" json:"allocatedAt,omitempty"`
}

func (x *Sim) Reset() {
	*x = Sim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sim) ProtoMessage() {}

func (x *Sim) ProtoReflect() protoreflect.Message {
	mi := &file_sim_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sim.ProtoReflect.Descriptor instead.
func (*Sim) Descriptor() ([]byte, []int) {
	return file_sim_manager_proto_rawDescGZIP(), []int{23}
}

func (x *Sim) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sim) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *Sim) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Sim) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Sim) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Sim) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Sim) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *Sim) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *Sim) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Sim) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Sim) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

func (x *Sim) GetFirstActivatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstActivatedOn
	}
	return nil
}

func (x *Sim) GetLastActivatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivatedOn
	}
	return nil
}

func (x *Sim) GetActivationsCount() uint64 {
	if x != nil {
		return x.ActivationsCount
	}
	return 0
}

func (x *Sim) GetDeactivationsCount() uint64 {
	if x != nil {
		return x.DeactivationsCount
	}
	return 0
}

func (x *Sim) GetAllocatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AllocatedAt
	}
	return nil
}

var File_sim_manager_proto protoreflect.FileDescriptor

var file_sim_manager_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x69, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x69, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x73,
	0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03,
	0x73, 0x69, 0x6d, 0x22, 0x2e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x69, 0x6d,
	0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x22, 0x11, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x22, 0x4c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x6d, 0x52, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01,
	0x90, 0x01, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x22,
	0x73, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x04,
	0x73, 0x69, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x05, 0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53,
	0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x69, 0x6d,
	0x5f, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x05, 0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x69, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04,
	0x52, 0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x65, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x73, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58,
	0x01, 0x90, 0x01, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe1, 0x06, 0x0a, 0x03, 0x53,
	0x69, 0x6d, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01,
	0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63,
	0x63, 0x69, 0x64, 0x12, 0xde, 0x01, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01, 0xe2, 0xdf, 0x1f, 0xc0, 0x01, 0x0a, 0x9e, 0x01, 0x5e,
	0x24, 0x7c, 0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x28, 0x3f, 0x3a, 0x30,
	0x30, 0x7c, 0x5c, 0x2b, 0x29, 0x28, 0x5b, 0x31, 0x2d, 0x34, 0x5d, 0x5c, 0x64, 0x5c, 0x64, 0x7c,
	0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x3f, 0x29, 0x5c, 0x29, 0x3f, 0x29, 0x3f, 0x5b, 0x5c,
	0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x3f, 0x28, 0x28, 0x3f,
	0x3a, 0x5c, 0x28, 0x3f, 0x5c, 0x64, 0x7b, 0x31, 0x2c, 0x7d, 0x5c, 0x29, 0x3f, 0x5b, 0x5c, 0x2d,
	0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x7b, 0x30, 0x2c, 0x7d, 0x29,
	0x28, 0x3f, 0x3a, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f,
	0x28, 0x3f, 0x3a, 0x23, 0x7c, 0x65, 0x78, 0x74, 0x5c, 0x2e, 0x3f, 0x7c, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x7c, 0x78, 0x29, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c,
	0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x5c, 0x64, 0x2b, 0x29, 0x29, 0x3f, 0x24, 0x2a, 0x1d, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x6d, 0x73,
	0x69, 0x73, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x44, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0x9f,
	0x0b, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x6d, 0x12, 0x33, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x12, 0x2e, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x6d, 0x73, 0x12, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x12, 0x3b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x38, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x12, 0x31, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x69, 0x6d, 0x12, 0x32, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x69, 0x6d, 0x12, 0x38, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x69, 0x6d, 0x12, 0x38, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x69,
	0x6d, 0x12, 0x35, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x69,
	0x6d, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sim_manager_proto_rawDescOnce sync.Once
	file_sim_manager_proto_rawDescData = file_sim_manager_proto_rawDesc
)

func file_sim_manager_proto_rawDescGZIP() []byte {
	file_sim_manager_proto_rawDescOnce.Do(func() {
		file_sim_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_sim_manager_proto_rawDescData)
	})
	return file_sim_manager_proto_rawDescData
}

var file_sim_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_sim_manager_proto_goTypes = []interface{}{
	(*AllocateSimRequest)(nil),          // 0: ukama.subscriber.sim_manager.v1.AllocateSimRequest
	(*AllocateSimResponse)(nil),         // 1: ukama.subscriber.sim_manager.v1.AllocateSimResponse
	(*GetSimRequest)(nil),               // 2: ukama.subscriber.sim_manager.v1.GetSimRequest
	(*GetSimResponse)(nil),              // 3: ukama.subscriber.sim_manager.v1.GetSimResponse
	(*ListSimsRequest)(nil),             // 4: ukama.subscriber.sim_manager.v1.ListSimsRequest
	(*ListSimsResponse)(nil),            // 5: ukama.subscriber.sim_manager.v1.ListSimsResponse
	(*GetSimsBySubscriberRequest)(nil),  // 6: ukama.subscriber.sim_manager.v1.GetSimsBySubscriberRequest
	(*GetSimsBySubscriberResponse)(nil), // 7: ukama.subscriber.sim_manager.v1.GetSimsBySubscriberResponse
	(*GetSimsByNetworkRequest)(nil),     // 8: ukama.subscriber.sim_manager.v1.GetSimsByNetworkRequest
	(*GetSimsByNetworkResponse)(nil),    // 9: ukama.subscriber.sim_manager.v1.GetSimsByNetworkResponse
	(*ToggleSimStatusRequest)(nil),      // 10: ukama.subscriber.sim_manager.v1.ToggleSimStatusRequest
	(*ToggleSimStatusResponse)(nil),     // 11: ukama.subscriber.sim_manager.v1.ToggleSimStatusResponse
	(*DeleteSimRequest)(nil),            // 12: ukama.subscriber.sim_manager.v1.DeleteSimRequest
	(*DeleteSimResponse)(nil),           // 13: ukama.subscriber.sim_manager.v1.DeleteSimResponse
	(*AddPackageRequest)(nil),           // 14: ukama.subscriber.sim_manager.v1.AddPackageRequest
	(*AddPackageResponse)(nil),          // 15: ukama.subscriber.sim_manager.v1.AddPackageResponse
	(*GetPackagesBySimRequest)(nil),     // 16: ukama.subscriber.sim_manager.v1.GetPackagesBySimRequest
	(*GetPackagesBySimResponse)(nil),    // 17: ukama.subscriber.sim_manager.v1.GetPackagesBySimResponse
	(*SetActivePackageRequest)(nil),     // 18: ukama.subscriber.sim_manager.v1.SetActivePackageRequest
	(*SetActivePackageResponse)(nil),    // 19: ukama.subscriber.sim_manager.v1.SetActivePackageResponse
	(*RemovePackageRequest)(nil),        // 20: ukama.subscriber.sim_manager.v1.RemovePackageRequest
	(*RemovePackageResponse)(nil),       // 21: ukama.subscriber.sim_manager.v1.RemovePackageResponse
	(*Package)(nil),                     // 22: ukama.subscriber.sim_manager.v1.Package
	(*Sim)(nil),                         // 23: ukama.subscriber.sim_manager.v1.Sim
	(*timestamppb.Timestamp)(nil),       // 24: google.protobuf.Timestamp
}
var file_sim_manager_proto_depIdxs = []int32{
	23, // 0: ukama.subscriber.sim_manager.v1.AllocateSimResponse.sim:type_name -> ukama.subscriber.sim_manager.v1.Sim
	23, // 1: ukama.subscriber.sim_manager.v1.GetSimResponse.sim:type_name -> ukama.subscriber.sim_manager.v1.Sim
	23, // 2: ukama.subscriber.sim_manager.v1.ListSimsResponse.sims:type_name -> ukama.subscriber.sim_manager.v1.Sim
	23, // 3: ukama.subscriber.sim_manager.v1.GetSimsBySubscriberResponse.sims:type_name -> ukama.subscriber.sim_manager.v1.Sim
	23, // 4: ukama.subscriber.sim_manager.v1.GetSimsByNetworkResponse.sims:type_name -> ukama.subscriber.sim_manager.v1.Sim
	24, // 5: ukama.subscriber.sim_manager.v1.AddPackageRequest.startDate:type_name -> google.protobuf.Timestamp
	22, // 6: ukama.subscriber.sim_manager.v1.GetPackagesBySimResponse.packages:type_name -> ukama.subscriber.sim_manager.v1.Package
	24, // 7: ukama.subscriber.sim_manager.v1.Package.startDate:type_name -> google.protobuf.Timestamp
	24, // 8: ukama.subscriber.sim_manager.v1.Package.endDate:type_name -> google.protobuf.Timestamp
	22, // 9: ukama.subscriber.sim_manager.v1.Sim.package:type_name -> ukama.subscriber.sim_manager.v1.Package
	24, // 10: ukama.subscriber.sim_manager.v1.Sim.firstActivatedOn:type_name -> google.protobuf.Timestamp
	24, // 11: ukama.subscriber.sim_manager.v1.Sim.lastActivatedOn:type_name -> google.protobuf.Timestamp
	24, // 12: ukama.subscriber.sim_manager.v1.Sim.allocatedAt:type_name -> google.protobuf.Timestamp
	0,  // 13: ukama.subscriber.sim_manager.v1.SimManagerService.AllocateSim:input_type -> ukama.subscriber.sim_manager.v1.AllocateSimRequest
	2,  // 14: ukama.subscriber.sim_manager.v1.SimManagerService.GetSim:input_type -> ukama.subscriber.sim_manager.v1.GetSimRequest
	4,  // 15: ukama.subscriber.sim_manager.v1.SimManagerService.ListSims:input_type -> ukama.subscriber.sim_manager.v1.ListSimsRequest
	6,  // 16: ukama.subscriber.sim_manager.v1.SimManagerService.GetSimsBySubscriber:input_type -> ukama.subscriber.sim_manager.v1.GetSimsBySubscriberRequest
	8,  // 17: ukama.subscriber.sim_manager.v1.SimManagerService.GetSimsByNetwork:input_type -> ukama.subscriber.sim_manager.v1.GetSimsByNetworkRequest
	10, // 18: ukama.subscriber.sim_manager.v1.SimManagerService.ToggleSimStatus:input_type -> ukama.subscriber.sim_manager.v1.ToggleSimStatusRequest
	12, // 19: ukama.subscriber.sim_manager.v1.SimManagerService.DeleteSim:input_type -> ukama.subscriber.sim_manager.v1.DeleteSimRequest
	14, // 20: ukama.subscriber.sim_manager.v1.SimManagerService.AddPackageForSim:input_type -> ukama.subscriber.sim_manager.v1.AddPackageRequest
	16, // 21: ukama.subscriber.sim_manager.v1.SimManagerService.GetPackagesBySim:input_type -> ukama.subscriber.sim_manager.v1.GetPackagesBySimRequest
	18, // 22: ukama.subscriber.sim_manager.v1.SimManagerService.SetActivePackageForSim:input_type -> ukama.subscriber.sim_manager.v1.SetActivePackageRequest
	20, // 23: ukama.subscriber.sim_manager.v1.SimManagerService.RemovePackageForSim:input_type -> ukama.subscriber.sim_manager.v1.RemovePackageRequest
	1,  // 24: ukama.subscriber.sim_manager.v1.SimManagerService.AllocateSim:output_type -> ukama.subscriber.sim_manager.v1.AllocateSimResponse
	3,  // 25: ukama.subscriber.sim_manager.v1.SimManagerService.GetSim:output_type -> ukama.subscriber.sim_manager.v1.GetSimResponse
	5,  // 26: ukama.subscriber.sim_manager.v1.SimManagerService.ListSims:output_type -> ukama.subscriber.sim_manager.v1.ListSimsResponse
	7,  // 27: ukama.subscriber.sim_manager.v1.SimManagerService.GetSimsBySubscriber:output_type -> ukama.subscriber.sim_manager.v1.GetSimsBySubscriberResponse
	9,  // 28: ukama.subscriber.sim_manager.v1.SimManagerService.GetSimsByNetwork:output_type -> ukama.subscriber.sim_manager.v1.GetSimsByNetworkResponse
	11, // 29: ukama.subscriber.sim_manager.v1.SimManagerService.ToggleSimStatus:output_type -> ukama.subscriber.sim_manager.v1.ToggleSimStatusResponse
	13, // 30: ukama.subscriber.sim_manager.v1.SimManagerService.DeleteSim:output_type -> ukama.subscriber.sim_manager.v1.DeleteSimResponse
	15, // 31: ukama.subscriber.sim_manager.v1.SimManagerService.AddPackageForSim:output_type -> ukama.subscriber.sim_manager.v1.AddPackageResponse
	17, // 32: ukama.subscriber.sim_manager.v1.SimManagerService.GetPackagesBySim:output_type -> ukama.subscriber.sim_manager.v1.GetPackagesBySimResponse
	19, // 33: ukama.subscriber.sim_manager.v1.SimManagerService.SetActivePackageForSim:output_type -> ukama.subscriber.sim_manager.v1.SetActivePackageResponse
	21, // 34: ukama.subscriber.sim_manager.v1.SimManagerService.RemovePackageForSim:output_type -> ukama.subscriber.sim_manager.v1.RemovePackageResponse
	24, // [24:35] is the sub-list for method output_type
	13, // [13:24] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_sim_manager_proto_init() }
func file_sim_manager_proto_init() {
	if File_sim_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sim_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateSimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateSimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSimsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSimsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimsBySubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimsBySubscriberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimsByNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimsByNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleSimStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleSimStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPackagesBySimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPackagesBySimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sim_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sim_manager_proto_goTypes,
		DependencyIndexes: file_sim_manager_proto_depIdxs,
		MessageInfos:      file_sim_manager_proto_msgTypes,
	}.Build()
	File_sim_manager_proto = out.File
	file_sim_manager_proto_rawDesc = nil
	file_sim_manager_proto_goTypes = nil
	file_sim_manager_proto_depIdxs = nil
}
