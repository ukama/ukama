// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/subscriber/sim-manager/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SimManagerServiceClient is an autogenerated mock type for the SimManagerServiceClient type
type SimManagerServiceClient struct {
	mock.Mock
}

// AddPackageForSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) AddPackageForSim(ctx context.Context, in *gen.AddPackageRequest, opts ...grpc.CallOption) (*gen.AddPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) *gen.AddPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) AllocateSim(ctx context.Context, in *gen.AllocateSimRequest, opts ...grpc.CallOption) (*gen.AllocateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AllocateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AllocateSimRequest, ...grpc.CallOption) *gen.AllocateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AllocateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AllocateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) DeleteSim(ctx context.Context, in *gen.DeleteSimRequest, opts ...grpc.CallOption) (*gen.DeleteSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteSimRequest, ...grpc.CallOption) *gen.DeleteSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackagesBySim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetPackagesBySim(ctx context.Context, in *gen.GetPackagesBySimRequest, opts ...grpc.CallOption) (*gen.GetPackagesBySimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetPackagesBySimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetPackagesBySimRequest, ...grpc.CallOption) *gen.GetPackagesBySimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackagesBySimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetPackagesBySimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSim(ctx context.Context, in *gen.GetSimRequest, opts ...grpc.CallOption) (*gen.GetSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) *gen.GetSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsByNetwork provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSimsByNetwork(ctx context.Context, in *gen.GetSimsByNetworkRequest, opts ...grpc.CallOption) (*gen.GetSimsByNetworkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimsByNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimsByNetworkRequest, ...grpc.CallOption) *gen.GetSimsByNetworkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsByNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimsByNetworkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsBySubscriber provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSimsBySubscriber(ctx context.Context, in *gen.GetSimsBySubscriberRequest, opts ...grpc.CallOption) (*gen.GetSimsBySubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimsBySubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimsBySubscriberRequest, ...grpc.CallOption) *gen.GetSimsBySubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsBySubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimsBySubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSims provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) ListSims(ctx context.Context, in *gen.ListSimsRequest, opts ...grpc.CallOption) (*gen.ListSimsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ListSimsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListSimsRequest, ...grpc.CallOption) *gen.ListSimsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListSimsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListSimsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePackageForSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) RemovePackageForSim(ctx context.Context, in *gen.RemovePackageRequest, opts ...grpc.CallOption) (*gen.RemovePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RemovePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemovePackageRequest, ...grpc.CallOption) *gen.RemovePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemovePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemovePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActivePackageForSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) SetActivePackageForSim(ctx context.Context, in *gen.SetActivePackageRequest, opts ...grpc.CallOption) (*gen.SetActivePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.SetActivePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetActivePackageRequest, ...grpc.CallOption) *gen.SetActivePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetActivePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetActivePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleSimStatus provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) ToggleSimStatus(ctx context.Context, in *gen.ToggleSimStatusRequest, opts ...grpc.CallOption) (*gen.ToggleSimStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ToggleSimStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ToggleSimStatusRequest, ...grpc.CallOption) *gen.ToggleSimStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ToggleSimStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ToggleSimStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSimManagerServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimManagerServiceClient creates a new instance of SimManagerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceClient(t mockConstructorTestingTNewSimManagerServiceClient) *SimManagerServiceClient {
	mock := &SimManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
