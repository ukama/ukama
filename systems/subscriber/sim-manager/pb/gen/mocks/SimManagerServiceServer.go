// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/sim-manager/pb/gen"
)

// SimManagerServiceServer is an autogenerated mock type for the SimManagerServiceServer type
type SimManagerServiceServer struct {
	mock.Mock
}

// AddPackageForSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) AddPackageForSim(_a0 context.Context, _a1 *gen.AddPackageRequest) (*gen.AddPackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddPackageRequest) *gen.AddPackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddPackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) AllocateSim(_a0 context.Context, _a1 *gen.AllocateSimRequest) (*gen.AllocateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AllocateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AllocateSimRequest) *gen.AllocateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AllocateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AllocateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) DeleteSim(_a0 context.Context, _a1 *gen.DeleteSimRequest) (*gen.DeleteSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteSimRequest) *gen.DeleteSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackagesBySim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetPackagesBySim(_a0 context.Context, _a1 *gen.GetPackagesBySimRequest) (*gen.GetPackagesBySimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetPackagesBySimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetPackagesBySimRequest) *gen.GetPackagesBySimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackagesBySimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetPackagesBySimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSim(_a0 context.Context, _a1 *gen.GetSimRequest) (*gen.GetSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest) *gen.GetSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsByNetwork provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSimsByNetwork(_a0 context.Context, _a1 *gen.GetSimsByNetworkRequest) (*gen.GetSimsByNetworkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSimsByNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimsByNetworkRequest) *gen.GetSimsByNetworkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsByNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimsByNetworkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsBySubscriber provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSimsBySubscriber(_a0 context.Context, _a1 *gen.GetSimsBySubscriberRequest) (*gen.GetSimsBySubscriberResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSimsBySubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimsBySubscriberRequest) *gen.GetSimsBySubscriberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsBySubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimsBySubscriberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSims provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) ListSims(_a0 context.Context, _a1 *gen.ListSimsRequest) (*gen.ListSimsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ListSimsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListSimsRequest) *gen.ListSimsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListSimsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListSimsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePackageForSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) RemovePackageForSim(_a0 context.Context, _a1 *gen.RemovePackageRequest) (*gen.RemovePackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemovePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemovePackageRequest) *gen.RemovePackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemovePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemovePackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActivePackageForSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) SetActivePackageForSim(_a0 context.Context, _a1 *gen.SetActivePackageRequest) (*gen.SetActivePackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.SetActivePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetActivePackageRequest) *gen.SetActivePackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetActivePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetActivePackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleSimStatus provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) ToggleSimStatus(_a0 context.Context, _a1 *gen.ToggleSimStatusRequest) (*gen.ToggleSimStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ToggleSimStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ToggleSimStatusRequest) *gen.ToggleSimStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ToggleSimStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ToggleSimStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSimManagerServiceServer provides a mock function with given fields:
func (_m *SimManagerServiceServer) mustEmbedUnimplementedSimManagerServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewSimManagerServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimManagerServiceServer creates a new instance of SimManagerServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceServer(t mockConstructorTestingTNewSimManagerServiceServer) *SimManagerServiceServer {
	mock := &SimManagerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
