// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: sim_manager.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimManagerService_AllocateSim_FullMethodName            = "/ukama.subscriber.sim_manager.v1.SimManagerService/AllocateSim"
	SimManagerService_GetSim_FullMethodName                 = "/ukama.subscriber.sim_manager.v1.SimManagerService/GetSim"
	SimManagerService_ListSims_FullMethodName               = "/ukama.subscriber.sim_manager.v1.SimManagerService/ListSims"
	SimManagerService_GetSimsBySubscriber_FullMethodName    = "/ukama.subscriber.sim_manager.v1.SimManagerService/GetSimsBySubscriber"
	SimManagerService_GetSimsByNetwork_FullMethodName       = "/ukama.subscriber.sim_manager.v1.SimManagerService/GetSimsByNetwork"
	SimManagerService_ToggleSimStatus_FullMethodName        = "/ukama.subscriber.sim_manager.v1.SimManagerService/ToggleSimStatus"
	SimManagerService_DeleteSim_FullMethodName              = "/ukama.subscriber.sim_manager.v1.SimManagerService/DeleteSim"
	SimManagerService_AddPackageForSim_FullMethodName       = "/ukama.subscriber.sim_manager.v1.SimManagerService/AddPackageForSim"
	SimManagerService_GetPackagesBySim_FullMethodName       = "/ukama.subscriber.sim_manager.v1.SimManagerService/GetPackagesBySim"
	SimManagerService_SetActivePackageForSim_FullMethodName = "/ukama.subscriber.sim_manager.v1.SimManagerService/SetActivePackageForSim"
	SimManagerService_RemovePackageForSim_FullMethodName    = "/ukama.subscriber.sim_manager.v1.SimManagerService/RemovePackageForSim"
)

// SimManagerServiceClient is the client API for SimManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimManagerServiceClient interface {
	// Sim
	AllocateSim(ctx context.Context, in *AllocateSimRequest, opts ...grpc.CallOption) (*AllocateSimResponse, error)
	GetSim(ctx context.Context, in *GetSimRequest, opts ...grpc.CallOption) (*GetSimResponse, error)
	ListSims(ctx context.Context, in *ListSimsRequest, opts ...grpc.CallOption) (*ListSimsResponse, error)
	GetSimsBySubscriber(ctx context.Context, in *GetSimsBySubscriberRequest, opts ...grpc.CallOption) (*GetSimsBySubscriberResponse, error)
	GetSimsByNetwork(ctx context.Context, in *GetSimsByNetworkRequest, opts ...grpc.CallOption) (*GetSimsByNetworkResponse, error)
	ToggleSimStatus(ctx context.Context, in *ToggleSimStatusRequest, opts ...grpc.CallOption) (*ToggleSimStatusResponse, error)
	DeleteSim(ctx context.Context, in *DeleteSimRequest, opts ...grpc.CallOption) (*DeleteSimResponse, error)
	// Sim pacakge
	AddPackageForSim(ctx context.Context, in *AddPackageRequest, opts ...grpc.CallOption) (*AddPackageResponse, error)
	GetPackagesBySim(ctx context.Context, in *GetPackagesBySimRequest, opts ...grpc.CallOption) (*GetPackagesBySimResponse, error)
	SetActivePackageForSim(ctx context.Context, in *SetActivePackageRequest, opts ...grpc.CallOption) (*SetActivePackageResponse, error)
	RemovePackageForSim(ctx context.Context, in *RemovePackageRequest, opts ...grpc.CallOption) (*RemovePackageResponse, error)
}

type simManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimManagerServiceClient(cc grpc.ClientConnInterface) SimManagerServiceClient {
	return &simManagerServiceClient{cc}
}

func (c *simManagerServiceClient) AllocateSim(ctx context.Context, in *AllocateSimRequest, opts ...grpc.CallOption) (*AllocateSimResponse, error) {
	out := new(AllocateSimResponse)
	err := c.cc.Invoke(ctx, SimManagerService_AllocateSim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) GetSim(ctx context.Context, in *GetSimRequest, opts ...grpc.CallOption) (*GetSimResponse, error) {
	out := new(GetSimResponse)
	err := c.cc.Invoke(ctx, SimManagerService_GetSim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) ListSims(ctx context.Context, in *ListSimsRequest, opts ...grpc.CallOption) (*ListSimsResponse, error) {
	out := new(ListSimsResponse)
	err := c.cc.Invoke(ctx, SimManagerService_ListSims_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) GetSimsBySubscriber(ctx context.Context, in *GetSimsBySubscriberRequest, opts ...grpc.CallOption) (*GetSimsBySubscriberResponse, error) {
	out := new(GetSimsBySubscriberResponse)
	err := c.cc.Invoke(ctx, SimManagerService_GetSimsBySubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) GetSimsByNetwork(ctx context.Context, in *GetSimsByNetworkRequest, opts ...grpc.CallOption) (*GetSimsByNetworkResponse, error) {
	out := new(GetSimsByNetworkResponse)
	err := c.cc.Invoke(ctx, SimManagerService_GetSimsByNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) ToggleSimStatus(ctx context.Context, in *ToggleSimStatusRequest, opts ...grpc.CallOption) (*ToggleSimStatusResponse, error) {
	out := new(ToggleSimStatusResponse)
	err := c.cc.Invoke(ctx, SimManagerService_ToggleSimStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) DeleteSim(ctx context.Context, in *DeleteSimRequest, opts ...grpc.CallOption) (*DeleteSimResponse, error) {
	out := new(DeleteSimResponse)
	err := c.cc.Invoke(ctx, SimManagerService_DeleteSim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) AddPackageForSim(ctx context.Context, in *AddPackageRequest, opts ...grpc.CallOption) (*AddPackageResponse, error) {
	out := new(AddPackageResponse)
	err := c.cc.Invoke(ctx, SimManagerService_AddPackageForSim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) GetPackagesBySim(ctx context.Context, in *GetPackagesBySimRequest, opts ...grpc.CallOption) (*GetPackagesBySimResponse, error) {
	out := new(GetPackagesBySimResponse)
	err := c.cc.Invoke(ctx, SimManagerService_GetPackagesBySim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) SetActivePackageForSim(ctx context.Context, in *SetActivePackageRequest, opts ...grpc.CallOption) (*SetActivePackageResponse, error) {
	out := new(SetActivePackageResponse)
	err := c.cc.Invoke(ctx, SimManagerService_SetActivePackageForSim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simManagerServiceClient) RemovePackageForSim(ctx context.Context, in *RemovePackageRequest, opts ...grpc.CallOption) (*RemovePackageResponse, error) {
	out := new(RemovePackageResponse)
	err := c.cc.Invoke(ctx, SimManagerService_RemovePackageForSim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimManagerServiceServer is the server API for SimManagerService service.
// All implementations must embed UnimplementedSimManagerServiceServer
// for forward compatibility
type SimManagerServiceServer interface {
	// Sim
	AllocateSim(context.Context, *AllocateSimRequest) (*AllocateSimResponse, error)
	GetSim(context.Context, *GetSimRequest) (*GetSimResponse, error)
	ListSims(context.Context, *ListSimsRequest) (*ListSimsResponse, error)
	GetSimsBySubscriber(context.Context, *GetSimsBySubscriberRequest) (*GetSimsBySubscriberResponse, error)
	GetSimsByNetwork(context.Context, *GetSimsByNetworkRequest) (*GetSimsByNetworkResponse, error)
	ToggleSimStatus(context.Context, *ToggleSimStatusRequest) (*ToggleSimStatusResponse, error)
	DeleteSim(context.Context, *DeleteSimRequest) (*DeleteSimResponse, error)
	// Sim pacakge
	AddPackageForSim(context.Context, *AddPackageRequest) (*AddPackageResponse, error)
	GetPackagesBySim(context.Context, *GetPackagesBySimRequest) (*GetPackagesBySimResponse, error)
	SetActivePackageForSim(context.Context, *SetActivePackageRequest) (*SetActivePackageResponse, error)
	RemovePackageForSim(context.Context, *RemovePackageRequest) (*RemovePackageResponse, error)
	mustEmbedUnimplementedSimManagerServiceServer()
}

// UnimplementedSimManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimManagerServiceServer struct {
}

func (UnimplementedSimManagerServiceServer) AllocateSim(context.Context, *AllocateSimRequest) (*AllocateSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSim not implemented")
}
func (UnimplementedSimManagerServiceServer) GetSim(context.Context, *GetSimRequest) (*GetSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSim not implemented")
}
func (UnimplementedSimManagerServiceServer) ListSims(context.Context, *ListSimsRequest) (*ListSimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSims not implemented")
}
func (UnimplementedSimManagerServiceServer) GetSimsBySubscriber(context.Context, *GetSimsBySubscriberRequest) (*GetSimsBySubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimsBySubscriber not implemented")
}
func (UnimplementedSimManagerServiceServer) GetSimsByNetwork(context.Context, *GetSimsByNetworkRequest) (*GetSimsByNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimsByNetwork not implemented")
}
func (UnimplementedSimManagerServiceServer) ToggleSimStatus(context.Context, *ToggleSimStatusRequest) (*ToggleSimStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSimStatus not implemented")
}
func (UnimplementedSimManagerServiceServer) DeleteSim(context.Context, *DeleteSimRequest) (*DeleteSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSim not implemented")
}
func (UnimplementedSimManagerServiceServer) AddPackageForSim(context.Context, *AddPackageRequest) (*AddPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPackageForSim not implemented")
}
func (UnimplementedSimManagerServiceServer) GetPackagesBySim(context.Context, *GetPackagesBySimRequest) (*GetPackagesBySimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackagesBySim not implemented")
}
func (UnimplementedSimManagerServiceServer) SetActivePackageForSim(context.Context, *SetActivePackageRequest) (*SetActivePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActivePackageForSim not implemented")
}
func (UnimplementedSimManagerServiceServer) RemovePackageForSim(context.Context, *RemovePackageRequest) (*RemovePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackageForSim not implemented")
}
func (UnimplementedSimManagerServiceServer) mustEmbedUnimplementedSimManagerServiceServer() {}

// UnsafeSimManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimManagerServiceServer will
// result in compilation errors.
type UnsafeSimManagerServiceServer interface {
	mustEmbedUnimplementedSimManagerServiceServer()
}

func RegisterSimManagerServiceServer(s grpc.ServiceRegistrar, srv SimManagerServiceServer) {
	s.RegisterService(&SimManagerService_ServiceDesc, srv)
}

func _SimManagerService_AllocateSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).AllocateSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_AllocateSim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).AllocateSim(ctx, req.(*AllocateSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_GetSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).GetSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_GetSim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).GetSim(ctx, req.(*GetSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_ListSims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).ListSims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_ListSims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).ListSims(ctx, req.(*ListSimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_GetSimsBySubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimsBySubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).GetSimsBySubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_GetSimsBySubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).GetSimsBySubscriber(ctx, req.(*GetSimsBySubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_GetSimsByNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimsByNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).GetSimsByNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_GetSimsByNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).GetSimsByNetwork(ctx, req.(*GetSimsByNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_ToggleSimStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSimStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).ToggleSimStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_ToggleSimStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).ToggleSimStatus(ctx, req.(*ToggleSimStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_DeleteSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).DeleteSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_DeleteSim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).DeleteSim(ctx, req.(*DeleteSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_AddPackageForSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).AddPackageForSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_AddPackageForSim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).AddPackageForSim(ctx, req.(*AddPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_GetPackagesBySim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackagesBySimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).GetPackagesBySim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_GetPackagesBySim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).GetPackagesBySim(ctx, req.(*GetPackagesBySimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_SetActivePackageForSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActivePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).SetActivePackageForSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_SetActivePackageForSim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).SetActivePackageForSim(ctx, req.(*SetActivePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimManagerService_RemovePackageForSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimManagerServiceServer).RemovePackageForSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimManagerService_RemovePackageForSim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimManagerServiceServer).RemovePackageForSim(ctx, req.(*RemovePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimManagerService_ServiceDesc is the grpc.ServiceDesc for SimManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.subscriber.sim_manager.v1.SimManagerService",
	HandlerType: (*SimManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateSim",
			Handler:    _SimManagerService_AllocateSim_Handler,
		},
		{
			MethodName: "GetSim",
			Handler:    _SimManagerService_GetSim_Handler,
		},
		{
			MethodName: "ListSims",
			Handler:    _SimManagerService_ListSims_Handler,
		},
		{
			MethodName: "GetSimsBySubscriber",
			Handler:    _SimManagerService_GetSimsBySubscriber_Handler,
		},
		{
			MethodName: "GetSimsByNetwork",
			Handler:    _SimManagerService_GetSimsByNetwork_Handler,
		},
		{
			MethodName: "ToggleSimStatus",
			Handler:    _SimManagerService_ToggleSimStatus_Handler,
		},
		{
			MethodName: "DeleteSim",
			Handler:    _SimManagerService_DeleteSim_Handler,
		},
		{
			MethodName: "AddPackageForSim",
			Handler:    _SimManagerService_AddPackageForSim_Handler,
		},
		{
			MethodName: "GetPackagesBySim",
			Handler:    _SimManagerService_GetPackagesBySim_Handler,
		},
		{
			MethodName: "SetActivePackageForSim",
			Handler:    _SimManagerService_SetActivePackageForSim_Handler,
		},
		{
			MethodName: "RemovePackageForSim",
			Handler:    _SimManagerService_RemovePackageForSim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sim_manager.proto",
}
