/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2023-present, Ukama Inc.
 */

syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/subscriber/sim-manager/pb/gen";

import "validator.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";


package ukama.subscriber.sim_manager.v1;

service SimManagerService {
    // Sim
    rpc AllocateSim(AllocateSimRequest) returns (AllocateSimResponse);
    rpc GetSim(GetSimRequest) returns (GetSimResponse);
    rpc ListSims(ListSimsRequest) returns (ListSimsResponse);
	// Deprecated: Use pkg.server.ListSims with subscriberId as filtering param instead.
    rpc GetSimsBySubscriber(GetSimsBySubscriberRequest) returns (GetSimsBySubscriberResponse);
	// Deprecated: Use pkg.server.ListSims with networkId as filtering param instead.
    rpc GetSimsByNetwork(GetSimsByNetworkRequest) returns (GetSimsByNetworkResponse);
    rpc ToggleSimStatus(ToggleSimStatusRequest) returns (ToggleSimStatusResponse);
    rpc TerminateSim(TerminateSimRequest) returns (TerminateSimResponse);

    // Sim pacakge
    rpc AddPackageForSim(AddPackageRequest) returns (AddPackageResponse);
    rpc ListPackagesForSim(ListPackagesForSimRequest) returns (ListPackagesForSimResponse);
	// Deprecated: Use pkg.server.ListPackagesForSim with simId as filtering param instead.
    rpc GetPackagesForSim(GetPackagesForSimRequest) returns (GetPackagesForSimResponse);
    rpc SetActivePackageForSim(SetActivePackageRequest) returns (SetActivePackageResponse);
    rpc TerminatePackageForSim(TerminatePackageRequest) returns (TerminatePackageResponse);
    rpc RemovePackageForSim(RemovePackageRequest) returns (RemovePackageResponse);

    // Usage
    rpc GetUsages(UsageRequest) returns (UsageResponse);
}



message AllocateSimRequest {
    string subscriberId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
    string simToken = 2;
    string packageId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "plan_id"];
    string networkId = 4 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
    string simType = 5;
    uint32 trafficPolicy = 6 [json_name = "traffic_policy"];
}

message AllocateSimResponse {
    Sim sim = 1;
}

message GetSimRequest {
    string simId = 1 [(validator.field) = {string_not_empty: true}, json_name = "sim_id"];
}

message GetSimResponse {
    Sim sim = 1;
}


message ListSimsRequest{
   string iccid = 1 [json_name = "iccid"];
   string imsi = 2 [json_name = "imsi"];
   string subscriberId = 3 [json_name = "subscriber_id"];
   string networkId = 4 [json_name = "network_id"];
   string simType = 5 [json_name = "sim_type"];
   string simStatus = 6 [json_name = "sim_status"];
   uint32 trafficPolicy = 7 [json_name = "traffic_policy"];
   bool isPhysical = 8 [json_name = "is_physical"];
   uint32 count = 9;
   bool sort = 10;
}

message ListSimsResponse {
    repeated Sim sims = 1;
}


message GetSimsBySubscriberRequest {
    string subscriberId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
}

message GetSimsBySubscriberResponse {
    string subscriberId = 1 [json_name = "subscriber_id"];
    repeated Sim sims = 2;
}


message GetSimsByNetworkRequest {
    string networkId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
}

message GetSimsByNetworkResponse {
    string networkId = 1 [json_name = "network_id"];
    repeated Sim sims = 2;
}


message ToggleSimStatusRequest {
    string simId = 1 [(validator.field) = {string_not_empty: true}, json_name = "sim_id"];
    string status = 2;
}

message ToggleSimStatusResponse{}


message TerminateSimRequest {
    string simId = 1 [(validator.field) = {string_not_empty: true}, json_name = "sim_id"];
}

message TerminateSimResponse{
}


message AddPackageRequest {
    string simId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "sim_id"];
    string packageId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "package_id"];
    string startDate = 3 [json_name = "start_date"];
}

message AddPackageResponse{
}


message ListPackagesForSimRequest{
   string simId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "sim_id"];
   string dataPlanId = 2 [json_name = "data_paln_id"];
   string fromStartDate = 3 [json_name = "from_start_date"];
   string toStartDate = 4 [json_name = "to_start_date"];
   string fromEndDate = 5 [json_name = "from_end_date"];
   string toEndDate = 6 [json_name = "to_end_date"];
   bool isActive = 7 [json_name = "is_active"];
   bool asExpired = 8 [json_name = "as_expired"];
   uint32 count = 9;
   bool sort = 10;
}

message ListPackagesForSimResponse {
    repeated Package packages = 1;
}


message GetPackagesForSimRequest {
    string simId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "sim_id"];
}

message GetPackagesForSimResponse {
    string simId = 1 [json_name = "sim_id"];
    repeated Package packages = 2;
}


message SetActivePackageRequest {
    string simId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "sim_id"];
    string packageId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "package_id"];
}

message SetActivePackageResponse{
}


message TerminatePackageRequest {
    string simId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "sim_id"];
    string packageId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "package_id"];
}

message TerminatePackageResponse{
}


message RemovePackageRequest {
    string simId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "sim_id"];
    string packageId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "package_id"];
}

message RemovePackageResponse{
}


message UsageRequest {
    string simId = 1 [json_name = "sim_id"];
    string sim_type = 2 [json_name = "sim_type"];
    string type = 3;
    string from = 4;
    string to = 5;
    string region = 6;
}


message UsageResponse {
    google.protobuf.Struct usage = 1;
    google.protobuf.Struct cost = 2;
}



message Package {
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "id"];
    string packageId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "package_id"];
    string startDate = 3 [json_name = "start_date"];
    string endDate = 4 [json_name = "end_date"];
    uint64 defaultDuration = 5 [json_name = "default_duration"];
    bool isActive = 6  [json_name = "is_active"];
    bool asExpired = 7  [json_name = "as_expired"];
    string createdAt = 8 [json_name = "created_at"];
    string updatedAt = 9 [json_name = "updated_at"];
}


message Sim {
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "id"];
    string subscriberId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
    string networkId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
    Package package = 5;
    string iccid = 6;
    string msisdn = 7  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"}];
    string imsi = 8;
    string type = 9;
    string status = 10;
    bool isPhysical = 11 [json_name = "is_physical"];
    uint32 trafficPolicy = 12 [json_name = "traffic_policy"];
    google.protobuf.Timestamp firstActivatedOn = 13;
    google.protobuf.Timestamp lastActivatedOn = 14 ;
    uint64 activationsCount = 15;
    uint64 deactivationsCount = 16;
    google.protobuf.Timestamp allocatedAt = 17 [json_name = "allocated_at"];
    string syncStatus = 18 [json_name = "sync_status"];
}
