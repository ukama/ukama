// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/subscriber/subscriber-registry/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// SubscriberRepo is an autogenerated mock type for the SubscriberRepo type
type SubscriberRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: subscriber
func (_m *SubscriberRepo) Add(subscriber *db.Subscriber) error {
	ret := _m.Called(subscriber)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Subscriber) error); ok {
		r0 = rf(subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: subscriberID
func (_m *SubscriberRepo) Delete(subscriberID uuid.UUID) error {
	ret := _m.Called(subscriberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(subscriberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: subscriberID
func (_m *SubscriberRepo) Get(subscriberID uuid.UUID) (*db.Subscriber, error) {
	ret := _m.Called(subscriberID)

	var r0 *db.Subscriber
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Subscriber); ok {
		r0 = rf(subscriberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(subscriberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNetwork provides a mock function with given fields: networkID
func (_m *SubscriberRepo) GetByNetwork(networkID uuid.UUID) ([]db.Subscriber, error) {
	ret := _m.Called(networkID)

	var r0 []db.Subscriber
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Subscriber); ok {
		r0 = rf(networkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscribers provides a mock function with given fields:
func (_m *SubscriberRepo) ListSubscribers() ([]db.Subscriber, error) {
	ret := _m.Called()

	var r0 []db.Subscriber
	if rf, ok := ret.Get(0).(func() []db.Subscriber); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: subscriberID, sub
func (_m *SubscriberRepo) Update(subscriberID uuid.UUID, sub db.Subscriber) (*db.Subscriber, error) {
	ret := _m.Called(subscriberID, sub)

	var r0 *db.Subscriber
	if rf, ok := ret.Get(0).(func(uuid.UUID, db.Subscriber) *db.Subscriber); ok {
		r0 = rf(subscriberID, sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, db.Subscriber) error); ok {
		r1 = rf(subscriberID, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSubscriberRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriberRepo creates a new instance of SubscriberRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriberRepo(t mockConstructorTestingTNewSubscriberRepo) *SubscriberRepo {
	mock := &SubscriberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
