// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: sim.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimType int32

const (
	SimType_ALL             SimType = 0
	SimType_INTER_NONE      SimType = 1
	SimType_INTER_MNO_DATA  SimType = 2
	SimType_INTER_MNO_ALL   SimType = 3
	SimType_INTER_UKAMA_ALL SimType = 4
)

// Enum value maps for SimType.
var (
	SimType_name = map[int32]string{
		0: "ALL",
		1: "INTER_NONE",
		2: "INTER_MNO_DATA",
		3: "INTER_MNO_ALL",
		4: "INTER_UKAMA_ALL",
	}
	SimType_value = map[string]int32{
		"ALL":             0,
		"INTER_NONE":      1,
		"INTER_MNO_DATA":  2,
		"INTER_MNO_ALL":   3,
		"INTER_UKAMA_ALL": 4,
	}
)

func (x SimType) Enum() *SimType {
	p := new(SimType)
	*p = x
	return p
}

func (x SimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimType) Descriptor() protoreflect.EnumDescriptor {
	return file_sim_proto_enumTypes[0].Descriptor()
}

func (SimType) Type() protoreflect.EnumType {
	return &file_sim_proto_enumTypes[0]
}

func (x SimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimType.Descriptor instead.
func (SimType) EnumDescriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{0}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPhysicalSim bool    `protobuf:"varint,1,opt,name=IsPhysicalSim,proto3" json:"IsPhysicalSim,omitempty"`                          /// True/False
	SimType       SimType `protobuf:"varint,2,opt,name=simType,proto3,enum=ukama.subscriber.sim.v1.SimType" json:"simType,omitempty"` /// SimType string enum
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetIsPhysicalSim() bool {
	if x != nil {
		return x.IsPhysicalSim
	}
	return false
}

func (x *GetRequest) GetSimType() SimType {
	if x != nil {
		return x.SimType
	}
	return SimType_ALL
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim *Sim `protobuf:"bytes,1,opt,name=sim,proto3" json:"sim,omitempty"` /// Sim object
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetSim() *Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type GetByIccidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid string `protobuf:"bytes,1,opt,name=iccid,proto3" json:"iccid,omitempty"` /// Sim iccid string
}

func (x *GetByIccidRequest) Reset() {
	*x = GetByIccidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIccidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIccidRequest) ProtoMessage() {}

func (x *GetByIccidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIccidRequest.ProtoReflect.Descriptor instead.
func (*GetByIccidRequest) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{2}
}

func (x *GetByIccidRequest) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

type GetByIccidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim *Sim `protobuf:"bytes,1,opt,name=sim,proto3" json:"sim,omitempty"` /// Sim object
}

func (x *GetByIccidResponse) Reset() {
	*x = GetByIccidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIccidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIccidResponse) ProtoMessage() {}

func (x *GetByIccidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIccidResponse.ProtoReflect.Descriptor instead.
func (*GetByIccidResponse) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{3}
}

func (x *GetByIccidResponse) GetSim() *Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimType SimType `protobuf:"varint,1,opt,name=simType,proto3,enum=ukama.subscriber.sim.v1.SimType" json:"simType,omitempty"` /// SimType string enum
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{4}
}

func (x *GetStatsRequest) GetSimType() SimType {
	if x != nil {
		return x.SimType
	}
	return SimType_ALL
}

type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`         /// Total sims in sim pool
	Available uint64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"` /// Available sims in sim pool
	Consumed  uint64 `protobuf:"varint,3,opt,name=consumed,proto3" json:"consumed,omitempty"`   /// Consumed sims in sim pool
	Failed    uint64 `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`       /// Failed sims in sim pool
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{5}
}

func (x *GetStatsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetStatsResponse) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *GetStatsResponse) GetConsumed() uint64 {
	if x != nil {
		return x.Consumed
	}
	return 0
}

func (x *GetStatsResponse) GetFailed() uint64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type AddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim []*AddSim `protobuf:"bytes,1,rep,name=sim,proto3" json:"sim,omitempty"` /// Slice of sims to add in sim pool
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{6}
}

func (x *AddRequest) GetSim() []*AddSim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type AddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim []*Sim `protobuf:"bytes,1,rep,name=sim,proto3" json:"sim,omitempty"` /// Slice of sims added in sim pool
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponse.ProtoReflect.Descriptor instead.
func (*AddResponse) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{7}
}

func (x *AddResponse) GetSim() []*Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"` /// Slice of sim id's to delete from sim pool
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRequest) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"` /// Slice of sim id's deleted from sim pool
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteResponse) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimData []byte  `protobuf:"bytes,1,opt,name=simData,proto3" json:"simData,omitempty"`                                       /// Bytes of CSV file content
	SimType SimType `protobuf:"varint,2,opt,name=simType,proto3,enum=ukama.subscriber.sim.v1.SimType" json:"simType,omitempty"` /// SimType of sim
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{10}
}

func (x *UploadRequest) GetSimData() []byte {
	if x != nil {
		return x.SimData
	}
	return nil
}

func (x *UploadRequest) GetSimType() SimType {
	if x != nil {
		return x.SimType
	}
	return SimType_ALL
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sim []*Sim `protobuf:"bytes,1,rep,name=sim,proto3" json:"sim,omitempty"` /// Slice of sims added in sim pool
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{11}
}

func (x *UploadResponse) GetSim() []*Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type Sim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iccid          string  `protobuf:"bytes,2,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Msisdn         string  `protobuf:"bytes,3,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	IsAllocated    bool    `protobuf:"varint,4,opt,name=isAllocated,proto3" json:"isAllocated,omitempty"`
	SimType        SimType `protobuf:"varint,5,opt,name=simType,proto3,enum=ukama.subscriber.sim.v1.SimType" json:"simType,omitempty"`
	SmDpAddress    string  `protobuf:"bytes,6,opt,name=smDpAddress,proto3" json:"smDpAddress,omitempty"`
	ActivationCode string  `protobuf:"bytes,7,opt,name=activationCode,proto3" json:"activationCode,omitempty"`
	CreatedAt      string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt      string  `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	UpdatedAt      string  `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsPhysical     bool    `protobuf:"varint,12,opt,name=isPhysical,json=is_physical,proto3" json:"isPhysical,omitempty"`
	QrCode         string  `protobuf:"bytes,13,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
}

func (x *Sim) Reset() {
	*x = Sim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sim) ProtoMessage() {}

func (x *Sim) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sim.ProtoReflect.Descriptor instead.
func (*Sim) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{12}
}

func (x *Sim) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sim) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Sim) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *Sim) GetIsAllocated() bool {
	if x != nil {
		return x.IsAllocated
	}
	return false
}

func (x *Sim) GetSimType() SimType {
	if x != nil {
		return x.SimType
	}
	return SimType_ALL
}

func (x *Sim) GetSmDpAddress() string {
	if x != nil {
		return x.SmDpAddress
	}
	return ""
}

func (x *Sim) GetActivationCode() string {
	if x != nil {
		return x.ActivationCode
	}
	return ""
}

func (x *Sim) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Sim) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Sim) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Sim) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

func (x *Sim) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

type AddSim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid          string  `protobuf:"bytes,1,opt,name=iccid,proto3" json:"iccid,omitempty"`
	SimType        SimType `protobuf:"varint,2,opt,name=simType,proto3,enum=ukama.subscriber.sim.v1.SimType" json:"simType,omitempty"`
	Msisdn         string  `protobuf:"bytes,3,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	SmDpAddress    string  `protobuf:"bytes,4,opt,name=smDpAddress,proto3" json:"smDpAddress,omitempty"`
	ActivationCode string  `protobuf:"bytes,5,opt,name=activationCode,proto3" json:"activationCode,omitempty"`
	QrCode         string  `protobuf:"bytes,6,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	IsPhysical     bool    `protobuf:"varint,7,opt,name=isPhysical,json=is_physical,proto3" json:"isPhysical,omitempty"`
}

func (x *AddSim) Reset() {
	*x = AddSim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSim) ProtoMessage() {}

func (x *AddSim) ProtoReflect() protoreflect.Message {
	mi := &file_sim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSim.ProtoReflect.Descriptor instead.
func (*AddSim) Descriptor() ([]byte, []int) {
	return file_sim_proto_rawDescGZIP(), []int{13}
}

func (x *AddSim) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *AddSim) GetSimType() SimType {
	if x != nil {
		return x.SimType
	}
	return SimType_ALL
}

func (x *AddSim) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *AddSim) GetSmDpAddress() string {
	if x != nil {
		return x.SmDpAddress
	}
	return ""
}

func (x *AddSim) GetActivationCode() string {
	if x != nil {
		return x.ActivationCode
	}
	return ""
}

func (x *AddSim) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *AddSim) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

var File_sim_proto protoreflect.FileDescriptor

var file_sim_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x69,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52,
	0x03, 0x73, 0x69, 0x6d, 0x22, 0x29, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x22,
	0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d,
	0x52, 0x03, 0x73, 0x69, 0x6d, 0x22, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x22, 0x3f, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69,
	0x6d, 0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d,
	0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03,
	0x73, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x22, 0xfb, 0x04, 0x0a,
	0x03, 0x53, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0xdf, 0x1f, 0x2b, 0x0a, 0x0b, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x31, 0x39, 0x7d, 0x24, 0x2a, 0x1c, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x43, 0x43, 0x49, 0x44, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0xde, 0x01, 0x0a, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01, 0xe2,
	0xdf, 0x1f, 0xc0, 0x01, 0x0a, 0x9e, 0x01, 0x5e, 0x24, 0x7c, 0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f,
	0x3a, 0x5c, 0x28, 0x3f, 0x28, 0x3f, 0x3a, 0x30, 0x30, 0x7c, 0x5c, 0x2b, 0x29, 0x28, 0x5b, 0x31,
	0x2d, 0x34, 0x5d, 0x5c, 0x64, 0x5c, 0x64, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x3f,
	0x29, 0x5c, 0x29, 0x3f, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c,
	0x2f, 0x5d, 0x3f, 0x29, 0x3f, 0x28, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x5c, 0x64, 0x7b, 0x31,
	0x2c, 0x7d, 0x5c, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f,
	0x5d, 0x3f, 0x29, 0x7b, 0x30, 0x2c, 0x7d, 0x29, 0x28, 0x3f, 0x3a, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e,
	0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x3f, 0x3a, 0x23, 0x7c, 0x65, 0x78, 0x74,
	0x5c, 0x2e, 0x3f, 0x7c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x7c, 0x78, 0x29,
	0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x5c, 0x64,
	0x2b, 0x29, 0x29, 0x3f, 0x24, 0x2a, 0x1d, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6d,
	0x44, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6d, 0x44, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x06, 0x41,
	0x64, 0x64, 0x53, 0x69, 0x6d, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0xdf, 0x1f, 0x2b, 0x0a, 0x0b, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x31, 0x39, 0x7d, 0x24, 0x2a, 0x1c, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x43, 0x43, 0x49, 0x44, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07,
	0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x06, 0x6d, 0x73, 0x69,
	0x73, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01, 0xe2, 0xdf, 0x1f, 0xc0,
	0x01, 0x0a, 0x9e, 0x01, 0x5e, 0x24, 0x7c, 0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5c, 0x28,
	0x3f, 0x28, 0x3f, 0x3a, 0x30, 0x30, 0x7c, 0x5c, 0x2b, 0x29, 0x28, 0x5b, 0x31, 0x2d, 0x34, 0x5d,
	0x5c, 0x64, 0x5c, 0x64, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x3f, 0x29, 0x5c, 0x29,
	0x3f, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f,
	0x29, 0x3f, 0x28, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x5c, 0x64, 0x7b, 0x31, 0x2c, 0x7d, 0x5c,
	0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29,
	0x7b, 0x30, 0x2c, 0x7d, 0x29, 0x28, 0x3f, 0x3a, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c,
	0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x3f, 0x3a, 0x23, 0x7c, 0x65, 0x78, 0x74, 0x5c, 0x2e, 0x3f,
	0x7c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x7c, 0x78, 0x29, 0x5b, 0x5c, 0x2d,
	0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x5c, 0x64, 0x2b, 0x29, 0x29,
	0x3f, 0x24, 0x2a, 0x1d, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6d, 0x44,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6d, 0x44, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69,
	0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2a, 0x5e, 0x0a, 0x07,
	0x53, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4e, 0x4f, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4e,
	0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x55, 0x4b, 0x41, 0x4d, 0x41, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x32, 0xba, 0x04, 0x0a,
	0x0a, 0x53, 0x69, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x23, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63, 0x69, 0x64, 0x12, 0x2a, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x23, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x06,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x62, 0x2f,
	0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sim_proto_rawDescOnce sync.Once
	file_sim_proto_rawDescData = file_sim_proto_rawDesc
)

func file_sim_proto_rawDescGZIP() []byte {
	file_sim_proto_rawDescOnce.Do(func() {
		file_sim_proto_rawDescData = protoimpl.X.CompressGZIP(file_sim_proto_rawDescData)
	})
	return file_sim_proto_rawDescData
}

var file_sim_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sim_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_sim_proto_goTypes = []interface{}{
	(SimType)(0),               // 0: ukama.subscriber.sim.v1.SimType
	(*GetRequest)(nil),         // 1: ukama.subscriber.sim.v1.GetRequest
	(*GetResponse)(nil),        // 2: ukama.subscriber.sim.v1.GetResponse
	(*GetByIccidRequest)(nil),  // 3: ukama.subscriber.sim.v1.GetByIccidRequest
	(*GetByIccidResponse)(nil), // 4: ukama.subscriber.sim.v1.GetByIccidResponse
	(*GetStatsRequest)(nil),    // 5: ukama.subscriber.sim.v1.GetStatsRequest
	(*GetStatsResponse)(nil),   // 6: ukama.subscriber.sim.v1.GetStatsResponse
	(*AddRequest)(nil),         // 7: ukama.subscriber.sim.v1.AddRequest
	(*AddResponse)(nil),        // 8: ukama.subscriber.sim.v1.AddResponse
	(*DeleteRequest)(nil),      // 9: ukama.subscriber.sim.v1.DeleteRequest
	(*DeleteResponse)(nil),     // 10: ukama.subscriber.sim.v1.DeleteResponse
	(*UploadRequest)(nil),      // 11: ukama.subscriber.sim.v1.UploadRequest
	(*UploadResponse)(nil),     // 12: ukama.subscriber.sim.v1.UploadResponse
	(*Sim)(nil),                // 13: ukama.subscriber.sim.v1.Sim
	(*AddSim)(nil),             // 14: ukama.subscriber.sim.v1.AddSim
}
var file_sim_proto_depIdxs = []int32{
	0,  // 0: ukama.subscriber.sim.v1.GetRequest.simType:type_name -> ukama.subscriber.sim.v1.SimType
	13, // 1: ukama.subscriber.sim.v1.GetResponse.sim:type_name -> ukama.subscriber.sim.v1.Sim
	13, // 2: ukama.subscriber.sim.v1.GetByIccidResponse.sim:type_name -> ukama.subscriber.sim.v1.Sim
	0,  // 3: ukama.subscriber.sim.v1.GetStatsRequest.simType:type_name -> ukama.subscriber.sim.v1.SimType
	14, // 4: ukama.subscriber.sim.v1.AddRequest.sim:type_name -> ukama.subscriber.sim.v1.AddSim
	13, // 5: ukama.subscriber.sim.v1.AddResponse.sim:type_name -> ukama.subscriber.sim.v1.Sim
	0,  // 6: ukama.subscriber.sim.v1.UploadRequest.simType:type_name -> ukama.subscriber.sim.v1.SimType
	13, // 7: ukama.subscriber.sim.v1.UploadResponse.sim:type_name -> ukama.subscriber.sim.v1.Sim
	0,  // 8: ukama.subscriber.sim.v1.Sim.simType:type_name -> ukama.subscriber.sim.v1.SimType
	0,  // 9: ukama.subscriber.sim.v1.AddSim.simType:type_name -> ukama.subscriber.sim.v1.SimType
	1,  // 10: ukama.subscriber.sim.v1.SimService.Get:input_type -> ukama.subscriber.sim.v1.GetRequest
	3,  // 11: ukama.subscriber.sim.v1.SimService.GetByIccid:input_type -> ukama.subscriber.sim.v1.GetByIccidRequest
	5,  // 12: ukama.subscriber.sim.v1.SimService.GetStats:input_type -> ukama.subscriber.sim.v1.GetStatsRequest
	7,  // 13: ukama.subscriber.sim.v1.SimService.Add:input_type -> ukama.subscriber.sim.v1.AddRequest
	9,  // 14: ukama.subscriber.sim.v1.SimService.Delete:input_type -> ukama.subscriber.sim.v1.DeleteRequest
	11, // 15: ukama.subscriber.sim.v1.SimService.Upload:input_type -> ukama.subscriber.sim.v1.UploadRequest
	2,  // 16: ukama.subscriber.sim.v1.SimService.Get:output_type -> ukama.subscriber.sim.v1.GetResponse
	4,  // 17: ukama.subscriber.sim.v1.SimService.GetByIccid:output_type -> ukama.subscriber.sim.v1.GetByIccidResponse
	6,  // 18: ukama.subscriber.sim.v1.SimService.GetStats:output_type -> ukama.subscriber.sim.v1.GetStatsResponse
	8,  // 19: ukama.subscriber.sim.v1.SimService.Add:output_type -> ukama.subscriber.sim.v1.AddResponse
	10, // 20: ukama.subscriber.sim.v1.SimService.Delete:output_type -> ukama.subscriber.sim.v1.DeleteResponse
	12, // 21: ukama.subscriber.sim.v1.SimService.Upload:output_type -> ukama.subscriber.sim.v1.UploadResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sim_proto_init() }
func file_sim_proto_init() {
	if File_sim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIccidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIccidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sim_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sim_proto_goTypes,
		DependencyIndexes: file_sim_proto_depIdxs,
		EnumInfos:         file_sim_proto_enumTypes,
		MessageInfos:      file_sim_proto_msgTypes,
	}.Build()
	File_sim_proto = out.File
	file_sim_proto_rawDesc = nil
	file_sim_proto_goTypes = nil
	file_sim_proto_depIdxs = nil
}
