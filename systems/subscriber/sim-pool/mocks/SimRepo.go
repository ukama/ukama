// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/subscriber/sim-pool/pkg/db"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// SimRepo is an autogenerated mock type for the SimRepo type
type SimRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: sims
func (_m *SimRepo) Add(sims []db.Sim) error {
	ret := _m.Called(sims)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]db.Sim) error); ok {
		r0 = rf(sims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *SimRepo) Delete(id []uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: isPhysicalSim, simType
func (_m *SimRepo) Get(isPhysicalSim bool, simType ukama.SimType) (*db.Sim, error) {
	ret := _m.Called(isPhysicalSim, simType)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Sim
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, ukama.SimType) (*db.Sim, error)); ok {
		return rf(isPhysicalSim, simType)
	}
	if rf, ok := ret.Get(0).(func(bool, ukama.SimType) *db.Sim); ok {
		r0 = rf(isPhysicalSim, simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Sim)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, ukama.SimType) error); ok {
		r1 = rf(isPhysicalSim, simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIccid provides a mock function with given fields: iccid
func (_m *SimRepo) GetByIccid(iccid string) (*db.Sim, error) {
	ret := _m.Called(iccid)

	if len(ret) == 0 {
		panic("no return value specified for GetByIccid")
	}

	var r0 *db.Sim
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Sim, error)); ok {
		return rf(iccid)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Sim); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Sim)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSims provides a mock function with given fields: simType
func (_m *SimRepo) GetSims(simType ukama.SimType) ([]db.Sim, error) {
	ret := _m.Called(simType)

	if len(ret) == 0 {
		panic("no return value specified for GetSims")
	}

	var r0 []db.Sim
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.SimType) ([]db.Sim, error)); ok {
		return rf(simType)
	}
	if rf, ok := ret.Get(0).(func(ukama.SimType) []db.Sim); ok {
		r0 = rf(simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Sim)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.SimType) error); ok {
		r1 = rf(simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsByType provides a mock function with given fields: simType
func (_m *SimRepo) GetSimsByType(simType ukama.SimType) ([]db.Sim, error) {
	ret := _m.Called(simType)

	if len(ret) == 0 {
		panic("no return value specified for GetSimsByType")
	}

	var r0 []db.Sim
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.SimType) ([]db.Sim, error)); ok {
		return rf(simType)
	}
	if rf, ok := ret.Get(0).(func(ukama.SimType) []db.Sim); ok {
		r0 = rf(simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Sim)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.SimType) error); ok {
		r1 = rf(simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: iccid, isAllocated, IsFailed
func (_m *SimRepo) UpdateStatus(iccid string, isAllocated bool, IsFailed bool) error {
	ret := _m.Called(iccid, isAllocated, IsFailed)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, bool) error); ok {
		r0 = rf(iccid, isAllocated, IsFailed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSimRepo creates a new instance of SimRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSimRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SimRepo {
	mock := &SimRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
