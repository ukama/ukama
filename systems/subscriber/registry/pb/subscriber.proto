syntax = "proto3";
option go_package = "pb/gen";

import "google/protobuf/timestamp.proto";
package ukama.subscriber.registry.v1;
import "validator.proto";

/*
Registry sub-system is responsible of:
    - Creating subscriber
    - Update subscriber
    - Get subscriber by network
    - Get single subscriber with Sims associated to them
*/
// Defines the service for subscriber registry operations
service RegistryService {
// Get method to retrieve a subscriber by subscriber ID
rpc Get (GetSubscriberRequest) returns (GetSubscriberResponse) {}
// Add method to add a new subscriber
rpc Add (AddSubscriberRequest) returns (AddSubscriberResponse){}
// Update method to update an existing subscriber
rpc Update(UpdateSubscriberRequest) returns (UpdateSubscriberResponse){}
// Delete method to delete a subscriber by subscriber ID
rpc Delete (DeleteSubscriberRequest) returns (DeleteSubscriberResponse){}
// GetByNetwork method to retrieve subscribers by network ID
rpc GetByNetwork(GetByNetworkRequest) returns(GetByNetworkResponse){}
// ListSubscribers method to retrieve a list of all subscribers
rpc ListSubscribers(ListSubscribersRequest) returns(ListSubscribersResponse){}
}

// ListSubscribersRequest message is used to list all subscribers
message ListSubscribersRequest{
}

// ListSubscribersResponse message is used to list all subscribers
message ListSubscribersResponse{
// Repeated field of Subscriber message
repeated Subscriber subscribers = 1;
}

// DeleteSubscriberRequest message is used to delete a subscriber
message DeleteSubscriberRequest{
// subscriberID field to be deleted
string subscriberID = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];


}

// GetByNetworkRequest message is used to get all subscribers by network id
message GetByNetworkRequest{
// networkID field is used to specify the network id for getting subscribers
string networkID = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];

}

// GetByNetworkResponse message is used to get all subscribers by network id
message GetByNetworkResponse{
// Repeated field of Subscriber message
repeated Subscriber subscribers = 1;
}

// DeleteSubscriberResponse message is used to delete a subscriber
message DeleteSubscriberResponse{
}

// GetSubscriberRequest message is used to get a subscriber by subscriber ID
message GetSubscriberRequest{
// subscriberID field is used to specify the subscriber id for getting
string subscriberID = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
}

// GetSubscriberResponse message is used to get a subscriber by subscriber ID
message GetSubscriberResponse{
// Subscriber field contains the subscriber information
Subscriber subscriber = 1;
}

message AddSubscriberRequest {
    // first name of the subscriber, must not be empty and have a length greater than 1
    string firstName = 1 [(validator.field) = { string_not_empty: true, length_gt: 1 }, json_name = "first_name"];
    // last name of the subscriber, must not be empty and have a length greater than 1
    string lastName = 2 [(validator.field) = { string_not_empty: true, length_gt: 1 }, json_name = "last_name"];
    // email of the subscriber, must be in email format
    string email = 3  [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$"}];
    // phone number of the subscriber, must be in phone number format
    string phoneNumber = 4  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"},
                            json_name = "phone_number"];
    // address of the subscriber
    string address = 5;
    // idSerial of the subscriber
    string idSerial =6;
    // network ID of the subscriber, must be a UUID and not empty
    string networkID = 7 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
    // proof of identification of the subscriber, must not be empty and have a length greater than 1
    string proofOfIdentification =8 [(validator.field) = { string_not_empty: true, length_gt: 1 }];
    // date of birth of the subscriber
    string dateOfBirth = 9;
    // gender of the subscriber, must not be empty and have a length greater than 1
    string gender =10 [(validator.field) = { string_not_empty: true, length_gt: 1 }];
    // org ID of the subscriber, must be a UUID and not empty
    string orgID = 11 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "org_id"];
    }
// UpdateSubscriberRequest defines the request to update a subscriber
message UpdateSubscriberRequest{
    // subscriberID is the ID of the subscriber to update
    string subscriberID = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
    // email is the new email address of the subscriber
    string email = 4  [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$"}];
    // phoneNumber is the new phone number of the subscriber
    string phoneNumber = 5  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"}];
    // address is the new address of the subscriber
    string address = 6;
    // idSerial is the new idSerial of the subscriber
    string idSerial =8;
    // proofOfIdentification is the new proofOfIdentification of the subscriber
    string proofOfIdentification =11;
    }
// UpdateSubscriberResponse defines the response when updating a subscriber
message UpdateSubscriberResponse{
    //Return nothing when subscriber has been updated 
}
message AddSubscriberResponse{
    Subscriber Subscriber = 1;

}
message Subscriber{
    string orgID = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "org_id"];
    string firstName  = 2 [json_name = "first_name"];
    string lastName = 3 [json_name = "last_name"];
    string subscriberID = 4 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
    string networkID = 5 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
    string email  = 6;
    string phoneNumber  = 7 [json_name = "phone_number"];
    string address  = 8; 
    string proofOfIdentification =9 [json_name = "proof_of_identification"];
    string createdAt = 10;
    string deletedAt = 11;
    string updatedAt = 12;
    repeated Sim sim = 13;
    string dateOfBirth = 14 [json_name = "date_of_birth"];
    string idSerial =15 [json_name = "id_serial"];
    string gender =16;

}
// Package message defines the structure for a package object
message Package {
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "id"];
    google.protobuf.Timestamp startDate = 2 [json_name = "start_date"];
    google.protobuf.Timestamp endDate = 3 [json_name = "end_date"];
}

message Sim {
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "id"];
    string subscriberID = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
    string networkID = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
    string orgID = 4 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "org_id"];
    Package package = 5;
    string iccid = 6;
    string msisdn = 7  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"}];
    string imsi = 8;
    string type = 9;
    string status = 10;
    bool isPhysical = 11 [json_name = "is_physical"];
    google.protobuf.Timestamp firstActivatedOn = 12;
    google.protobuf.Timestamp lastActivatedOn = 13 ;
    uint64 activationsCount = 14;
    uint64 deactivationsCount = 15;
    google.protobuf.Timestamp allocatedAt = 16 [json_name = "allocated_at"];
}
