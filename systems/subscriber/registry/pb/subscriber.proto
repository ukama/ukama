/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2023-present, Ukama Inc.
 */

syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/subscriber/registry/pb/gen";

import "validator.proto";
import "ukama/subscriber.proto";

package ukama.subscriber.registry.v1;

/*
Registry sub-system is responsible of:
    - Creating subscriber
    - Update subscriber
    - Get subscriber by network
    - Get single subscriber with Sims associated to them
*/
// Defines the service for subscriber registry operations
service RegistryService {
// Get method to retrieve a subscriber by subscriber ID
rpc Get (GetSubscriberRequest) returns (GetSubscriberResponse) {}
// Get method to retrieve a subscriber by subscriber email
rpc GetByEmail (GetSubscriberByEmailRequest) returns (GetSubscriberByEmailResponse) {}
// Add method to add a new subscriber
rpc Add (AddSubscriberRequest) returns (AddSubscriberResponse){}
// Update method to update an existing subscriber
rpc Update(UpdateSubscriberRequest) returns (UpdateSubscriberResponse){}
// Delete method to delete a subscriber by subscriber ID
rpc Delete (DeleteSubscriberRequest) returns (DeleteSubscriberResponse){}
// GetByNetwork method to retrieve subscribers by network ID
rpc GetByNetwork(GetByNetworkRequest) returns(GetByNetworkResponse){}
// ListSubscribers method to retrieve a list of all subscribers
rpc ListSubscribers(ListSubscribersRequest) returns(ListSubscribersResponse){}
}

// ListSubscribersRequest message is used to list all subscribers
message ListSubscribersRequest{
}

// ListSubscribersResponse message is used to list all subscribers
message ListSubscribersResponse{
// Repeated field of Subscriber message
repeated ukama.common.v1.Subscriber subscribers = 1;
}

// DeleteSubscriberRequest message is used to delete a subscriber
message DeleteSubscriberRequest{
// subscriberId field to be deleted
string subscriberId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];


}

// GetByNetworkRequest message is used to get all subscribers by network id
message GetByNetworkRequest{
// networkId field is used to specify the network id for getting subscribers
string networkId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];

}

// GetByNetworkResponse message is used to get all subscribers by network id
message GetByNetworkResponse{
// Repeated field of Subscriber message
repeated ukama.common.v1.Subscriber subscribers = 1;
}

// DeleteSubscriberResponse message is used to delete a subscriber
message DeleteSubscriberResponse{
}

// GetSubscriberRequest message is used to get a subscriber by subscriber ID
message GetSubscriberRequest{
// subscriberId field is used to specify the subscriber id for getting
string subscriberId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
}

// GetSubscriberResponse message is used to get a subscriber by subscriber ID
message GetSubscriberResponse{
// Subscriber field contains the subscriber information
ukama.common.v1.Subscriber subscriber = 1;
}

// GetSubscriberByEmailRequest message is used to get a subscriber by subscriber email
message GetSubscriberByEmailRequest{
// email field is used to get subscriber by email
string email = 1 [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$"}];
}

// GetSubscriberByEmailResponse message is used to get a subscriber by subscriber email
message GetSubscriberByEmailResponse{
// Subscriber field contains the subscriber information
ukama.common.v1.Subscriber subscriber = 1;
}

message AddSubscriberRequest {
    // name of the subscriber, must not be empty and have a length greater than 1
    string name = 1 [(validator.field) = { string_not_empty: true, length_gt: 1 }, json_name = "name"];
    // email of the subscriber, must be in email format
    string email = 2  [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$", string_not_empty: true,}];
    // phone number of the subscriber, must be in phone number format
    string phoneNumber = 3 [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"},
                            json_name = "phone_number"];
    // address of the subscriber
    string address = 4;
    // idSerial of the subscriber
    string idSerial =5;
    // network ID of the subscriber, if not provided, it will pick up the default network
    string networkId = 6;
    // proof of identification of the subscriber, must not be empty and have a length greater than 1
    string proofOfIdentification =7;
    // date of birth of the subscriber
    string dob = 8;
    // gender of the subscriber, must not be empty and have a length greater than 1
    string gender =9;
}

// UpdateSubscriberRequest defines the request to update a subscriber
message UpdateSubscriberRequest{
    // subscriberId is the ID of the subscriber to update
    string subscriberId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "subscriber_id"];
    // email is the new email address of the subscriber
    string email = 2  [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$"}];
    // phoneNumber is the new phone number of the subscriber
    string phoneNumber = 3  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"}];
    // address is the new address of the subscriber
    string address = 4;
    // idSerial is the new idSerial of the subscriber
    string idSerial =5;
    // proofOfIdentification is the new proofOfIdentification of the subscriber
    string proofOfIdentification =6;
    string name = 7 [(validator.field) = { string_not_empty: true, length_gt: 1 }, json_name = "name"];
    }
// UpdateSubscriberResponse defines the response when updating a subscriber
message UpdateSubscriberResponse{
    //Return nothing when subscriber has been updated 
}

message AddSubscriberResponse{
    ukama.common.v1.Subscriber Subscriber = 1;

}
// Package message defines the structure for a package object

