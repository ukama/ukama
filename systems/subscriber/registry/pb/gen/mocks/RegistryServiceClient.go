// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/subscriber/registry/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// RegistryServiceClient is an autogenerated mock type for the RegistryServiceClient type
type RegistryServiceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) Add(ctx context.Context, in *gen.AddSubscriberRequest, opts ...grpc.CallOption) (*gen.AddSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddSubscriberRequest, ...grpc.CallOption) *gen.AddSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) Delete(ctx context.Context, in *gen.DeleteSubscriberRequest, opts ...grpc.CallOption) (*gen.DeleteSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteSubscriberRequest, ...grpc.CallOption) *gen.DeleteSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) Get(ctx context.Context, in *gen.GetSubscriberRequest, opts ...grpc.CallOption) (*gen.GetSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSubscriberRequest, ...grpc.CallOption) *gen.GetSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNetwork provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) GetByNetwork(ctx context.Context, in *gen.GetByNetworkRequest, opts ...grpc.CallOption) (*gen.GetByNetworkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetByNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNetworkRequest, ...grpc.CallOption) *gen.GetByNetworkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByNetworkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscribers provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) ListSubscribers(ctx context.Context, in *gen.ListSubscribersRequest, opts ...grpc.CallOption) (*gen.ListSubscribersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ListSubscribersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListSubscribersRequest, ...grpc.CallOption) *gen.ListSubscribersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListSubscribersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListSubscribersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) Update(ctx context.Context, in *gen.UpdateSubscriberRequest, opts ...grpc.CallOption) (*gen.UpdateSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateSubscriberRequest, ...grpc.CallOption) *gen.UpdateSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegistryServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistryServiceClient creates a new instance of RegistryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistryServiceClient(t mockConstructorTestingTNewRegistryServiceClient) *RegistryServiceClient {
	mock := &RegistryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
