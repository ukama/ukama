// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: subscriber.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListSubscribersRequest message is used to list all subscribers
type ListSubscribersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSubscribersRequest) Reset() {
	*x = ListSubscribersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscribersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscribersRequest) ProtoMessage() {}

func (x *ListSubscribersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscribersRequest.ProtoReflect.Descriptor instead.
func (*ListSubscribersRequest) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{0}
}

// ListSubscribersResponse message is used to list all subscribers
type ListSubscribersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated field of Subscriber message
	Subscribers []*Subscriber `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ListSubscribersResponse) Reset() {
	*x = ListSubscribersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscribersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscribersResponse) ProtoMessage() {}

func (x *ListSubscribersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscribersResponse.ProtoReflect.Descriptor instead.
func (*ListSubscribersResponse) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{1}
}

func (x *ListSubscribersResponse) GetSubscribers() []*Subscriber {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// DeleteSubscriberRequest message is used to delete a subscriber
type DeleteSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subscriberId field to be deleted
	SubscriberId string `protobuf:"bytes,1,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
}

func (x *DeleteSubscriberRequest) Reset() {
	*x = DeleteSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriberRequest) ProtoMessage() {}

func (x *DeleteSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriberRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteSubscriberRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

// GetByNetworkRequest message is used to get all subscribers by network id
type GetByNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// networkId field is used to specify the network id for getting subscribers
	NetworkId string `protobuf:"bytes,1,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
}

func (x *GetByNetworkRequest) Reset() {
	*x = GetByNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByNetworkRequest) ProtoMessage() {}

func (x *GetByNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetByNetworkRequest) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{3}
}

func (x *GetByNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

// GetByNetworkResponse message is used to get all subscribers by network id
type GetByNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated field of Subscriber message
	Subscribers []*Subscriber `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *GetByNetworkResponse) Reset() {
	*x = GetByNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByNetworkResponse) ProtoMessage() {}

func (x *GetByNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetByNetworkResponse) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{4}
}

func (x *GetByNetworkResponse) GetSubscribers() []*Subscriber {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// DeleteSubscriberResponse message is used to delete a subscriber
type DeleteSubscriberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubscriberResponse) Reset() {
	*x = DeleteSubscriberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriberResponse) ProtoMessage() {}

func (x *DeleteSubscriberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriberResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriberResponse) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{5}
}

// GetSubscriberRequest message is used to get a subscriber by subscriber ID
type GetSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subscriberId field is used to specify the subscriber id for getting
	SubscriberId string `protobuf:"bytes,1,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
}

func (x *GetSubscriberRequest) Reset() {
	*x = GetSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriberRequest) ProtoMessage() {}

func (x *GetSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriberRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubscriberRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

// GetSubscriberResponse message is used to get a subscriber by subscriber ID
type GetSubscriberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber field contains the subscriber information
	Subscriber *Subscriber `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
}

func (x *GetSubscriberResponse) Reset() {
	*x = GetSubscriberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriberResponse) ProtoMessage() {}

func (x *GetSubscriberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriberResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriberResponse) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubscriberResponse) GetSubscriber() *Subscriber {
	if x != nil {
		return x.Subscriber
	}
	return nil
}

type AddSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// first name of the subscriber, must not be empty and have a length greater than 1
	FirstName string `protobuf:"bytes,1,opt,name=firstName,json=first_name,proto3" json:"firstName,omitempty"`
	// last name of the subscriber, must not be empty and have a length greater than 1
	LastName string `protobuf:"bytes,2,opt,name=lastName,json=last_name,proto3" json:"lastName,omitempty"`
	// email of the subscriber, must be in email format
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// phone number of the subscriber, must be in phone number format
	PhoneNumber string `protobuf:"bytes,4,opt,name=phoneNumber,json=phone_number,proto3" json:"phoneNumber,omitempty"`
	// address of the subscriber
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// idSerial of the subscriber
	IdSerial string `protobuf:"bytes,6,opt,name=idSerial,proto3" json:"idSerial,omitempty"`
	// network ID of the subscriber, must be a UUID and not empty
	NetworkId string `protobuf:"bytes,7,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
	// proof of identification of the subscriber, must not be empty and have a length greater than 1
	ProofOfIdentification string `protobuf:"bytes,8,opt,name=proofOfIdentification,proto3" json:"proofOfIdentification,omitempty"`
	// date of birth of the subscriber
	Dob string `protobuf:"bytes,9,opt,name=dob,proto3" json:"dob,omitempty"`
	// gender of the subscriber, must not be empty and have a length greater than 1
	Gender string `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	// org ID of the subscriber, must be a UUID and not empty
	OrgId string `protobuf:"bytes,11,opt,name=orgId,json=org_id,proto3" json:"orgId,omitempty"`
}

func (x *AddSubscriberRequest) Reset() {
	*x = AddSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubscriberRequest) ProtoMessage() {}

func (x *AddSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubscriberRequest.ProtoReflect.Descriptor instead.
func (*AddSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{8}
}

func (x *AddSubscriberRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AddSubscriberRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AddSubscriberRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddSubscriberRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AddSubscriberRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddSubscriberRequest) GetIdSerial() string {
	if x != nil {
		return x.IdSerial
	}
	return ""
}

func (x *AddSubscriberRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *AddSubscriberRequest) GetProofOfIdentification() string {
	if x != nil {
		return x.ProofOfIdentification
	}
	return ""
}

func (x *AddSubscriberRequest) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *AddSubscriberRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *AddSubscriberRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// UpdateSubscriberRequest defines the request to update a subscriber
type UpdateSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subscriberId is the ID of the subscriber to update
	SubscriberId string `protobuf:"bytes,1,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
	// email is the new email address of the subscriber
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// phoneNumber is the new phone number of the subscriber
	PhoneNumber string `protobuf:"bytes,5,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	// address is the new address of the subscriber
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// idSerial is the new idSerial of the subscriber
	IdSerial string `protobuf:"bytes,8,opt,name=idSerial,proto3" json:"idSerial,omitempty"`
	// proofOfIdentification is the new proofOfIdentification of the subscriber
	ProofOfIdentification string `protobuf:"bytes,11,opt,name=proofOfIdentification,proto3" json:"proofOfIdentification,omitempty"`
}

func (x *UpdateSubscriberRequest) Reset() {
	*x = UpdateSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriberRequest) ProtoMessage() {}

func (x *UpdateSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriberRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSubscriberRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *UpdateSubscriberRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateSubscriberRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateSubscriberRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateSubscriberRequest) GetIdSerial() string {
	if x != nil {
		return x.IdSerial
	}
	return ""
}

func (x *UpdateSubscriberRequest) GetProofOfIdentification() string {
	if x != nil {
		return x.ProofOfIdentification
	}
	return ""
}

// UpdateSubscriberResponse defines the response when updating a subscriber
type UpdateSubscriberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSubscriberResponse) Reset() {
	*x = UpdateSubscriberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriberResponse) ProtoMessage() {}

func (x *UpdateSubscriberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriberResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubscriberResponse) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{10}
}

type AddSubscriberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriber *Subscriber `protobuf:"bytes,1,opt,name=Subscriber,proto3" json:"Subscriber,omitempty"`
}

func (x *AddSubscriberResponse) Reset() {
	*x = AddSubscriberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubscriberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubscriberResponse) ProtoMessage() {}

func (x *AddSubscriberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubscriberResponse.ProtoReflect.Descriptor instead.
func (*AddSubscriberResponse) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{11}
}

func (x *AddSubscriberResponse) GetSubscriber() *Subscriber {
	if x != nil {
		return x.Subscriber
	}
	return nil
}

type Subscriber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 string `protobuf:"bytes,1,opt,name=orgId,json=org_id,proto3" json:"orgId,omitempty"`
	FirstName             string `protobuf:"bytes,2,opt,name=firstName,json=first_name,proto3" json:"firstName,omitempty"`
	LastName              string `protobuf:"bytes,3,opt,name=lastName,json=last_name,proto3" json:"lastName,omitempty"`
	SubscriberId          string `protobuf:"bytes,4,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
	NetworkId             string `protobuf:"bytes,5,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
	Email                 string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber           string `protobuf:"bytes,7,opt,name=phoneNumber,json=phone_number,proto3" json:"phoneNumber,omitempty"`
	Address               string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	ProofOfIdentification string `protobuf:"bytes,9,opt,name=proofOfIdentification,json=proof_of_identification,proto3" json:"proofOfIdentification,omitempty"`
	CreatedAt             string `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DeletedAt             string `protobuf:"bytes,11,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	UpdatedAt             string `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Sim                   []*Sim `protobuf:"bytes,13,rep,name=sim,proto3" json:"sim,omitempty"`
	Dob                   string `protobuf:"bytes,14,opt,name=dob,json=date_of_birth,proto3" json:"dob,omitempty"`
	IdSerial              string `protobuf:"bytes,15,opt,name=idSerial,json=id_serial,proto3" json:"idSerial,omitempty"`
	Gender                string `protobuf:"bytes,16,opt,name=gender,proto3" json:"gender,omitempty"`
}

func (x *Subscriber) Reset() {
	*x = Subscriber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscriber) ProtoMessage() {}

func (x *Subscriber) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscriber.ProtoReflect.Descriptor instead.
func (*Subscriber) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{12}
}

func (x *Subscriber) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Subscriber) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Subscriber) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Subscriber) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *Subscriber) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Subscriber) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Subscriber) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Subscriber) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Subscriber) GetProofOfIdentification() string {
	if x != nil {
		return x.ProofOfIdentification
	}
	return ""
}

func (x *Subscriber) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Subscriber) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Subscriber) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Subscriber) GetSim() []*Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

func (x *Subscriber) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *Subscriber) GetIdSerial() string {
	if x != nil {
		return x.IdSerial
	}
	return ""
}

func (x *Subscriber) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

// Package message defines the structure for a package object
type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,json=start_date,proto3" json:"startDate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,json=end_date,proto3" json:"endDate,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{13}
}

func (x *Package) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Package) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Package) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type Sim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriberId       string                 `protobuf:"bytes,2,opt,name=subscriberId,json=subscriber_id,proto3" json:"subscriberId,omitempty"`
	NetworkId          string                 `protobuf:"bytes,3,opt,name=networkId,json=network_id,proto3" json:"networkId,omitempty"`
	OrgId              string                 `protobuf:"bytes,4,opt,name=orgId,json=org_id,proto3" json:"orgId,omitempty"`
	Package            *Package               `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	Iccid              string                 `protobuf:"bytes,6,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Msisdn             string                 `protobuf:"bytes,7,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Imsi               string                 `protobuf:"bytes,8,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Type               string                 `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	IsPhysical         bool                   `protobuf:"varint,11,opt,name=isPhysical,json=is_physical,proto3" json:"isPhysical,omitempty"`
	FirstActivatedOn   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=firstActivatedOn,proto3" json:"firstActivatedOn,omitempty"`
	LastActivatedOn    *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=lastActivatedOn,proto3" json:"lastActivatedOn,omitempty"`
	ActivationsCount   uint64                 `protobuf:"varint,14,opt,name=activationsCount,proto3" json:"activationsCount,omitempty"`
	DeactivationsCount uint64                 `protobuf:"varint,15,opt,name=deactivationsCount,proto3" json:"deactivationsCount,omitempty"`
	AllocatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=allocatedAt,json=allocated_at,proto3" json:"allocatedAt,omitempty"`
}

func (x *Sim) Reset() {
	*x = Sim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriber_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sim) ProtoMessage() {}

func (x *Sim) ProtoReflect() protoreflect.Message {
	mi := &file_subscriber_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sim.ProtoReflect.Descriptor instead.
func (*Sim) Descriptor() ([]byte, []int) {
	return file_subscriber_proto_rawDescGZIP(), []int{14}
}

func (x *Sim) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sim) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *Sim) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Sim) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Sim) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Sim) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Sim) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *Sim) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *Sim) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Sim) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Sim) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

func (x *Sim) GetFirstActivatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstActivatedOn
	}
	return nil
}

func (x *Sim) GetLastActivatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivatedOn
	}
	return nil
}

func (x *Sim) GetActivationsCount() uint64 {
	if x != nil {
		return x.ActivationsCount
	}
	return 0
}

func (x *Sim) GetDeactivationsCount() uint64 {
	if x != nil {
		return x.DeactivationsCount
	}
	return 0
}

func (x *Sim) GetAllocatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AllocatedAt
	}
	return nil
}

var File_subscriber_proto protoreflect.FileDescriptor

var file_subscriber_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x3f,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01,
	0x90, 0x01, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x22,
	0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x22, 0xac, 0x05, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x58, 0x01, 0x70, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x58, 0x01, 0x70, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xe2, 0xdf, 0x1f, 0x48, 0x0a, 0x2d, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x25, 0x2b, 0x5c, 0x2d, 0x5d, 0x2b, 0x40, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x5c, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x7b, 0x32, 0x2c, 0x34, 0x7d, 0x24, 0x2a, 0x17, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xe9, 0x01, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01,
	0xe2, 0xdf, 0x1f, 0xc0, 0x01, 0x0a, 0x9e, 0x01, 0x5e, 0x24, 0x7c, 0x5e, 0x28, 0x3f, 0x3a, 0x28,
	0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x28, 0x3f, 0x3a, 0x30, 0x30, 0x7c, 0x5c, 0x2b, 0x29, 0x28, 0x5b,
	0x31, 0x2d, 0x34, 0x5d, 0x5c, 0x64, 0x5c, 0x64, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64,
	0x3f, 0x29, 0x5c, 0x29, 0x3f, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c,
	0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x3f, 0x28, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x5c, 0x64, 0x7b,
	0x31, 0x2c, 0x7d, 0x5c, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c,
	0x2f, 0x5d, 0x3f, 0x29, 0x7b, 0x30, 0x2c, 0x7d, 0x29, 0x28, 0x3f, 0x3a, 0x5b, 0x5c, 0x2d, 0x5c,
	0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x3f, 0x3a, 0x23, 0x7c, 0x65, 0x78,
	0x74, 0x5c, 0x2e, 0x3f, 0x7c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x7c, 0x78,
	0x29, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x5c,
	0x64, 0x2b, 0x29, 0x29, 0x3f, 0x24, 0x2a, 0x1d, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x58, 0x01, 0x70, 0x01, 0x52, 0x15, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x6f, 0x62, 0x12, 0x20, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x58, 0x01, 0x70, 0x01, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01,
	0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xe2, 0xdf, 0x1f, 0x48, 0x0a, 0x2d, 0x5e, 0x24, 0x7c, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x25, 0x2b, 0x5c, 0x2d, 0x5d, 0x2b, 0x40,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x5c, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x2c, 0x34, 0x7d, 0x24, 0x2a, 0x17, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xe8, 0x01, 0x0a, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xc5, 0x01, 0xe2, 0xdf, 0x1f, 0xc0, 0x01, 0x0a, 0x9e, 0x01, 0x5e, 0x24, 0x7c, 0x5e, 0x28, 0x3f,
	0x3a, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x28, 0x3f, 0x3a, 0x30, 0x30, 0x7c, 0x5c, 0x2b, 0x29,
	0x28, 0x5b, 0x31, 0x2d, 0x34, 0x5d, 0x5c, 0x64, 0x5c, 0x64, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d,
	0x5c, 0x64, 0x3f, 0x29, 0x5c, 0x29, 0x3f, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20,
	0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x3f, 0x28, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x5c,
	0x64, 0x7b, 0x31, 0x2c, 0x7d, 0x5c, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c,
	0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x7b, 0x30, 0x2c, 0x7d, 0x29, 0x28, 0x3f, 0x3a, 0x5b, 0x5c,
	0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x3f, 0x3a, 0x23, 0x7c,
	0x65, 0x78, 0x74, 0x5c, 0x2e, 0x3f, 0x7c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x7c, 0x78, 0x29, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f,
	0x28, 0x5c, 0x64, 0x2b, 0x29, 0x29, 0x3f, 0x24, 0x2a, 0x1d, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x4f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x22,
	0xaf, 0x04, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x4f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x73,
	0x69, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d,
	0x12, 0x1a, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x08,
	0x69, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58,
	0x01, 0x90, 0x01, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xde, 0x06, 0x0a, 0x03, 0x53,
	0x69, 0x6d, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01,
	0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63,
	0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64,
	0x12, 0xde, 0x01, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xc5, 0x01, 0xe2, 0xdf, 0x1f, 0xc0, 0x01, 0x0a, 0x9e, 0x01, 0x5e, 0x24, 0x7c, 0x5e,
	0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x28, 0x3f, 0x3a, 0x30, 0x30, 0x7c, 0x5c,
	0x2b, 0x29, 0x28, 0x5b, 0x31, 0x2d, 0x34, 0x5d, 0x5c, 0x64, 0x5c, 0x64, 0x7c, 0x5b, 0x31, 0x2d,
	0x39, 0x5d, 0x5c, 0x64, 0x3f, 0x29, 0x5c, 0x29, 0x3f, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e,
	0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x3f, 0x28, 0x28, 0x3f, 0x3a, 0x5c, 0x28,
	0x3f, 0x5c, 0x64, 0x7b, 0x31, 0x2c, 0x7d, 0x5c, 0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c,
	0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x7b, 0x30, 0x2c, 0x7d, 0x29, 0x28, 0x3f, 0x3a,
	0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x3f, 0x3a,
	0x23, 0x7c, 0x65, 0x78, 0x74, 0x5c, 0x2e, 0x3f, 0x7c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x7c, 0x78, 0x29, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f,
	0x5d, 0x3f, 0x28, 0x5c, 0x64, 0x2b, 0x29, 0x29, 0x3f, 0x24, 0x2a, 0x1d, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0xe7, 0x05, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x70, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x32, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x31, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x62, 0x2f, 0x67,
	0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscriber_proto_rawDescOnce sync.Once
	file_subscriber_proto_rawDescData = file_subscriber_proto_rawDesc
)

func file_subscriber_proto_rawDescGZIP() []byte {
	file_subscriber_proto_rawDescOnce.Do(func() {
		file_subscriber_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscriber_proto_rawDescData)
	})
	return file_subscriber_proto_rawDescData
}

var file_subscriber_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_subscriber_proto_goTypes = []interface{}{
	(*ListSubscribersRequest)(nil),   // 0: ukama.subscriber.registry.v1.ListSubscribersRequest
	(*ListSubscribersResponse)(nil),  // 1: ukama.subscriber.registry.v1.ListSubscribersResponse
	(*DeleteSubscriberRequest)(nil),  // 2: ukama.subscriber.registry.v1.DeleteSubscriberRequest
	(*GetByNetworkRequest)(nil),      // 3: ukama.subscriber.registry.v1.GetByNetworkRequest
	(*GetByNetworkResponse)(nil),     // 4: ukama.subscriber.registry.v1.GetByNetworkResponse
	(*DeleteSubscriberResponse)(nil), // 5: ukama.subscriber.registry.v1.DeleteSubscriberResponse
	(*GetSubscriberRequest)(nil),     // 6: ukama.subscriber.registry.v1.GetSubscriberRequest
	(*GetSubscriberResponse)(nil),    // 7: ukama.subscriber.registry.v1.GetSubscriberResponse
	(*AddSubscriberRequest)(nil),     // 8: ukama.subscriber.registry.v1.AddSubscriberRequest
	(*UpdateSubscriberRequest)(nil),  // 9: ukama.subscriber.registry.v1.UpdateSubscriberRequest
	(*UpdateSubscriberResponse)(nil), // 10: ukama.subscriber.registry.v1.UpdateSubscriberResponse
	(*AddSubscriberResponse)(nil),    // 11: ukama.subscriber.registry.v1.AddSubscriberResponse
	(*Subscriber)(nil),               // 12: ukama.subscriber.registry.v1.Subscriber
	(*Package)(nil),                  // 13: ukama.subscriber.registry.v1.Package
	(*Sim)(nil),                      // 14: ukama.subscriber.registry.v1.Sim
	(*timestamppb.Timestamp)(nil),    // 15: google.protobuf.Timestamp
}
var file_subscriber_proto_depIdxs = []int32{
	12, // 0: ukama.subscriber.registry.v1.ListSubscribersResponse.subscribers:type_name -> ukama.subscriber.registry.v1.Subscriber
	12, // 1: ukama.subscriber.registry.v1.GetByNetworkResponse.subscribers:type_name -> ukama.subscriber.registry.v1.Subscriber
	12, // 2: ukama.subscriber.registry.v1.GetSubscriberResponse.subscriber:type_name -> ukama.subscriber.registry.v1.Subscriber
	12, // 3: ukama.subscriber.registry.v1.AddSubscriberResponse.Subscriber:type_name -> ukama.subscriber.registry.v1.Subscriber
	14, // 4: ukama.subscriber.registry.v1.Subscriber.sim:type_name -> ukama.subscriber.registry.v1.Sim
	15, // 5: ukama.subscriber.registry.v1.Package.startDate:type_name -> google.protobuf.Timestamp
	15, // 6: ukama.subscriber.registry.v1.Package.endDate:type_name -> google.protobuf.Timestamp
	13, // 7: ukama.subscriber.registry.v1.Sim.package:type_name -> ukama.subscriber.registry.v1.Package
	15, // 8: ukama.subscriber.registry.v1.Sim.firstActivatedOn:type_name -> google.protobuf.Timestamp
	15, // 9: ukama.subscriber.registry.v1.Sim.lastActivatedOn:type_name -> google.protobuf.Timestamp
	15, // 10: ukama.subscriber.registry.v1.Sim.allocatedAt:type_name -> google.protobuf.Timestamp
	6,  // 11: ukama.subscriber.registry.v1.RegistryService.Get:input_type -> ukama.subscriber.registry.v1.GetSubscriberRequest
	8,  // 12: ukama.subscriber.registry.v1.RegistryService.Add:input_type -> ukama.subscriber.registry.v1.AddSubscriberRequest
	9,  // 13: ukama.subscriber.registry.v1.RegistryService.Update:input_type -> ukama.subscriber.registry.v1.UpdateSubscriberRequest
	2,  // 14: ukama.subscriber.registry.v1.RegistryService.Delete:input_type -> ukama.subscriber.registry.v1.DeleteSubscriberRequest
	3,  // 15: ukama.subscriber.registry.v1.RegistryService.GetByNetwork:input_type -> ukama.subscriber.registry.v1.GetByNetworkRequest
	0,  // 16: ukama.subscriber.registry.v1.RegistryService.ListSubscribers:input_type -> ukama.subscriber.registry.v1.ListSubscribersRequest
	7,  // 17: ukama.subscriber.registry.v1.RegistryService.Get:output_type -> ukama.subscriber.registry.v1.GetSubscriberResponse
	11, // 18: ukama.subscriber.registry.v1.RegistryService.Add:output_type -> ukama.subscriber.registry.v1.AddSubscriberResponse
	10, // 19: ukama.subscriber.registry.v1.RegistryService.Update:output_type -> ukama.subscriber.registry.v1.UpdateSubscriberResponse
	5,  // 20: ukama.subscriber.registry.v1.RegistryService.Delete:output_type -> ukama.subscriber.registry.v1.DeleteSubscriberResponse
	4,  // 21: ukama.subscriber.registry.v1.RegistryService.GetByNetwork:output_type -> ukama.subscriber.registry.v1.GetByNetworkResponse
	1,  // 22: ukama.subscriber.registry.v1.RegistryService.ListSubscribers:output_type -> ukama.subscriber.registry.v1.ListSubscribersResponse
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_subscriber_proto_init() }
func file_subscriber_proto_init() {
	if File_subscriber_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subscriber_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscribersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscribersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubscriberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscriber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriber_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscriber_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscriber_proto_goTypes,
		DependencyIndexes: file_subscriber_proto_depIdxs,
		MessageInfos:      file_subscriber_proto_msgTypes,
	}.Build()
	File_subscriber_proto = out.File
	file_subscriber_proto_rawDesc = nil
	file_subscriber_proto_goTypes = nil
	file_subscriber_proto_depIdxs = nil
}
