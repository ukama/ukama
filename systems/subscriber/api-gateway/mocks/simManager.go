// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/sim-manager/pb/gen"
)

// simManager is an autogenerated mock type for the simManager type
type simManager struct {
	mock.Mock
}

// AddPackageToSim provides a mock function with given fields: req
func (_m *simManager) AddPackageToSim(req *gen.AddPackageRequest) (*gen.AddPackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.AddPackageResponse
	if rf, ok := ret.Get(0).(func(*gen.AddPackageRequest) *gen.AddPackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.AddPackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateSim provides a mock function with given fields: req
func (_m *simManager) AllocateSim(req *gen.AllocateSimRequest) (*gen.AllocateSimResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.AllocateSimResponse
	if rf, ok := ret.Get(0).(func(*gen.AllocateSimRequest) *gen.AllocateSimResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AllocateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.AllocateSimRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSim provides a mock function with given fields: simId
func (_m *simManager) DeleteSim(simId string) (*gen.DeleteSimResponse, error) {
	ret := _m.Called(simId)

	var r0 *gen.DeleteSimResponse
	if rf, ok := ret.Get(0).(func(string) *gen.DeleteSimResponse); ok {
		r0 = rf(simId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(simId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackagesForSim provides a mock function with given fields: simId
func (_m *simManager) GetPackagesForSim(simId string) (*gen.GetPackagesBySimResponse, error) {
	ret := _m.Called(simId)

	var r0 *gen.GetPackagesBySimResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetPackagesBySimResponse); ok {
		r0 = rf(simId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackagesBySimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(simId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: simId
func (_m *simManager) GetSim(simId string) (*gen.GetSimResponse, error) {
	ret := _m.Called(simId)

	var r0 *gen.GetSimResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetSimResponse); ok {
		r0 = rf(simId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(simId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsByNetwork provides a mock function with given fields: networkId
func (_m *simManager) GetSimsByNetwork(networkId string) (*gen.GetSimsByNetworkResponse, error) {
	ret := _m.Called(networkId)

	var r0 *gen.GetSimsByNetworkResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetSimsByNetworkResponse); ok {
		r0 = rf(networkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsByNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsBySub provides a mock function with given fields: subscriberId
func (_m *simManager) GetSimsBySub(subscriberId string) (*gen.GetSimsBySubscriberResponse, error) {
	ret := _m.Called(subscriberId)

	var r0 *gen.GetSimsBySubscriberResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetSimsBySubscriberResponse); ok {
		r0 = rf(subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsBySubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePackageForSim provides a mock function with given fields: req
func (_m *simManager) RemovePackageForSim(req *gen.RemovePackageRequest) (*gen.RemovePackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.RemovePackageResponse
	if rf, ok := ret.Get(0).(func(*gen.RemovePackageRequest) *gen.RemovePackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemovePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.RemovePackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActivePackageForSim provides a mock function with given fields: req
func (_m *simManager) SetActivePackageForSim(req *gen.SetActivePackageRequest) (*gen.SetActivePackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.SetActivePackageResponse
	if rf, ok := ret.Get(0).(func(*gen.SetActivePackageRequest) *gen.SetActivePackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetActivePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.SetActivePackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleSimStatus provides a mock function with given fields: simId, status
func (_m *simManager) ToggleSimStatus(simId string, status string) (*gen.ToggleSimStatusResponse, error) {
	ret := _m.Called(simId, status)

	var r0 *gen.ToggleSimStatusResponse
	if rf, ok := ret.Get(0).(func(string, string) *gen.ToggleSimStatusResponse); ok {
		r0 = rf(simId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ToggleSimStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(simId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewSimManager interface {
	mock.TestingT
	Cleanup(func())
}

// newSimManager creates a new instance of simManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newSimManager(t mockConstructorTestingTnewSimManager) *simManager {
	mock := &simManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
