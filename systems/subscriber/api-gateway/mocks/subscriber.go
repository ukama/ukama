// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/registry/pb/gen"
)

// subscriber is an autogenerated mock type for the subscriber type
type subscriber struct {
	mock.Mock
}

// AddSubscriber provides a mock function with given fields: req
func (_m *subscriber) AddSubscriber(req *gen.AddSubscriberRequest) (*gen.AddSubscriberResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddSubscriber")
	}

	var r0 *gen.AddSubscriberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.AddSubscriberRequest) (*gen.AddSubscriberResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.AddSubscriberRequest) *gen.AddSubscriberResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSubscriberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.AddSubscriberRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriber provides a mock function with given fields: sid
func (_m *subscriber) DeleteSubscriber(sid string) (*gen.DeleteSubscriberResponse, error) {
	ret := _m.Called(sid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriber")
	}

	var r0 *gen.DeleteSubscriberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.DeleteSubscriberResponse, error)); ok {
		return rf(sid)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.DeleteSubscriberResponse); ok {
		r0 = rf(sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSubscriberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNetwork provides a mock function with given fields: networkId
func (_m *subscriber) GetByNetwork(networkId string) (*gen.GetByNetworkResponse, error) {
	ret := _m.Called(networkId)

	if len(ret) == 0 {
		panic("no return value specified for GetByNetwork")
	}

	var r0 *gen.GetByNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByNetworkResponse, error)); ok {
		return rf(networkId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByNetworkResponse); ok {
		r0 = rf(networkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriber provides a mock function with given fields: sid
func (_m *subscriber) GetSubscriber(sid string) (*gen.GetSubscriberResponse, error) {
	ret := _m.Called(sid)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriber")
	}

	var r0 *gen.GetSubscriberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetSubscriberResponse, error)); ok {
		return rf(sid)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetSubscriberResponse); ok {
		r0 = rf(sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSubscriberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriberByEmail provides a mock function with given fields: sEmail
func (_m *subscriber) GetSubscriberByEmail(sEmail string) (*gen.GetSubscriberByEmailResponse, error) {
	ret := _m.Called(sEmail)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriberByEmail")
	}

	var r0 *gen.GetSubscriberByEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetSubscriberByEmailResponse, error)); ok {
		return rf(sEmail)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetSubscriberByEmailResponse); ok {
		r0 = rf(sEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSubscriberByEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriber provides a mock function with given fields: subscriber
func (_m *subscriber) UpdateSubscriber(subscriber *gen.UpdateSubscriberRequest) (*gen.UpdateSubscriberResponse, error) {
	ret := _m.Called(subscriber)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriber")
	}

	var r0 *gen.UpdateSubscriberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.UpdateSubscriberRequest) (*gen.UpdateSubscriberResponse, error)); ok {
		return rf(subscriber)
	}
	if rf, ok := ret.Get(0).(func(*gen.UpdateSubscriberRequest) *gen.UpdateSubscriberResponse); ok {
		r0 = rf(subscriber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateSubscriberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.UpdateSubscriberRequest) error); ok {
		r1 = rf(subscriber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newSubscriber creates a new instance of subscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *subscriber {
	mock := &subscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
