// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: gitClient.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitClientServiceClient is the client API for GitClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitClientServiceClient interface {
	FetchComponents(ctx context.Context, in *FetchComponentsRequest, opts ...grpc.CallOption) (*FetchComponentsResponse, error)
}

type gitClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitClientServiceClient(cc grpc.ClientConnInterface) GitClientServiceClient {
	return &gitClientServiceClient{cc}
}

func (c *gitClientServiceClient) FetchComponents(ctx context.Context, in *FetchComponentsRequest, opts ...grpc.CallOption) (*FetchComponentsResponse, error) {
	out := new(FetchComponentsResponse)
	err := c.cc.Invoke(ctx, "/ukama.services.gitClient.v1.GitClientService/FetchComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitClientServiceServer is the server API for GitClientService service.
// All implementations must embed UnimplementedGitClientServiceServer
// for forward compatibility
type GitClientServiceServer interface {
	FetchComponents(context.Context, *FetchComponentsRequest) (*FetchComponentsResponse, error)
	mustEmbedUnimplementedGitClientServiceServer()
}

// UnimplementedGitClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGitClientServiceServer struct {
}

func (UnimplementedGitClientServiceServer) FetchComponents(context.Context, *FetchComponentsRequest) (*FetchComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchComponents not implemented")
}
func (UnimplementedGitClientServiceServer) mustEmbedUnimplementedGitClientServiceServer() {}

// UnsafeGitClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitClientServiceServer will
// result in compilation errors.
type UnsafeGitClientServiceServer interface {
	mustEmbedUnimplementedGitClientServiceServer()
}

func RegisterGitClientServiceServer(s grpc.ServiceRegistrar, srv GitClientServiceServer) {
	s.RegisterService(&GitClientService_ServiceDesc, srv)
}

func _GitClientService_FetchComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitClientServiceServer).FetchComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.services.gitClient.v1.GitClientService/FetchComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitClientServiceServer).FetchComponents(ctx, req.(*FetchComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitClientService_ServiceDesc is the grpc.ServiceDesc for GitClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.services.gitClient.v1.GitClientService",
	HandlerType: (*GitClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchComponents",
			Handler:    _GitClientService_FetchComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitClient.proto",
}
