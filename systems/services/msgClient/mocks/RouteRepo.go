// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/services/msgClient/internal/db"
)

// RouteRepo is an autogenerated mock type for the RouteRepo type
type RouteRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: key
func (_m *RouteRepo) Add(key string) (*db.Route, error) {
	ret := _m.Called(key)

	var r0 *db.Route
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Route, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Route); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Route)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *RouteRepo) Get(key string) (*db.Route, error) {
	ret := _m.Called(key)

	var r0 *db.Route
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Route, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Route); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Route)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *RouteRepo) List() ([]db.Route, error) {
	ret := _m.Called()

	var r0 []db.Route
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Route, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Route)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: key
func (_m *RouteRepo) Remove(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRouteRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouteRepo creates a new instance of RouteRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouteRepo(t mockConstructorTestingTNewRouteRepo) *RouteRepo {
	mock := &RouteRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
