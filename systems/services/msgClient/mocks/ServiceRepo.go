// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/services/msgClient/internal/db"
)

// ServiceRepo is an autogenerated mock type for the ServiceRepo type
type ServiceRepo struct {
	mock.Mock
}

// AddRoute provides a mock function with given fields: s, rt
func (_m *ServiceRepo) AddRoute(s *db.Service, rt *db.Route) error {
	ret := _m.Called(s, rt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Service, *db.Route) error); ok {
		r0 = rf(s, rt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: serviceUuid
func (_m *ServiceRepo) Get(serviceUuid string) (*db.Service, error) {
	ret := _m.Called(serviceUuid)

	var r0 *db.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Service, error)); ok {
		return rf(serviceUuid)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Service); ok {
		r0 = rf(serviceUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoutes provides a mock function with given fields: serviceId
func (_m *ServiceRepo) GetRoutes(serviceId string) ([]db.Route, error) {
	ret := _m.Called(serviceId)

	var r0 []db.Route
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Route, error)); ok {
		return rf(serviceId)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Route); ok {
		r0 = rf(serviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Route)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *ServiceRepo) List() ([]db.Service, error) {
	ret := _m.Called()

	var r0 []db.Service
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Service, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Service)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: service
func (_m *ServiceRepo) Register(service *db.Service) (*db.Service, error) {
	ret := _m.Called(service)

	var r0 *db.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Service) (*db.Service, error)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(*db.Service) *db.Service); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.Service) error); ok {
		r1 = rf(service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoutes provides a mock function with given fields: service
func (_m *ServiceRepo) RemoveRoutes(service *db.Service) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Service) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnRegister provides a mock function with given fields: serviceId
func (_m *ServiceRepo) UnRegister(serviceId string) error {
	ret := _m.Called(serviceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServiceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceRepo creates a new instance of ServiceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceRepo(t mockConstructorTestingTNewServiceRepo) *ServiceRepo {
	mock := &ServiceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
