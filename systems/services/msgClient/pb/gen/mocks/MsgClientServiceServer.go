// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/services/msgClient/pb/gen"
)

// MsgClientServiceServer is an autogenerated mock type for the MsgClientServiceServer type
type MsgClientServiceServer struct {
	mock.Mock
}

// CreateShovel provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) CreateShovel(_a0 context.Context, _a1 *gen.CreateShovelRequest) (*gen.CreateShovelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.CreateShovelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateShovelRequest) (*gen.CreateShovelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateShovelRequest) *gen.CreateShovelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.CreateShovelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.CreateShovelRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishMsg provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) PublishMsg(_a0 context.Context, _a1 *gen.PublishMsgRequest) (*gen.PublishMsgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.PublishMsgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.PublishMsgRequest) (*gen.PublishMsgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.PublishMsgRequest) *gen.PublishMsgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.PublishMsgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.PublishMsgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterService provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) RegisterService(_a0 context.Context, _a1 *gen.RegisterServiceReq) (*gen.RegisterServiceResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RegisterServiceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RegisterServiceReq) (*gen.RegisterServiceResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RegisterServiceReq) *gen.RegisterServiceResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RegisterServiceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RegisterServiceReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveShovel provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) RemoveShovel(_a0 context.Context, _a1 *gen.RemoveShovelRequest) (*gen.RemoveShovelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemoveShovelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveShovelRequest) (*gen.RemoveShovelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveShovelRequest) *gen.RemoveShovelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveShovelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveShovelRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMsgBusHandler provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) StartMsgBusHandler(_a0 context.Context, _a1 *gen.StartMsgBusHandlerReq) (*gen.StartMsgBusHandlerResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.StartMsgBusHandlerResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StartMsgBusHandlerReq) (*gen.StartMsgBusHandlerResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StartMsgBusHandlerReq) *gen.StartMsgBusHandlerResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StartMsgBusHandlerResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.StartMsgBusHandlerReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMsgBusHandler provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) StopMsgBusHandler(_a0 context.Context, _a1 *gen.StopMsgBusHandlerReq) (*gen.StopMsgBusHandlerResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.StopMsgBusHandlerResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StopMsgBusHandlerReq) (*gen.StopMsgBusHandlerResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StopMsgBusHandlerReq) *gen.StopMsgBusHandlerResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StopMsgBusHandlerResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.StopMsgBusHandlerReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterService provides a mock function with given fields: _a0, _a1
func (_m *MsgClientServiceServer) UnregisterService(_a0 context.Context, _a1 *gen.UnregisterServiceReq) (*gen.UnregisterServiceResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UnregisterServiceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UnregisterServiceReq) (*gen.UnregisterServiceResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UnregisterServiceReq) *gen.UnregisterServiceResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UnregisterServiceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UnregisterServiceReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedMsgClientServiceServer provides a mock function with given fields:
func (_m *MsgClientServiceServer) mustEmbedUnimplementedMsgClientServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMsgClientServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgClientServiceServer creates a new instance of MsgClientServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgClientServiceServer(t mockConstructorTestingTNewMsgClientServiceServer) *MsgClientServiceServer {
	mock := &MsgClientServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
