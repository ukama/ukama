// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/init/lookup/pb/gen"
)

// lookup is an autogenerated mock type for the lookup type
type lookup struct {
	mock.Mock
}

// AddNodeForOrg provides a mock function with given fields: req
func (_m *lookup) AddNodeForOrg(req *gen.AddNodeRequest) (*gen.AddNodeResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddNodeForOrg")
	}

	var r0 *gen.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.AddNodeRequest) (*gen.AddNodeResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.AddNodeRequest) *gen.AddNodeResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.AddNodeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: req
func (_m *lookup) AddOrg(req *gen.AddOrgRequest) (*gen.AddOrgResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddOrg")
	}

	var r0 *gen.AddOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.AddOrgRequest) (*gen.AddOrgResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.AddOrgRequest) *gen.AddOrgResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.AddOrgRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSystemForOrg provides a mock function with given fields: req
func (_m *lookup) AddSystemForOrg(req *gen.AddSystemRequest) (*gen.AddSystemResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddSystemForOrg")
	}

	var r0 *gen.AddSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.AddSystemRequest) (*gen.AddSystemResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.AddSystemRequest) *gen.AddSystemResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.AddSystemRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodeForOrg provides a mock function with given fields: req
func (_m *lookup) DeleteNodeForOrg(req *gen.DeleteNodeRequest) (*gen.DeleteNodeResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNodeForOrg")
	}

	var r0 *gen.DeleteNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.DeleteNodeRequest) (*gen.DeleteNodeResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.DeleteNodeRequest) *gen.DeleteNodeResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.DeleteNodeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSystemForOrg provides a mock function with given fields: req
func (_m *lookup) DeleteSystemForOrg(req *gen.DeleteSystemRequest) (*gen.DeleteSystemResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSystemForOrg")
	}

	var r0 *gen.DeleteSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.DeleteSystemRequest) (*gen.DeleteSystemResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.DeleteSystemRequest) *gen.DeleteSystemResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.DeleteSystemRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeForOrg provides a mock function with given fields: req
func (_m *lookup) GetNodeForOrg(req *gen.GetNodeForOrgRequest) (*gen.GetNodeResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeForOrg")
	}

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetNodeForOrgRequest) (*gen.GetNodeResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetNodeForOrgRequest) *gen.GetNodeResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetNodeForOrgRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: req
func (_m *lookup) GetOrg(req *gen.GetOrgRequest) (*gen.GetOrgResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrg")
	}

	var r0 *gen.GetOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetOrgRequest) (*gen.GetOrgResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetOrgRequest) *gen.GetOrgResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetOrgRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgs provides a mock function with given fields: req
func (_m *lookup) GetOrgs(req *gen.GetOrgsRequest) (*gen.GetOrgsResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgs")
	}

	var r0 *gen.GetOrgsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetOrgsRequest) (*gen.GetOrgsResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetOrgsRequest) *gen.GetOrgsResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetOrgsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetOrgsRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemForOrg provides a mock function with given fields: req
func (_m *lookup) GetSystemForOrg(req *gen.GetSystemRequest) (*gen.GetSystemResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemForOrg")
	}

	var r0 *gen.GetSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetSystemRequest) (*gen.GetSystemResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetSystemRequest) *gen.GetSystemResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetSystemRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrg provides a mock function with given fields: req
func (_m *lookup) UpdateOrg(req *gen.UpdateOrgRequest) (*gen.UpdateOrgResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrg")
	}

	var r0 *gen.UpdateOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.UpdateOrgRequest) (*gen.UpdateOrgResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.UpdateOrgRequest) *gen.UpdateOrgResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.UpdateOrgRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSystemForOrg provides a mock function with given fields: req
func (_m *lookup) UpdateSystemForOrg(req *gen.UpdateSystemRequest) (*gen.UpdateSystemResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSystemForOrg")
	}

	var r0 *gen.UpdateSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.UpdateSystemRequest) (*gen.UpdateSystemResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.UpdateSystemRequest) *gen.UpdateSystemResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.UpdateSystemRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newLookup creates a new instance of lookup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newLookup(t interface {
	mock.TestingT
	Cleanup(func())
}) *lookup {
	mock := &lookup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
