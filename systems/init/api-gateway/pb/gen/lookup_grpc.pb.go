// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: client/lookup.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LookupSerivceClient is the client API for LookupSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LookupSerivceClient interface {
	// Service registation and de-registration
	RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	UnRegisterService(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterResponse, error)
}

type lookupSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewLookupSerivceClient(cc grpc.ClientConnInterface) LookupSerivceClient {
	return &lookupSerivceClient{cc}
}

func (c *lookupSerivceClient) RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/lookup.LookupSerivce/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupSerivceClient) UnRegisterService(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterResponse, error) {
	out := new(UnRegisterResponse)
	err := c.cc.Invoke(ctx, "/lookup.LookupSerivce/UnRegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookupSerivceServer is the server API for LookupSerivce service.
// All implementations must embed UnimplementedLookupSerivceServer
// for forward compatibility
type LookupSerivceServer interface {
	// Service registation and de-registration
	RegisterService(context.Context, *RegisterRequest) (*RegisterResponse, error)
	UnRegisterService(context.Context, *UnRegisterRequest) (*UnRegisterResponse, error)
	mustEmbedUnimplementedLookupSerivceServer()
}

// UnimplementedLookupSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedLookupSerivceServer struct {
}

func (UnimplementedLookupSerivceServer) RegisterService(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedLookupSerivceServer) UnRegisterService(context.Context, *UnRegisterRequest) (*UnRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterService not implemented")
}
func (UnimplementedLookupSerivceServer) mustEmbedUnimplementedLookupSerivceServer() {}

// UnsafeLookupSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LookupSerivceServer will
// result in compilation errors.
type UnsafeLookupSerivceServer interface {
	mustEmbedUnimplementedLookupSerivceServer()
}

func RegisterLookupSerivceServer(s grpc.ServiceRegistrar, srv LookupSerivceServer) {
	s.RegisterService(&LookupSerivce_ServiceDesc, srv)
}

func _LookupSerivce_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupSerivceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookup.LookupSerivce/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupSerivceServer).RegisterService(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupSerivce_UnRegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupSerivceServer).UnRegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookup.LookupSerivce/UnRegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupSerivceServer).UnRegisterService(ctx, req.(*UnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LookupSerivce_ServiceDesc is the grpc.ServiceDesc for LookupSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LookupSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lookup.LookupSerivce",
	HandlerType: (*LookupSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _LookupSerivce_RegisterService_Handler,
		},
		{
			MethodName: "UnRegisterService",
			Handler:    _LookupSerivce_UnRegisterService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/lookup.proto",
}
