syntax = "proto3";

option go_package = "pb/gen";

package ukama.msgClient.v1;

import "validator.proto";
import "google/protobuf/any.proto";

/*
MsgClient system is responsibe for inter systems comunications, Suystems can emmit or generate events using MsgClientService. System expose following rpc's:
    - Register Service 
    - StartMsgBusHandler
    - StopMsgBusHandler
    - PublishMsg
*/

service MsgClientService {
    /// Use this rpc to register system to MsgClient
    rpc RegisterService(RegisterServiceReq) returns (RegisterServiceResp);
    /// Call this rpc to  StartMsgBus after registration
    rpc StartMsgBusHandler(StartMsgBusHandlerReq) returns (StartMsgBusHandlerResp);
    /// Call this rpc to  StopMsgBus
    rpc StopMsgBusHandler(StopMsgBusHandlerReq) returns (StopMsgBusHandlerResp);
    /// Unregister service from MsgClient
    rpc UnregisterService(UnregisterServiceReq) returns (UnregisterServiceResp);
    /// Call this rpc to publisg events
    rpc PublishMsg(PublishMsgRequest) returns (PublishMsgResponse);

}

/// Registration status enums
enum REGISTRAION_STATUS {
    REGISTERED = 0; /// System registered status  
    NOT_REGISTERED = 1; /// System not registered status
}

message RegisterServiceReq {
    string systemName = 1 [(validator.field) = {string_not_empty: true}];
    string serviceName = 2 [(validator.field) = {string_not_empty: true}];
    string instanceId = 3  [(validator.field) = {string_not_empty: true}];
    string msgBusURI = 4 [(validator.field) = {string_not_empty: true}];
    string serviceURI = 5;
    string listQueue = 6;
    string publQueue = 7;
    string exchange = 8;
    uint32 grpcTimeout = 9; 
    repeated string routes = 10 ;
}

message RegisterServiceResp {
    REGISTRAION_STATUS state =1;
    string serviceUuid = 2; 
}

message UnregisterServiceReq {
    string serviceUuid = 1 [(validator.field) = {string_not_empty: true}];  /// Uuid of service to unregister
}

message UnregisterServiceResp {
}

message StartMsgBusHandlerReq {
    string serviceUuid = 1 [(validator.field) = {string_not_empty: true}];  /// Uuid of service to start
}

message StopMsgBusHandlerReq {
    string serviceUuid = 1 [(validator.field) = {string_not_empty: true}];  /// Uuid of service to stop
}

message StartMsgBusHandlerResp {
}

message StopMsgBusHandlerResp {
}

message PublishMsgRequest {
    string serviceUuid = 1 [(validator.field) = {string_not_empty: true}]; /// Uuid of service
    string routingKey = 2 [(validator.field) = {string_not_empty: true}]; /// Unique routing key
    google.protobuf.Any msg = 3; /// Msg proto
}

message PublishMsgResponse {

}
