// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/init/msgClient/internal/db"
	anypb "google.golang.org/protobuf/types/known/anypb"

	mock "github.com/stretchr/testify/mock"
)

// MsgBusHandlerInterface is an autogenerated mock type for the MsgBusHandlerInterface type
type MsgBusHandlerInterface struct {
	mock.Mock
}

// CreateServiceMsgBusHandler provides a mock function with given fields:
func (_m *MsgBusHandlerInterface) CreateServiceMsgBusHandler() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: service, key, msg
func (_m *MsgBusHandlerInterface) Publish(service string, key string, msg *anypb.Any) error {
	ret := _m.Called(service, key, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *anypb.Any) error); ok {
		r0 = rf(service, key, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveServiceQueueListening provides a mock function with given fields: service
func (_m *MsgBusHandlerInterface) RemoveServiceQueueListening(service string) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveServiceQueuePublisher provides a mock function with given fields: service
func (_m *MsgBusHandlerInterface) RemoveServiceQueuePublisher(service string) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopServiceQueueHandler provides a mock function with given fields: service
func (_m *MsgBusHandlerInterface) StopServiceQueueHandler(service string) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceQueueHandler provides a mock function with given fields: s
func (_m *MsgBusHandlerInterface) UpdateServiceQueueHandler(s *db.Service) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Service) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMsgBusHandlerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgBusHandlerInterface creates a new instance of MsgBusHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgBusHandlerInterface(t mockConstructorTestingTNewMsgBusHandlerInterface) *MsgBusHandlerInterface {
	mock := &MsgBusHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
