// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/init/lookup/internal/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// OrgRepo is an autogenerated mock type for the OrgRepo type
type OrgRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: org
func (_m *OrgRepo) Add(org *db.Org) error {
	ret := _m.Called(org)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Org) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *OrgRepo) GetAll() ([]db.Org, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []db.Org
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Org, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Org); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Org)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *OrgRepo) GetById(id uuid.UUID) (*db.Org, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *db.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Org, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Org); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Org)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *OrgRepo) GetByName(name string) (*db.Org, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *db.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Org, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Org); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Org)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: org
func (_m *OrgRepo) Update(org *db.Org) error {
	ret := _m.Called(org)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Org) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrgRepo creates a new instance of OrgRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgRepo {
	mock := &OrgRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
