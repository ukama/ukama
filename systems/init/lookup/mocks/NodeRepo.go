// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/init/lookup/internal/db"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

// AddOrUpdate provides a mock function with given fields: node
func (_m *NodeRepo) AddOrUpdate(node *db.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: nodeId
func (_m *NodeRepo) Delete(nodeId ukama.NodeID) error {
	ret := _m.Called(nodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) error); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: nodeId
func (_m *NodeRepo) Get(nodeId ukama.NodeID) (*db.Node, error) {
	ret := _m.Called(nodeId)

	var r0 *db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) (*db.Node, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.Node); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNodeRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeRepo creates a new instance of NodeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeRepo(t mockConstructorTestingTNewNodeRepo) *NodeRepo {
	mock := &NodeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
