// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/init/lookup/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// LookupServiceClient is an autogenerated mock type for the LookupServiceClient type
type LookupServiceClient struct {
	mock.Mock
}

// AddNodeForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) AddNodeForOrg(ctx context.Context, in *gen.AddNodeRequest, opts ...grpc.CallOption) (*gen.AddNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest, ...grpc.CallOption) (*gen.AddNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest, ...grpc.CallOption) *gen.AddNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) AddOrg(ctx context.Context, in *gen.AddOrgRequest, opts ...grpc.CallOption) (*gen.AddOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddOrgRequest, ...grpc.CallOption) (*gen.AddOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddOrgRequest, ...grpc.CallOption) *gen.AddOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSystemForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) AddSystemForOrg(ctx context.Context, in *gen.AddSystemRequest, opts ...grpc.CallOption) (*gen.AddSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddSystemRequest, ...grpc.CallOption) (*gen.AddSystemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddSystemRequest, ...grpc.CallOption) *gen.AddSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddSystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodeForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) DeleteNodeForOrg(ctx context.Context, in *gen.DeleteNodeRequest, opts ...grpc.CallOption) (*gen.DeleteNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest, ...grpc.CallOption) (*gen.DeleteNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest, ...grpc.CallOption) *gen.DeleteNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSystemForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) DeleteSystemForOrg(ctx context.Context, in *gen.DeleteSystemRequest, opts ...grpc.CallOption) (*gen.DeleteSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteSystemRequest, ...grpc.CallOption) (*gen.DeleteSystemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteSystemRequest, ...grpc.CallOption) *gen.DeleteSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteSystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) GetNode(ctx context.Context, in *gen.GetNodeRequest, opts ...grpc.CallOption) (*gen.GetNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest, ...grpc.CallOption) (*gen.GetNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest, ...grpc.CallOption) *gen.GetNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) GetNodeForOrg(ctx context.Context, in *gen.GetNodeForOrgRequest, opts ...grpc.CallOption) (*gen.GetNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeForOrgRequest, ...grpc.CallOption) (*gen.GetNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeForOrgRequest, ...grpc.CallOption) *gen.GetNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeForOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) GetOrg(ctx context.Context, in *gen.GetOrgRequest, opts ...grpc.CallOption) (*gen.GetOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetOrgRequest, ...grpc.CallOption) (*gen.GetOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetOrgRequest, ...grpc.CallOption) *gen.GetOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) GetSystemForOrg(ctx context.Context, in *gen.GetSystemRequest, opts ...grpc.CallOption) (*gen.GetSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSystemRequest, ...grpc.CallOption) (*gen.GetSystemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSystemRequest, ...grpc.CallOption) *gen.GetSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) UpdateOrg(ctx context.Context, in *gen.UpdateOrgRequest, opts ...grpc.CallOption) (*gen.UpdateOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateOrgRequest, ...grpc.CallOption) (*gen.UpdateOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateOrgRequest, ...grpc.CallOption) *gen.UpdateOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSystemForOrg provides a mock function with given fields: ctx, in, opts
func (_m *LookupServiceClient) UpdateSystemForOrg(ctx context.Context, in *gen.UpdateSystemRequest, opts ...grpc.CallOption) (*gen.UpdateSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateSystemRequest, ...grpc.CallOption) (*gen.UpdateSystemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateSystemRequest, ...grpc.CallOption) *gen.UpdateSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateSystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLookupServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewLookupServiceClient creates a new instance of LookupServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLookupServiceClient(t mockConstructorTestingTNewLookupServiceClient) *LookupServiceClient {
	mock := &LookupServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
