//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: lookup.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LookupService_AddOrg_FullMethodName             = "/ukama.lookup.v1.LookupService/AddOrg"
	LookupService_UpdateOrg_FullMethodName          = "/ukama.lookup.v1.LookupService/UpdateOrg"
	LookupService_GetOrg_FullMethodName             = "/ukama.lookup.v1.LookupService/GetOrg"
	LookupService_GetOrgs_FullMethodName            = "/ukama.lookup.v1.LookupService/GetOrgs"
	LookupService_GetNode_FullMethodName            = "/ukama.lookup.v1.LookupService/GetNode"
	LookupService_AddNodeForOrg_FullMethodName      = "/ukama.lookup.v1.LookupService/AddNodeForOrg"
	LookupService_GetNodeForOrg_FullMethodName      = "/ukama.lookup.v1.LookupService/GetNodeForOrg"
	LookupService_DeleteNodeForOrg_FullMethodName   = "/ukama.lookup.v1.LookupService/DeleteNodeForOrg"
	LookupService_GetSystemForOrg_FullMethodName    = "/ukama.lookup.v1.LookupService/GetSystemForOrg"
	LookupService_AddSystemForOrg_FullMethodName    = "/ukama.lookup.v1.LookupService/AddSystemForOrg"
	LookupService_UpdateSystemForOrg_FullMethodName = "/ukama.lookup.v1.LookupService/UpdateSystemForOrg"
	LookupService_DeleteSystemForOrg_FullMethodName = "/ukama.lookup.v1.LookupService/DeleteSystemForOrg"
)

// LookupServiceClient is the client API for LookupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LookupServiceClient interface {
	// Orgs
	AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*AddOrgResponse, error)
	UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error)
	GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error)
	GetOrgs(ctx context.Context, in *GetOrgsRequest, opts ...grpc.CallOption) (*GetOrgsResponse, error)
	// For Node bootstarping
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// For other systems and debigging purpose
	AddNodeForOrg(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error)
	GetNodeForOrg(ctx context.Context, in *GetNodeForOrgRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	DeleteNodeForOrg(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	// System
	GetSystemForOrg(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error)
	AddSystemForOrg(ctx context.Context, in *AddSystemRequest, opts ...grpc.CallOption) (*AddSystemResponse, error)
	UpdateSystemForOrg(ctx context.Context, in *UpdateSystemRequest, opts ...grpc.CallOption) (*UpdateSystemResponse, error)
	DeleteSystemForOrg(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemResponse, error)
}

type lookupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLookupServiceClient(cc grpc.ClientConnInterface) LookupServiceClient {
	return &lookupServiceClient{cc}
}

func (c *lookupServiceClient) AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*AddOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrgResponse)
	err := c.cc.Invoke(ctx, LookupService_AddOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrgResponse)
	err := c.cc.Invoke(ctx, LookupService_UpdateOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgResponse)
	err := c.cc.Invoke(ctx, LookupService_GetOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) GetOrgs(ctx context.Context, in *GetOrgsRequest, opts ...grpc.CallOption) (*GetOrgsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgsResponse)
	err := c.cc.Invoke(ctx, LookupService_GetOrgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, LookupService_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) AddNodeForOrg(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNodeResponse)
	err := c.cc.Invoke(ctx, LookupService_AddNodeForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) GetNodeForOrg(ctx context.Context, in *GetNodeForOrgRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, LookupService_GetNodeForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) DeleteNodeForOrg(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, LookupService_DeleteNodeForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) GetSystemForOrg(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemResponse)
	err := c.cc.Invoke(ctx, LookupService_GetSystemForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) AddSystemForOrg(ctx context.Context, in *AddSystemRequest, opts ...grpc.CallOption) (*AddSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSystemResponse)
	err := c.cc.Invoke(ctx, LookupService_AddSystemForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) UpdateSystemForOrg(ctx context.Context, in *UpdateSystemRequest, opts ...grpc.CallOption) (*UpdateSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemResponse)
	err := c.cc.Invoke(ctx, LookupService_UpdateSystemForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) DeleteSystemForOrg(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSystemResponse)
	err := c.cc.Invoke(ctx, LookupService_DeleteSystemForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookupServiceServer is the server API for LookupService service.
// All implementations must embed UnimplementedLookupServiceServer
// for forward compatibility.
type LookupServiceServer interface {
	// Orgs
	AddOrg(context.Context, *AddOrgRequest) (*AddOrgResponse, error)
	UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error)
	GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error)
	GetOrgs(context.Context, *GetOrgsRequest) (*GetOrgsResponse, error)
	// For Node bootstarping
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// For other systems and debigging purpose
	AddNodeForOrg(context.Context, *AddNodeRequest) (*AddNodeResponse, error)
	GetNodeForOrg(context.Context, *GetNodeForOrgRequest) (*GetNodeResponse, error)
	DeleteNodeForOrg(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	// System
	GetSystemForOrg(context.Context, *GetSystemRequest) (*GetSystemResponse, error)
	AddSystemForOrg(context.Context, *AddSystemRequest) (*AddSystemResponse, error)
	UpdateSystemForOrg(context.Context, *UpdateSystemRequest) (*UpdateSystemResponse, error)
	DeleteSystemForOrg(context.Context, *DeleteSystemRequest) (*DeleteSystemResponse, error)
	mustEmbedUnimplementedLookupServiceServer()
}

// UnimplementedLookupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLookupServiceServer struct{}

func (UnimplementedLookupServiceServer) AddOrg(context.Context, *AddOrgRequest) (*AddOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrg not implemented")
}
func (UnimplementedLookupServiceServer) UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (UnimplementedLookupServiceServer) GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (UnimplementedLookupServiceServer) GetOrgs(context.Context, *GetOrgsRequest) (*GetOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}
func (UnimplementedLookupServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedLookupServiceServer) AddNodeForOrg(context.Context, *AddNodeRequest) (*AddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeForOrg not implemented")
}
func (UnimplementedLookupServiceServer) GetNodeForOrg(context.Context, *GetNodeForOrgRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeForOrg not implemented")
}
func (UnimplementedLookupServiceServer) DeleteNodeForOrg(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeForOrg not implemented")
}
func (UnimplementedLookupServiceServer) GetSystemForOrg(context.Context, *GetSystemRequest) (*GetSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemForOrg not implemented")
}
func (UnimplementedLookupServiceServer) AddSystemForOrg(context.Context, *AddSystemRequest) (*AddSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSystemForOrg not implemented")
}
func (UnimplementedLookupServiceServer) UpdateSystemForOrg(context.Context, *UpdateSystemRequest) (*UpdateSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemForOrg not implemented")
}
func (UnimplementedLookupServiceServer) DeleteSystemForOrg(context.Context, *DeleteSystemRequest) (*DeleteSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemForOrg not implemented")
}
func (UnimplementedLookupServiceServer) mustEmbedUnimplementedLookupServiceServer() {}
func (UnimplementedLookupServiceServer) testEmbeddedByValue()                       {}

// UnsafeLookupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LookupServiceServer will
// result in compilation errors.
type UnsafeLookupServiceServer interface {
	mustEmbedUnimplementedLookupServiceServer()
}

func RegisterLookupServiceServer(s grpc.ServiceRegistrar, srv LookupServiceServer) {
	// If the following call pancis, it indicates UnimplementedLookupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LookupService_ServiceDesc, srv)
}

func _LookupService_AddOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).AddOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_AddOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).AddOrg(ctx, req.(*AddOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_UpdateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).UpdateOrg(ctx, req.(*UpdateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_GetOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).GetOrg(ctx, req.(*GetOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_GetOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).GetOrgs(ctx, req.(*GetOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_AddNodeForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).AddNodeForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_AddNodeForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).AddNodeForOrg(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_GetNodeForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeForOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).GetNodeForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_GetNodeForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).GetNodeForOrg(ctx, req.(*GetNodeForOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_DeleteNodeForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).DeleteNodeForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_DeleteNodeForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).DeleteNodeForOrg(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_GetSystemForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).GetSystemForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_GetSystemForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).GetSystemForOrg(ctx, req.(*GetSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_AddSystemForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).AddSystemForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_AddSystemForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).AddSystemForOrg(ctx, req.(*AddSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_UpdateSystemForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).UpdateSystemForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_UpdateSystemForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).UpdateSystemForOrg(ctx, req.(*UpdateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_DeleteSystemForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).DeleteSystemForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LookupService_DeleteSystemForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).DeleteSystemForOrg(ctx, req.(*DeleteSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LookupService_ServiceDesc is the grpc.ServiceDesc for LookupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LookupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.lookup.v1.LookupService",
	HandlerType: (*LookupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrg",
			Handler:    _LookupService_AddOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _LookupService_UpdateOrg_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _LookupService_GetOrg_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _LookupService_GetOrgs_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _LookupService_GetNode_Handler,
		},
		{
			MethodName: "AddNodeForOrg",
			Handler:    _LookupService_AddNodeForOrg_Handler,
		},
		{
			MethodName: "GetNodeForOrg",
			Handler:    _LookupService_GetNodeForOrg_Handler,
		},
		{
			MethodName: "DeleteNodeForOrg",
			Handler:    _LookupService_DeleteNodeForOrg_Handler,
		},
		{
			MethodName: "GetSystemForOrg",
			Handler:    _LookupService_GetSystemForOrg_Handler,
		},
		{
			MethodName: "AddSystemForOrg",
			Handler:    _LookupService_AddSystemForOrg_Handler,
		},
		{
			MethodName: "UpdateSystemForOrg",
			Handler:    _LookupService_UpdateSystemForOrg_Handler,
		},
		{
			MethodName: "DeleteSystemForOrg",
			Handler:    _LookupService_DeleteSystemForOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lookup.proto",
}
