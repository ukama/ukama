// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/init/lookup/pb/gen"
)

// lookup is an autogenerated mock type for the lookup type
type lookup struct {
	mock.Mock
}

// GetNode provides a mock function with given fields: req
func (_m *lookup) GetNode(req *gen.GetNodeRequest) (*gen.GetNodeResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetNodeRequest) (*gen.GetNodeResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetNodeRequest) *gen.GetNodeResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetNodeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewLookup interface {
	mock.TestingT
	Cleanup(func())
}

// newLookup creates a new instance of lookup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newLookup(t mockConstructorTestingTnewLookup) *lookup {
	mock := &lookup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
