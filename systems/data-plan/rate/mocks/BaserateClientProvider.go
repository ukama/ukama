// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
)

// BaserateClientProvider is an autogenerated mock type for the BaserateClientProvider type
type BaserateClientProvider struct {
	mock.Mock
}

// GetClient provides a mock function with given fields:
func (_m *BaserateClientProvider) GetClient() (gen.BaseRatesServiceClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 gen.BaseRatesServiceClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (gen.BaseRatesServiceClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() gen.BaseRatesServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.BaseRatesServiceClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBaserateClientProvider creates a new instance of BaserateClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaserateClientProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaserateClientProvider {
	mock := &BaserateClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
