// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/rate/pb/gen"
)

// BaseRateSrvc is an autogenerated mock type for the BaseRateSrvc type
type BaseRateSrvc struct {
	mock.Mock
}

// GetBaseRate provides a mock function with given fields: id
func (_m *BaseRateSrvc) GetBaseRate(id string) (*gen.GetBaseRateResponse, error) {
	ret := _m.Called(id)

	var r0 *gen.GetBaseRateResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetBaseRateResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRates provides a mock function with given fields: req
func (_m *BaseRateSrvc) GetBaseRates(req *gen.GetBaseRatesRequest) (*gen.GetBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetBaseRatesResponse
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesRequest) *gen.GetBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.GetBaseRatesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBaseRateSrvc interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRateSrvc creates a new instance of BaseRateSrvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRateSrvc(t mockConstructorTestingTNewBaseRateSrvc) *BaseRateSrvc {
	mock := &BaseRateSrvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
