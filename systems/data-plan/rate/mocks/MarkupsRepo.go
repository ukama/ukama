// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/data-plan/rate/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// MarkupsRepo is an autogenerated mock type for the MarkupsRepo type
type MarkupsRepo struct {
	mock.Mock
}

// CreateMarkupRate provides a mock function with given fields: _a0, markup
func (_m *MarkupsRepo) CreateMarkupRate(_a0 uuid.UUID, markup float64) error {
	ret := _m.Called(_a0, markup)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) error); ok {
		r0 = rf(_a0, markup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMarkupRate provides a mock function with given fields: _a0
func (_m *MarkupsRepo) DeleteMarkupRate(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMarkupRate provides a mock function with given fields: _a0
func (_m *MarkupsRepo) GetMarkupRate(_a0 uuid.UUID) (*db.Markups, error) {
	ret := _m.Called(_a0)

	var r0 *db.Markups
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Markups, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Markups); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Markups)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkupRateHistory provides a mock function with given fields: _a0
func (_m *MarkupsRepo) GetMarkupRateHistory(_a0 uuid.UUID) ([]db.Markups, error) {
	ret := _m.Called(_a0)

	var r0 []db.Markups
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Markups, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Markups); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Markups)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarkupRate provides a mock function with given fields: _a0, markup
func (_m *MarkupsRepo) UpdateMarkupRate(_a0 uuid.UUID, markup float64) error {
	ret := _m.Called(_a0, markup)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) error); ok {
		r0 = rf(_a0, markup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMarkupsRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMarkupsRepo creates a new instance of MarkupsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMarkupsRepo(t mockConstructorTestingTNewMarkupsRepo) *MarkupsRepo {
	mock := &MarkupsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
