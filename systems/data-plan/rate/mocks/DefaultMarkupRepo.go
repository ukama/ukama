// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/data-plan/rate/pkg/db"
)

// DefaultMarkupRepo is an autogenerated mock type for the DefaultMarkupRepo type
type DefaultMarkupRepo struct {
	mock.Mock
}

// CreateDefaultMarkupRate provides a mock function with given fields: markup
func (_m *DefaultMarkupRepo) CreateDefaultMarkupRate(markup float64) error {
	ret := _m.Called(markup)

	if len(ret) == 0 {
		panic("no return value specified for CreateDefaultMarkupRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(markup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDefaultMarkupRate provides a mock function with no fields
func (_m *DefaultMarkupRepo) DeleteDefaultMarkupRate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteDefaultMarkupRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDefaultMarkupRate provides a mock function with no fields
func (_m *DefaultMarkupRepo) GetDefaultMarkupRate() (*db.DefaultMarkup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultMarkupRate")
	}

	var r0 *db.DefaultMarkup
	var r1 error
	if rf, ok := ret.Get(0).(func() (*db.DefaultMarkup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *db.DefaultMarkup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DefaultMarkup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultMarkupRateHistory provides a mock function with no fields
func (_m *DefaultMarkupRepo) GetDefaultMarkupRateHistory() ([]db.DefaultMarkup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultMarkupRateHistory")
	}

	var r0 []db.DefaultMarkup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.DefaultMarkup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.DefaultMarkup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DefaultMarkup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultMarkupRate provides a mock function with given fields: markup
func (_m *DefaultMarkupRepo) UpdateDefaultMarkupRate(markup float64) error {
	ret := _m.Called(markup)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDefaultMarkupRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(markup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDefaultMarkupRepo creates a new instance of DefaultMarkupRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDefaultMarkupRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DefaultMarkupRepo {
	mock := &DefaultMarkupRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
