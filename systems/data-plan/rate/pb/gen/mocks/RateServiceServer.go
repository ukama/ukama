// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/rate/pb/gen"
)

// RateServiceServer is an autogenerated mock type for the RateServiceServer type
type RateServiceServer struct {
	mock.Mock
}

// DeleteMarkup provides a mock function with given fields: _a0, _a1
func (_m *RateServiceServer) DeleteMarkup(_a0 context.Context, _a1 *gen.DeleteMarkupRequest) (*gen.DeleteMarkupResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteMarkupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteMarkupRequest) *gen.DeleteMarkupResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteMarkupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteMarkupRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkup provides a mock function with given fields: _a0, _a1
func (_m *RateServiceServer) GetMarkup(_a0 context.Context, _a1 *gen.GetMarkupRequest) (*gen.GetMarkupResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetMarkupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMarkupRequest) *gen.GetMarkupResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMarkupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetMarkupRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRate provides a mock function with given fields: _a0, _a1
func (_m *RateServiceServer) GetRate(_a0 context.Context, _a1 *gen.GetRateRequest) (*gen.GetRateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetRateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRateRequest) *gen.GetRateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRates provides a mock function with given fields: _a0, _a1
func (_m *RateServiceServer) GetRates(_a0 context.Context, _a1 *gen.GetRatesRequest) (*gen.GetRatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetRatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRatesRequest) *gen.GetRatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarkup provides a mock function with given fields: _a0, _a1
func (_m *RateServiceServer) UpdateMarkup(_a0 context.Context, _a1 *gen.UpdateMarkupRequest) (*gen.UpdateMarkupResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateMarkupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateMarkupRequest) *gen.UpdateMarkupResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateMarkupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateMarkupRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedRateServiceServer provides a mock function with given fields:
func (_m *RateServiceServer) mustEmbedUnimplementedRateServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewRateServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRateServiceServer creates a new instance of RateServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRateServiceServer(t mockConstructorTestingTNewRateServiceServer) *RateServiceServer {
	mock := &RateServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
