// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/data-plan/rate/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// RateServiceClient is an autogenerated mock type for the RateServiceClient type
type RateServiceClient struct {
	mock.Mock
}

// DeleteMarkup provides a mock function with given fields: ctx, in, opts
func (_m *RateServiceClient) DeleteMarkup(ctx context.Context, in *gen.DeleteMarkupRequest, opts ...grpc.CallOption) (*gen.DeleteMarkupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteMarkupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteMarkupRequest, ...grpc.CallOption) *gen.DeleteMarkupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteMarkupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteMarkupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkup provides a mock function with given fields: ctx, in, opts
func (_m *RateServiceClient) GetMarkup(ctx context.Context, in *gen.GetMarkupRequest, opts ...grpc.CallOption) (*gen.GetMarkupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetMarkupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMarkupRequest, ...grpc.CallOption) *gen.GetMarkupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMarkupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetMarkupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkupRate provides a mock function with given fields: ctx, in, opts
func (_m *RateServiceClient) GetMarkupRate(ctx context.Context, in *gen.GetMarkupRateRequest, opts ...grpc.CallOption) (*gen.GetMarkupRateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetMarkupRateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMarkupRateRequest, ...grpc.CallOption) *gen.GetMarkupRateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMarkupRateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetMarkupRateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkupRates provides a mock function with given fields: ctx, in, opts
func (_m *RateServiceClient) GetMarkupRates(ctx context.Context, in *gen.GetMarkupRatesRequest, opts ...grpc.CallOption) (*gen.GetMarkupRatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetMarkupRatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMarkupRatesRequest, ...grpc.CallOption) *gen.GetMarkupRatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMarkupRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetMarkupRatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarkup provides a mock function with given fields: ctx, in, opts
func (_m *RateServiceClient) UpdateMarkup(ctx context.Context, in *gen.UpdateMarkupRequest, opts ...grpc.CallOption) (*gen.UpdateMarkupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateMarkupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateMarkupRequest, ...grpc.CallOption) *gen.UpdateMarkupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateMarkupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateMarkupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRateServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRateServiceClient creates a new instance of RateServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRateServiceClient(t mockConstructorTestingTNewRateServiceClient) *RateServiceClient {
	mock := &RateServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
