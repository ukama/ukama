// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: rate.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkupRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt string  `protobuf:"bytes,1,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
	DeletedAt string  `protobuf:"bytes,2,opt,name=deletedAt,json=deleted_at,proto3" json:"deletedAt,omitempty"`
	Markup    float64 `protobuf:"fixed64,3,opt,name=markup,proto3" json:"markup,omitempty"`
}

func (x *MarkupRates) Reset() {
	*x = MarkupRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkupRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkupRates) ProtoMessage() {}

func (x *MarkupRates) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkupRates.ProtoReflect.Descriptor instead.
func (*MarkupRates) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{0}
}

func (x *MarkupRates) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MarkupRates) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *MarkupRates) GetMarkup() float64 {
	if x != nil {
		return x.Markup
	}
	return 0
}

type UpdateMarkupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string  `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
	Markup  float64 `protobuf:"fixed64,2,opt,name=markup,proto3" json:"markup,omitempty"`
}

func (x *UpdateMarkupRequest) Reset() {
	*x = UpdateMarkupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarkupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarkupRequest) ProtoMessage() {}

func (x *UpdateMarkupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarkupRequest.ProtoReflect.Descriptor instead.
func (*UpdateMarkupRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateMarkupRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateMarkupRequest) GetMarkup() float64 {
	if x != nil {
		return x.Markup
	}
	return 0
}

type UpdateMarkupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMarkupResponse) Reset() {
	*x = UpdateMarkupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarkupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarkupResponse) ProtoMessage() {}

func (x *UpdateMarkupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarkupResponse.ProtoReflect.Descriptor instead.
func (*UpdateMarkupResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{2}
}

type DeleteMarkupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
}

func (x *DeleteMarkupRequest) Reset() {
	*x = DeleteMarkupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMarkupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkupRequest) ProtoMessage() {}

func (x *DeleteMarkupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkupRequest.ProtoReflect.Descriptor instead.
func (*DeleteMarkupRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteMarkupRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type DeleteMarkupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMarkupResponse) Reset() {
	*x = DeleteMarkupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMarkupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkupResponse) ProtoMessage() {}

func (x *DeleteMarkupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkupResponse.ProtoReflect.Descriptor instead.
func (*DeleteMarkupResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{4}
}

type GetMarkupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
}

func (x *GetMarkupRequest) Reset() {
	*x = GetMarkupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkupRequest) ProtoMessage() {}

func (x *GetMarkupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkupRequest.ProtoReflect.Descriptor instead.
func (*GetMarkupRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{5}
}

func (x *GetMarkupRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type GetMarkupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string  `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
	Markup  float64 `protobuf:"fixed64,2,opt,name=markup,proto3" json:"markup,omitempty"`
}

func (x *GetMarkupResponse) Reset() {
	*x = GetMarkupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkupResponse) ProtoMessage() {}

func (x *GetMarkupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkupResponse.ProtoReflect.Descriptor instead.
func (*GetMarkupResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{6}
}

func (x *GetMarkupResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetMarkupResponse) GetMarkup() float64 {
	if x != nil {
		return x.Markup
	}
	return 0
}

type GetDefaultMarkupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultMarkupRequest) Reset() {
	*x = GetDefaultMarkupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultMarkupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultMarkupRequest) ProtoMessage() {}

func (x *GetDefaultMarkupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultMarkupRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultMarkupRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{7}
}

type GetDefaultMarkupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markup float64 `protobuf:"fixed64,1,opt,name=markup,proto3" json:"markup,omitempty"`
}

func (x *GetDefaultMarkupResponse) Reset() {
	*x = GetDefaultMarkupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultMarkupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultMarkupResponse) ProtoMessage() {}

func (x *GetDefaultMarkupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultMarkupResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultMarkupResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{8}
}

func (x *GetDefaultMarkupResponse) GetMarkup() float64 {
	if x != nil {
		return x.Markup
	}
	return 0
}

type GetDefaultMarkupHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultMarkupHistoryRequest) Reset() {
	*x = GetDefaultMarkupHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultMarkupHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultMarkupHistoryRequest) ProtoMessage() {}

func (x *GetDefaultMarkupHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultMarkupHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultMarkupHistoryRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{9}
}

type GetDefaultMarkupHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkupRates []*MarkupRates `protobuf:"bytes,1,rep,name=markupRates,json=markup_rates,proto3" json:"markupRates,omitempty"`
}

func (x *GetDefaultMarkupHistoryResponse) Reset() {
	*x = GetDefaultMarkupHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultMarkupHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultMarkupHistoryResponse) ProtoMessage() {}

func (x *GetDefaultMarkupHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultMarkupHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultMarkupHistoryResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{10}
}

func (x *GetDefaultMarkupHistoryResponse) GetMarkupRates() []*MarkupRates {
	if x != nil {
		return x.MarkupRates
	}
	return nil
}

type GetMarkupHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
}

func (x *GetMarkupHistoryRequest) Reset() {
	*x = GetMarkupHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkupHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkupHistoryRequest) ProtoMessage() {}

func (x *GetMarkupHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkupHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetMarkupHistoryRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{11}
}

func (x *GetMarkupHistoryRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type GetMarkupHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId     string         `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
	MarkupRates []*MarkupRates `protobuf:"bytes,2,rep,name=markupRates,json=markup_rates,proto3" json:"markupRates,omitempty"`
}

func (x *GetMarkupHistoryResponse) Reset() {
	*x = GetMarkupHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkupHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkupHistoryResponse) ProtoMessage() {}

func (x *GetMarkupHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkupHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetMarkupHistoryResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{12}
}

func (x *GetMarkupHistoryResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetMarkupHistoryResponse) GetMarkupRates() []*MarkupRates {
	if x != nil {
		return x.MarkupRates
	}
	return nil
}

type UpdateDefaultMarkupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markup float64 `protobuf:"fixed64,1,opt,name=markup,proto3" json:"markup,omitempty"`
}

func (x *UpdateDefaultMarkupRequest) Reset() {
	*x = UpdateDefaultMarkupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultMarkupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultMarkupRequest) ProtoMessage() {}

func (x *UpdateDefaultMarkupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultMarkupRequest.ProtoReflect.Descriptor instead.
func (*UpdateDefaultMarkupRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateDefaultMarkupRequest) GetMarkup() float64 {
	if x != nil {
		return x.Markup
	}
	return 0
}

type UpdateDefaultMarkupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDefaultMarkupResponse) Reset() {
	*x = UpdateDefaultMarkupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultMarkupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultMarkupResponse) ProtoMessage() {}

func (x *UpdateDefaultMarkupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultMarkupResponse.ProtoReflect.Descriptor instead.
func (*UpdateDefaultMarkupResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{14}
}

type GetRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country     string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Provider    string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	To          string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	From        string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	SimType     string `protobuf:"bytes,5,opt,name=simType,json=sim_type,proto3" json:"simType,omitempty"`
	EffectiveAt string `protobuf:"bytes,6,opt,name=effectiveAt,json=effective_at,proto3" json:"effectiveAt,omitempty"`
}

func (x *GetRatesRequest) Reset() {
	*x = GetRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatesRequest) ProtoMessage() {}

func (x *GetRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatesRequest.ProtoReflect.Descriptor instead.
func (*GetRatesRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{15}
}

func (x *GetRatesRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetRatesRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetRatesRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRatesRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRatesRequest) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

func (x *GetRatesRequest) GetEffectiveAt() string {
	if x != nil {
		return x.EffectiveAt
	}
	return ""
}

type GetRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*gen.Rate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *GetRatesResponse) Reset() {
	*x = GetRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatesResponse) ProtoMessage() {}

func (x *GetRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatesResponse.ProtoReflect.Descriptor instead.
func (*GetRatesResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{16}
}

func (x *GetRatesResponse) GetRates() []*gen.Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type GetRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId     string `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
	Country     string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Provider    string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	To          string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	From        string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	SimType     string `protobuf:"bytes,6,opt,name=simType,json=sim_type,proto3" json:"simType,omitempty"`
	EffectiveAt string `protobuf:"bytes,7,opt,name=effectiveAt,json=effective_at,proto3" json:"effectiveAt,omitempty"`
}

func (x *GetRateRequest) Reset() {
	*x = GetRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateRequest) ProtoMessage() {}

func (x *GetRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateRequest.ProtoReflect.Descriptor instead.
func (*GetRateRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{17}
}

func (x *GetRateRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetRateRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetRateRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetRateRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRateRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRateRequest) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

func (x *GetRateRequest) GetEffectiveAt() string {
	if x != nil {
		return x.EffectiveAt
	}
	return ""
}

type GetRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*gen.Rate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *GetRateResponse) Reset() {
	*x = GetRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateResponse) ProtoMessage() {}

func (x *GetRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateResponse.ProtoReflect.Descriptor instead.
func (*GetRateResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{18}
}

func (x *GetRateResponse) GetRates() []*gen.Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type GetRateByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  string `protobuf:"bytes,1,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
	BaseRate string `protobuf:"bytes,2,opt,name=baseRate,json=base_rate,proto3" json:"baseRate,omitempty"`
}

func (x *GetRateByIdRequest) Reset() {
	*x = GetRateByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateByIdRequest) ProtoMessage() {}

func (x *GetRateByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateByIdRequest.ProtoReflect.Descriptor instead.
func (*GetRateByIdRequest) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{19}
}

func (x *GetRateByIdRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetRateByIdRequest) GetBaseRate() string {
	if x != nil {
		return x.BaseRate
	}
	return ""
}

type GetRateByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate *gen.Rate `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *GetRateByIdResponse) Reset() {
	*x = GetRateByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateByIdResponse) ProtoMessage() {}

func (x *GetRateByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateByIdResponse.ProtoReflect.Descriptor instead.
func (*GetRateByIdResponse) Descriptor() ([]byte, []int) {
	return file_rate_proto_rawDescGZIP(), []int{20}
}

func (x *GetRateByIdResponse) GetRate() *gen.Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

var File_rate_proto protoreflect.FileDescriptor

var file_rate_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x50, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x16, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4e, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x19, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x20, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74,
	0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x19, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x22, 0x49, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01,
	0x04, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x32, 0xe3, 0x08, 0x0a, 0x0b, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x2f, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x72, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rate_proto_rawDescOnce sync.Once
	file_rate_proto_rawDescData = file_rate_proto_rawDesc
)

func file_rate_proto_rawDescGZIP() []byte {
	file_rate_proto_rawDescOnce.Do(func() {
		file_rate_proto_rawDescData = protoimpl.X.CompressGZIP(file_rate_proto_rawDescData)
	})
	return file_rate_proto_rawDescData
}

var file_rate_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_rate_proto_goTypes = []interface{}{
	(*MarkupRates)(nil),                     // 0: ukama.dataplan.rate.v1.MarkupRates
	(*UpdateMarkupRequest)(nil),             // 1: ukama.dataplan.rate.v1.UpdateMarkupRequest
	(*UpdateMarkupResponse)(nil),            // 2: ukama.dataplan.rate.v1.UpdateMarkupResponse
	(*DeleteMarkupRequest)(nil),             // 3: ukama.dataplan.rate.v1.DeleteMarkupRequest
	(*DeleteMarkupResponse)(nil),            // 4: ukama.dataplan.rate.v1.DeleteMarkupResponse
	(*GetMarkupRequest)(nil),                // 5: ukama.dataplan.rate.v1.GetMarkupRequest
	(*GetMarkupResponse)(nil),               // 6: ukama.dataplan.rate.v1.GetMarkupResponse
	(*GetDefaultMarkupRequest)(nil),         // 7: ukama.dataplan.rate.v1.GetDefaultMarkupRequest
	(*GetDefaultMarkupResponse)(nil),        // 8: ukama.dataplan.rate.v1.GetDefaultMarkupResponse
	(*GetDefaultMarkupHistoryRequest)(nil),  // 9: ukama.dataplan.rate.v1.GetDefaultMarkupHistoryRequest
	(*GetDefaultMarkupHistoryResponse)(nil), // 10: ukama.dataplan.rate.v1.GetDefaultMarkupHistoryResponse
	(*GetMarkupHistoryRequest)(nil),         // 11: ukama.dataplan.rate.v1.GetMarkupHistoryRequest
	(*GetMarkupHistoryResponse)(nil),        // 12: ukama.dataplan.rate.v1.GetMarkupHistoryResponse
	(*UpdateDefaultMarkupRequest)(nil),      // 13: ukama.dataplan.rate.v1.UpdateDefaultMarkupRequest
	(*UpdateDefaultMarkupResponse)(nil),     // 14: ukama.dataplan.rate.v1.UpdateDefaultMarkupResponse
	(*GetRatesRequest)(nil),                 // 15: ukama.dataplan.rate.v1.GetRatesRequest
	(*GetRatesResponse)(nil),                // 16: ukama.dataplan.rate.v1.GetRatesResponse
	(*GetRateRequest)(nil),                  // 17: ukama.dataplan.rate.v1.GetRateRequest
	(*GetRateResponse)(nil),                 // 18: ukama.dataplan.rate.v1.GetRateResponse
	(*GetRateByIdRequest)(nil),              // 19: ukama.dataplan.rate.v1.GetRateByIdRequest
	(*GetRateByIdResponse)(nil),             // 20: ukama.dataplan.rate.v1.GetRateByIdResponse
	(*gen.Rate)(nil),                        // 21: ukama.dataplan.baserate.v1.Rate
}
var file_rate_proto_depIdxs = []int32{
	0,  // 0: ukama.dataplan.rate.v1.GetDefaultMarkupHistoryResponse.markupRates:type_name -> ukama.dataplan.rate.v1.MarkupRates
	0,  // 1: ukama.dataplan.rate.v1.GetMarkupHistoryResponse.markupRates:type_name -> ukama.dataplan.rate.v1.MarkupRates
	21, // 2: ukama.dataplan.rate.v1.GetRatesResponse.rates:type_name -> ukama.dataplan.baserate.v1.Rate
	21, // 3: ukama.dataplan.rate.v1.GetRateResponse.rates:type_name -> ukama.dataplan.baserate.v1.Rate
	21, // 4: ukama.dataplan.rate.v1.GetRateByIdResponse.rate:type_name -> ukama.dataplan.baserate.v1.Rate
	5,  // 5: ukama.dataplan.rate.v1.RateService.GetMarkup:input_type -> ukama.dataplan.rate.v1.GetMarkupRequest
	1,  // 6: ukama.dataplan.rate.v1.RateService.UpdateMarkup:input_type -> ukama.dataplan.rate.v1.UpdateMarkupRequest
	3,  // 7: ukama.dataplan.rate.v1.RateService.DeleteMarkup:input_type -> ukama.dataplan.rate.v1.DeleteMarkupRequest
	11, // 8: ukama.dataplan.rate.v1.RateService.GetMarkupHistory:input_type -> ukama.dataplan.rate.v1.GetMarkupHistoryRequest
	7,  // 9: ukama.dataplan.rate.v1.RateService.GetDefaultMarkup:input_type -> ukama.dataplan.rate.v1.GetDefaultMarkupRequest
	13, // 10: ukama.dataplan.rate.v1.RateService.UpdateDefaultMarkup:input_type -> ukama.dataplan.rate.v1.UpdateDefaultMarkupRequest
	9,  // 11: ukama.dataplan.rate.v1.RateService.GetDefaultMarkupHistory:input_type -> ukama.dataplan.rate.v1.GetDefaultMarkupHistoryRequest
	15, // 12: ukama.dataplan.rate.v1.RateService.GetRates:input_type -> ukama.dataplan.rate.v1.GetRatesRequest
	17, // 13: ukama.dataplan.rate.v1.RateService.GetRate:input_type -> ukama.dataplan.rate.v1.GetRateRequest
	19, // 14: ukama.dataplan.rate.v1.RateService.GetRateById:input_type -> ukama.dataplan.rate.v1.GetRateByIdRequest
	6,  // 15: ukama.dataplan.rate.v1.RateService.GetMarkup:output_type -> ukama.dataplan.rate.v1.GetMarkupResponse
	2,  // 16: ukama.dataplan.rate.v1.RateService.UpdateMarkup:output_type -> ukama.dataplan.rate.v1.UpdateMarkupResponse
	4,  // 17: ukama.dataplan.rate.v1.RateService.DeleteMarkup:output_type -> ukama.dataplan.rate.v1.DeleteMarkupResponse
	12, // 18: ukama.dataplan.rate.v1.RateService.GetMarkupHistory:output_type -> ukama.dataplan.rate.v1.GetMarkupHistoryResponse
	8,  // 19: ukama.dataplan.rate.v1.RateService.GetDefaultMarkup:output_type -> ukama.dataplan.rate.v1.GetDefaultMarkupResponse
	14, // 20: ukama.dataplan.rate.v1.RateService.UpdateDefaultMarkup:output_type -> ukama.dataplan.rate.v1.UpdateDefaultMarkupResponse
	10, // 21: ukama.dataplan.rate.v1.RateService.GetDefaultMarkupHistory:output_type -> ukama.dataplan.rate.v1.GetDefaultMarkupHistoryResponse
	16, // 22: ukama.dataplan.rate.v1.RateService.GetRates:output_type -> ukama.dataplan.rate.v1.GetRatesResponse
	18, // 23: ukama.dataplan.rate.v1.RateService.GetRate:output_type -> ukama.dataplan.rate.v1.GetRateResponse
	20, // 24: ukama.dataplan.rate.v1.RateService.GetRateById:output_type -> ukama.dataplan.rate.v1.GetRateByIdResponse
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_rate_proto_init() }
func file_rate_proto_init() {
	if File_rate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkupRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarkupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarkupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMarkupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMarkupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultMarkupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultMarkupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultMarkupHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultMarkupHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkupHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkupHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefaultMarkupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefaultMarkupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rate_proto_goTypes,
		DependencyIndexes: file_rate_proto_depIdxs,
		MessageInfos:      file_rate_proto_msgTypes,
	}.Build()
	File_rate_proto = out.File
	file_rate_proto_rawDesc = nil
	file_rate_proto_goTypes = nil
	file_rate_proto_depIdxs = nil
}
