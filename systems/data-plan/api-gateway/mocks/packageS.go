// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/package/pb/gen"
)

// packageS is an autogenerated mock type for the packageS type
type packageS struct {
	mock.Mock
}

// AddPackage provides a mock function with given fields: req
func (_m *packageS) AddPackage(req *gen.AddPackageRequest) (*gen.AddPackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.AddPackageResponse
	if rf, ok := ret.Get(0).(func(*gen.AddPackageRequest) *gen.AddPackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.AddPackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: id
func (_m *packageS) DeletePackage(id string) (*gen.DeletePackageResponse, error) {
	ret := _m.Called(id)

	var r0 *gen.DeletePackageResponse
	if rf, ok := ret.Get(0).(func(string) *gen.DeletePackageResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeletePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: id
func (_m *packageS) GetPackage(id string) (*gen.GetPackageResponse, error) {
	ret := _m.Called(id)

	var r0 *gen.GetPackageResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetPackageResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageByOrg provides a mock function with given fields: orgId
func (_m *packageS) GetPackageByOrg(orgId string) (*gen.GetByOrgPackageResponse, error) {
	ret := _m.Called(orgId)

	var r0 *gen.GetByOrgPackageResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetByOrgPackageResponse); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: req
func (_m *packageS) UpdatePackage(req *gen.UpdatePackageRequest) (*gen.UpdatePackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.UpdatePackageResponse
	if rf, ok := ret.Get(0).(func(*gen.UpdatePackageRequest) *gen.UpdatePackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.UpdatePackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewPackageS interface {
	mock.TestingT
	Cleanup(func())
}

// newPackageS creates a new instance of packageS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newPackageS(t mockConstructorTestingTnewPackageS) *packageS {
	mock := &packageS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
