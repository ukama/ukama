// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/package/pb/gen"

	pb "github.com/ukama/ukama/systems/data-plan/base-rate/pb"
)

// dataPlan is an autogenerated mock type for the dataPlan type
type dataPlan struct {
	mock.Mock
}

// AddPackage provides a mock function with given fields: req
func (_m *dataPlan) AddPackage(req *gen.AddPackageRequest) (*gen.AddPackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.AddPackageResponse
	if rf, ok := ret.Get(0).(func(*gen.AddPackageRequest) *gen.AddPackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.AddPackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: req
func (_m *dataPlan) DeletePackage(req *gen.DeletePackageRequest) (*gen.DeletePackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.DeletePackageResponse
	if rf, ok := ret.Get(0).(func(*gen.DeletePackageRequest) *gen.DeletePackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeletePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.DeletePackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRate provides a mock function with given fields: req
func (_m *dataPlan) GetBaseRate(req *pb.GetBaseRateRequest) (*pb.GetBaseRateResponse, error) {
	ret := _m.Called(req)

	var r0 *pb.GetBaseRateResponse
	if rf, ok := ret.Get(0).(func(*pb.GetBaseRateRequest) *pb.GetBaseRateResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBaseRateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pb.GetBaseRateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRates provides a mock function with given fields: req
func (_m *dataPlan) GetBaseRates(req *pb.GetBaseRatesRequest) (*pb.GetBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *pb.GetBaseRatesResponse
	if rf, ok := ret.Get(0).(func(*pb.GetBaseRatesRequest) *pb.GetBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBaseRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pb.GetBaseRatesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: req
func (_m *dataPlan) GetPackage(req *gen.GetPackagesRequest) (*gen.GetPackagesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetPackagesResponse
	if rf, ok := ret.Get(0).(func(*gen.GetPackagesRequest) *gen.GetPackagesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.GetPackagesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: req
func (_m *dataPlan) UpdatePackage(req *gen.UpdatePackageRequest) (*gen.UpdatePackageResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.UpdatePackageResponse
	if rf, ok := ret.Get(0).(func(*gen.UpdatePackageRequest) *gen.UpdatePackageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.UpdatePackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBaseRates provides a mock function with given fields: req
func (_m *dataPlan) UploadBaseRates(req *pb.UploadBaseRatesRequest) (*pb.UploadBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *pb.UploadBaseRatesResponse
	if rf, ok := ret.Get(0).(func(*pb.UploadBaseRatesRequest) *pb.UploadBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UploadBaseRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pb.UploadBaseRatesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewDataPlan interface {
	mock.TestingT
	Cleanup(func())
}

// newDataPlan creates a new instance of dataPlan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newDataPlan(t mockConstructorTestingTnewDataPlan) *dataPlan {
	mock := &dataPlan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
