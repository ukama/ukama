// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
)

// baserate is an autogenerated mock type for the baserate type
type baserate struct {
	mock.Mock
}

// GetBaseRatesByCountry provides a mock function with given fields: req
func (_m *baserate) GetBaseRatesByCountry(req *gen.GetBaseRatesByCountryRequest) (*gen.GetBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByCountryRequest) (*gen.GetBaseRatesResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByCountryRequest) *gen.GetBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetBaseRatesByCountryRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesById provides a mock function with given fields: req
func (_m *baserate) GetBaseRatesById(req *gen.GetBaseRatesByIdRequest) (*gen.GetBaseRatesByIdResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetBaseRatesByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByIdRequest) (*gen.GetBaseRatesByIdResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByIdRequest) *gen.GetBaseRatesByIdResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetBaseRatesByIdRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesForPackage provides a mock function with given fields: req
func (_m *baserate) GetBaseRatesForPackage(req *gen.GetBaseRatesByPeriodRequest) (*gen.GetBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByPeriodRequest) (*gen.GetBaseRatesResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByPeriodRequest) *gen.GetBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetBaseRatesByPeriodRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesForPeriod provides a mock function with given fields: req
func (_m *baserate) GetBaseRatesForPeriod(req *gen.GetBaseRatesByPeriodRequest) (*gen.GetBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByPeriodRequest) (*gen.GetBaseRatesResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByPeriodRequest) *gen.GetBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetBaseRatesByPeriodRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesHistoryByCountry provides a mock function with given fields: req
func (_m *baserate) GetBaseRatesHistoryByCountry(req *gen.GetBaseRatesByCountryRequest) (*gen.GetBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByCountryRequest) (*gen.GetBaseRatesResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetBaseRatesByCountryRequest) *gen.GetBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetBaseRatesByCountryRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBaseRates provides a mock function with given fields: req
func (_m *baserate) UploadBaseRates(req *gen.UploadBaseRatesRequest) (*gen.UploadBaseRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.UploadBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.UploadBaseRatesRequest) (*gen.UploadBaseRatesResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.UploadBaseRatesRequest) *gen.UploadBaseRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UploadBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.UploadBaseRatesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewBaserate interface {
	mock.TestingT
	Cleanup(func())
}

// newBaserate creates a new instance of baserate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newBaserate(t mockConstructorTestingTnewBaserate) *baserate {
	mock := &baserate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
