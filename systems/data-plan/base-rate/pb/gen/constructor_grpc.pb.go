// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: constructor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConstructorServiceClient is the client API for ConstructorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConstructorServiceClient interface {
	// System
	BuildOrg(ctx context.Context, in *BuildOrgRequest, opts ...grpc.CallOption) (*BuildOrgResponse, error)
	UpdateDefaultConstrutorConfig(ctx context.Context, in *UpdateDefaultConstrutorConfigRequest, opts ...grpc.CallOption) (*UpdateDefaultConstructorConfigResponse, error)
	UpdateConstructorConfig(ctx context.Context, in *ConstructorConfigRequest, opts ...grpc.CallOption) (*ConstructorConfigResponse, error)
	UpdateImageVersion(ctx context.Context, in *UpdateImageVersionRequest, opts ...grpc.CallOption) (*UpdateImageVersionResponse, error)
	RemoveOrg(ctx context.Context, in *RemoveOrgRequest, opts ...grpc.CallOption) (*RemoveOrgResponse, error)
}

type constructorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConstructorServiceClient(cc grpc.ClientConnInterface) ConstructorServiceClient {
	return &constructorServiceClient{cc}
}

func (c *constructorServiceClient) BuildOrg(ctx context.Context, in *BuildOrgRequest, opts ...grpc.CallOption) (*BuildOrgResponse, error) {
	out := new(BuildOrgResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/BuildOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) UpdateDefaultConstrutorConfig(ctx context.Context, in *UpdateDefaultConstrutorConfigRequest, opts ...grpc.CallOption) (*UpdateDefaultConstructorConfigResponse, error) {
	out := new(UpdateDefaultConstructorConfigResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/UpdateDefaultConstrutorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) UpdateConstructorConfig(ctx context.Context, in *ConstructorConfigRequest, opts ...grpc.CallOption) (*ConstructorConfigResponse, error) {
	out := new(ConstructorConfigResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/UpdateConstructorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) UpdateImageVersion(ctx context.Context, in *UpdateImageVersionRequest, opts ...grpc.CallOption) (*UpdateImageVersionResponse, error) {
	out := new(UpdateImageVersionResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/UpdateImageVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) RemoveOrg(ctx context.Context, in *RemoveOrgRequest, opts ...grpc.CallOption) (*RemoveOrgResponse, error) {
	out := new(RemoveOrgResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/RemoveOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConstructorServiceServer is the server API for ConstructorService service.
// All implementations must embed UnimplementedConstructorServiceServer
// for forward compatibility
type ConstructorServiceServer interface {
	// System
	BuildOrg(context.Context, *BuildOrgRequest) (*BuildOrgResponse, error)
	UpdateDefaultConstrutorConfig(context.Context, *UpdateDefaultConstrutorConfigRequest) (*UpdateDefaultConstructorConfigResponse, error)
	UpdateConstructorConfig(context.Context, *ConstructorConfigRequest) (*ConstructorConfigResponse, error)
	UpdateImageVersion(context.Context, *UpdateImageVersionRequest) (*UpdateImageVersionResponse, error)
	RemoveOrg(context.Context, *RemoveOrgRequest) (*RemoveOrgResponse, error)
	mustEmbedUnimplementedConstructorServiceServer()
}

// UnimplementedConstructorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConstructorServiceServer struct {
}

func (UnimplementedConstructorServiceServer) BuildOrg(context.Context, *BuildOrgRequest) (*BuildOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildOrg not implemented")
}
func (UnimplementedConstructorServiceServer) UpdateDefaultConstrutorConfig(context.Context, *UpdateDefaultConstrutorConfigRequest) (*UpdateDefaultConstructorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultConstrutorConfig not implemented")
}
func (UnimplementedConstructorServiceServer) UpdateConstructorConfig(context.Context, *ConstructorConfigRequest) (*ConstructorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConstructorConfig not implemented")
}
func (UnimplementedConstructorServiceServer) UpdateImageVersion(context.Context, *UpdateImageVersionRequest) (*UpdateImageVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageVersion not implemented")
}
func (UnimplementedConstructorServiceServer) RemoveOrg(context.Context, *RemoveOrgRequest) (*RemoveOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrg not implemented")
}
func (UnimplementedConstructorServiceServer) mustEmbedUnimplementedConstructorServiceServer() {}

// UnsafeConstructorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConstructorServiceServer will
// result in compilation errors.
type UnsafeConstructorServiceServer interface {
	mustEmbedUnimplementedConstructorServiceServer()
}

func RegisterConstructorServiceServer(s grpc.ServiceRegistrar, srv ConstructorServiceServer) {
	s.RegisterService(&ConstructorService_ServiceDesc, srv)
}

func _ConstructorService_BuildOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).BuildOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/BuildOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).BuildOrg(ctx, req.(*BuildOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_UpdateDefaultConstrutorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultConstrutorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).UpdateDefaultConstrutorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/UpdateDefaultConstrutorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).UpdateDefaultConstrutorConfig(ctx, req.(*UpdateDefaultConstrutorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_UpdateConstructorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstructorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).UpdateConstructorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/UpdateConstructorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).UpdateConstructorConfig(ctx, req.(*ConstructorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_UpdateImageVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).UpdateImageVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/UpdateImageVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).UpdateImageVersion(ctx, req.(*UpdateImageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_RemoveOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).RemoveOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/RemoveOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).RemoveOrg(ctx, req.(*RemoveOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConstructorService_ServiceDesc is the grpc.ServiceDesc for ConstructorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConstructorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.ochestrator.constructor.v1.ConstructorService",
	HandlerType: (*ConstructorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildOrg",
			Handler:    _ConstructorService_BuildOrg_Handler,
		},
		{
			MethodName: "UpdateDefaultConstrutorConfig",
			Handler:    _ConstructorService_UpdateDefaultConstrutorConfig_Handler,
		},
		{
			MethodName: "UpdateConstructorConfig",
			Handler:    _ConstructorService_UpdateConstructorConfig_Handler,
		},
		{
			MethodName: "UpdateImageVersion",
			Handler:    _ConstructorService_UpdateImageVersion_Handler,
		},
		{
			MethodName: "RemoveOrg",
			Handler:    _ConstructorService_RemoveOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "constructor.proto",
}
