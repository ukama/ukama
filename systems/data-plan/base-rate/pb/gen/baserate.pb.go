// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: baserate.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBaseRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*Rate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *GetBaseRatesResponse) Reset() {
	*x = GetBaseRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseRatesResponse) ProtoMessage() {}

func (x *GetBaseRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseRatesResponse.ProtoReflect.Descriptor instead.
func (*GetBaseRatesResponse) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{0}
}

func (x *GetBaseRatesResponse) GetRates() []*Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type GetBaseRatesByCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country     string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Provider    string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	SimType     string `protobuf:"bytes,5,opt,name=simType,json=sim_type,proto3" json:"simType,omitempty"`
	EffectiveAt string `protobuf:"bytes,6,opt,name=effectiveAt,json=effective_at,proto3" json:"effectiveAt,omitempty"`
}

func (x *GetBaseRatesByCountryRequest) Reset() {
	*x = GetBaseRatesByCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseRatesByCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseRatesByCountryRequest) ProtoMessage() {}

func (x *GetBaseRatesByCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseRatesByCountryRequest.ProtoReflect.Descriptor instead.
func (*GetBaseRatesByCountryRequest) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{1}
}

func (x *GetBaseRatesByCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetBaseRatesByCountryRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetBaseRatesByCountryRequest) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

func (x *GetBaseRatesByCountryRequest) GetEffectiveAt() string {
	if x != nil {
		return x.EffectiveAt
	}
	return ""
}

type GetBaseRatesByPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	From     string `protobuf:"bytes,3,opt,name=From,json=from,proto3" json:"From,omitempty"`
	To       string `protobuf:"bytes,4,opt,name=To,json=to,proto3" json:"To,omitempty"`
	SimType  string `protobuf:"bytes,5,opt,name=simType,json=sim_type,proto3" json:"simType,omitempty"`
}

func (x *GetBaseRatesByPeriodRequest) Reset() {
	*x = GetBaseRatesByPeriodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseRatesByPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseRatesByPeriodRequest) ProtoMessage() {}

func (x *GetBaseRatesByPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseRatesByPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetBaseRatesByPeriodRequest) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{2}
}

func (x *GetBaseRatesByPeriodRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetBaseRatesByPeriodRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetBaseRatesByPeriodRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetBaseRatesByPeriodRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetBaseRatesByPeriodRequest) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

type GetBaseRatesByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate *Rate `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *GetBaseRatesByIdResponse) Reset() {
	*x = GetBaseRatesByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseRatesByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseRatesByIdResponse) ProtoMessage() {}

func (x *GetBaseRatesByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseRatesByIdResponse.ProtoReflect.Descriptor instead.
func (*GetBaseRatesByIdResponse) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{3}
}

func (x *GetBaseRatesByIdResponse) GetRate() *Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

type GetBaseRatesByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetBaseRatesByIdRequest) Reset() {
	*x = GetBaseRatesByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseRatesByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseRatesByIdRequest) ProtoMessage() {}

func (x *GetBaseRatesByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseRatesByIdRequest.ProtoReflect.Descriptor instead.
func (*GetBaseRatesByIdRequest) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{4}
}

func (x *GetBaseRatesByIdRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type UploadBaseRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileURL     string `protobuf:"bytes,1,opt,name=fileURL,json=file_url,proto3" json:"fileURL,omitempty"`
	EffectiveAt string `protobuf:"bytes,2,opt,name=effectiveAt,json=effective_at,proto3" json:"effectiveAt,omitempty"`
	EndAt       string `protobuf:"bytes,3,opt,name=endAt,json=end_at,proto3" json:"endAt,omitempty"`
	SimType     string `protobuf:"bytes,4,opt,name=simType,json=sim_type,proto3" json:"simType,omitempty"`
}

func (x *UploadBaseRatesRequest) Reset() {
	*x = UploadBaseRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBaseRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBaseRatesRequest) ProtoMessage() {}

func (x *UploadBaseRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBaseRatesRequest.ProtoReflect.Descriptor instead.
func (*UploadBaseRatesRequest) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{5}
}

func (x *UploadBaseRatesRequest) GetFileURL() string {
	if x != nil {
		return x.FileURL
	}
	return ""
}

func (x *UploadBaseRatesRequest) GetEffectiveAt() string {
	if x != nil {
		return x.EffectiveAt
	}
	return ""
}

func (x *UploadBaseRatesRequest) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *UploadBaseRatesRequest) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

type UploadBaseRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate []*Rate `protobuf:"bytes,1,rep,name=rate,proto3" json:"rate,omitempty"`
}

func (x *UploadBaseRatesResponse) Reset() {
	*x = UploadBaseRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBaseRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBaseRatesResponse) ProtoMessage() {}

func (x *UploadBaseRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBaseRatesResponse.ProtoReflect.Descriptor instead.
func (*UploadBaseRatesResponse) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{6}
}

func (x *UploadBaseRatesResponse) GetRate() []*Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Country     string  `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Provider    string  `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Vpmn        string  `protobuf:"bytes,4,opt,name=vpmn,proto3" json:"vpmn,omitempty"`
	Imsi        int64   `protobuf:"varint,5,opt,name=imsi,proto3" json:"imsi,omitempty"`
	SmsMo       float64 `protobuf:"fixed64,6,opt,name=smsMo,json=sms_mo,proto3" json:"smsMo,omitempty"`
	SmsMt       float64 `protobuf:"fixed64,7,opt,name=smsMt,json=sms_mt,proto3" json:"smsMt,omitempty"`
	Data        float64 `protobuf:"fixed64,8,opt,name=data,proto3" json:"data,omitempty"`
	X2G         bool    `protobuf:"varint,9,opt,name=_2g,json=2g,proto3" json:"_2g,omitempty"`
	X3G         bool    `protobuf:"varint,10,opt,name=_3g,json=3g,proto3" json:"_3g,omitempty"`
	X5G         bool    `protobuf:"varint,11,opt,name=_5g,json=5g,proto3" json:"_5g,omitempty"`
	Lte         bool    `protobuf:"varint,12,opt,name=lte,proto3" json:"lte,omitempty"`
	LteM        bool    `protobuf:"varint,13,opt,name=lteM,json=lte_m,proto3" json:"lteM,omitempty"`
	Apn         string  `protobuf:"bytes,14,opt,name=apn,proto3" json:"apn,omitempty"`
	CreatedAt   string  `protobuf:"bytes,15,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
	DeletedAt   string  `protobuf:"bytes,16,opt,name=deletedAt,json=deleted_at,proto3" json:"deletedAt,omitempty"`
	UpdatedAt   string  `protobuf:"bytes,17,opt,name=updatedAt,json=updated_at,proto3" json:"updatedAt,omitempty"`
	EffectiveAt string  `protobuf:"bytes,18,opt,name=effectiveAt,json=effective_at,proto3" json:"effectiveAt,omitempty"`
	EndAt       string  `protobuf:"bytes,19,opt,name=endAt,json=end_at,proto3" json:"endAt,omitempty"`
	SimType     string  `protobuf:"bytes,20,opt,name=simType,json=sim_type,proto3" json:"simType,omitempty"`
	Currency    string  `protobuf:"bytes,21,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baserate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_baserate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_baserate_proto_rawDescGZIP(), []int{7}
}

func (x *Rate) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Rate) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Rate) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Rate) GetVpmn() string {
	if x != nil {
		return x.Vpmn
	}
	return ""
}

func (x *Rate) GetImsi() int64 {
	if x != nil {
		return x.Imsi
	}
	return 0
}

func (x *Rate) GetSmsMo() float64 {
	if x != nil {
		return x.SmsMo
	}
	return 0
}

func (x *Rate) GetSmsMt() float64 {
	if x != nil {
		return x.SmsMt
	}
	return 0
}

func (x *Rate) GetData() float64 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *Rate) GetX2G() bool {
	if x != nil {
		return x.X2G
	}
	return false
}

func (x *Rate) GetX3G() bool {
	if x != nil {
		return x.X3G
	}
	return false
}

func (x *Rate) GetX5G() bool {
	if x != nil {
		return x.X5G
	}
	return false
}

func (x *Rate) GetLte() bool {
	if x != nil {
		return x.Lte
	}
	return false
}

func (x *Rate) GetLteM() bool {
	if x != nil {
		return x.LteM
	}
	return false
}

func (x *Rate) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *Rate) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Rate) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Rate) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Rate) GetEffectiveAt() string {
	if x != nil {
		return x.EffectiveAt
	}
	return ""
}

func (x *Rate) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *Rate) GetSimType() string {
	if x != nil {
		return x.SimType
	}
	return ""
}

func (x *Rate) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

var File_baserate_proto protoreflect.FileDescriptor

var file_baserate_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x92, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x07,
	0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4f,
	0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22,
	0xfd, 0x03, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x90, 0x01, 0x04, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x70, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x70, 0x6d, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x12, 0x15, 0x0a, 0x05, 0x73, 0x6d, 0x73, 0x4d, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x6f, 0x12, 0x15, 0x0a, 0x05, 0x73, 0x6d,
	0x73, 0x4d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x6d, 0x73, 0x5f, 0x6d,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x32, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x32, 0x67, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x33, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x33, 0x67, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x35, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x35, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x6c, 0x74,
	0x65, 0x4d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x74, 0x65, 0x5f, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x21,
	0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x74, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32,
	0xb7, 0x06, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x33, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x38, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_baserate_proto_rawDescOnce sync.Once
	file_baserate_proto_rawDescData = file_baserate_proto_rawDesc
)

func file_baserate_proto_rawDescGZIP() []byte {
	file_baserate_proto_rawDescOnce.Do(func() {
		file_baserate_proto_rawDescData = protoimpl.X.CompressGZIP(file_baserate_proto_rawDescData)
	})
	return file_baserate_proto_rawDescData
}

var file_baserate_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_baserate_proto_goTypes = []interface{}{
	(*GetBaseRatesResponse)(nil),         // 0: ukama.dataplan.baserate.v1.GetBaseRatesResponse
	(*GetBaseRatesByCountryRequest)(nil), // 1: ukama.dataplan.baserate.v1.GetBaseRatesByCountryRequest
	(*GetBaseRatesByPeriodRequest)(nil),  // 2: ukama.dataplan.baserate.v1.GetBaseRatesByPeriodRequest
	(*GetBaseRatesByIdResponse)(nil),     // 3: ukama.dataplan.baserate.v1.GetBaseRatesByIdResponse
	(*GetBaseRatesByIdRequest)(nil),      // 4: ukama.dataplan.baserate.v1.GetBaseRatesByIdRequest
	(*UploadBaseRatesRequest)(nil),       // 5: ukama.dataplan.baserate.v1.UploadBaseRatesRequest
	(*UploadBaseRatesResponse)(nil),      // 6: ukama.dataplan.baserate.v1.UploadBaseRatesResponse
	(*Rate)(nil),                         // 7: ukama.dataplan.baserate.v1.Rate
}
var file_baserate_proto_depIdxs = []int32{
	7, // 0: ukama.dataplan.baserate.v1.GetBaseRatesResponse.rates:type_name -> ukama.dataplan.baserate.v1.Rate
	7, // 1: ukama.dataplan.baserate.v1.GetBaseRatesByIdResponse.rate:type_name -> ukama.dataplan.baserate.v1.Rate
	7, // 2: ukama.dataplan.baserate.v1.UploadBaseRatesResponse.rate:type_name -> ukama.dataplan.baserate.v1.Rate
	4, // 3: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesById:input_type -> ukama.dataplan.baserate.v1.GetBaseRatesByIdRequest
	1, // 4: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesByCountry:input_type -> ukama.dataplan.baserate.v1.GetBaseRatesByCountryRequest
	2, // 5: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesForPeriod:input_type -> ukama.dataplan.baserate.v1.GetBaseRatesByPeriodRequest
	2, // 6: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesForPackage:input_type -> ukama.dataplan.baserate.v1.GetBaseRatesByPeriodRequest
	1, // 7: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesHistoryByCountry:input_type -> ukama.dataplan.baserate.v1.GetBaseRatesByCountryRequest
	5, // 8: ukama.dataplan.baserate.v1.BaseRatesService.UploadBaseRates:input_type -> ukama.dataplan.baserate.v1.UploadBaseRatesRequest
	3, // 9: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesById:output_type -> ukama.dataplan.baserate.v1.GetBaseRatesByIdResponse
	0, // 10: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesByCountry:output_type -> ukama.dataplan.baserate.v1.GetBaseRatesResponse
	0, // 11: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesForPeriod:output_type -> ukama.dataplan.baserate.v1.GetBaseRatesResponse
	0, // 12: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesForPackage:output_type -> ukama.dataplan.baserate.v1.GetBaseRatesResponse
	0, // 13: ukama.dataplan.baserate.v1.BaseRatesService.GetBaseRatesHistoryByCountry:output_type -> ukama.dataplan.baserate.v1.GetBaseRatesResponse
	6, // 14: ukama.dataplan.baserate.v1.BaseRatesService.UploadBaseRates:output_type -> ukama.dataplan.baserate.v1.UploadBaseRatesResponse
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_baserate_proto_init() }
func file_baserate_proto_init() {
	if File_baserate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_baserate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseRatesByCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseRatesByPeriodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseRatesByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseRatesByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBaseRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBaseRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baserate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baserate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_baserate_proto_goTypes,
		DependencyIndexes: file_baserate_proto_depIdxs,
		MessageInfos:      file_baserate_proto_msgTypes,
	}.Build()
	File_baserate_proto = out.File
	file_baserate_proto_rawDesc = nil
	file_baserate_proto_goTypes = nil
	file_baserate_proto_depIdxs = nil
}
