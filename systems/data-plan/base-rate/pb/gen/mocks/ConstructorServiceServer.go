// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
)

// ConstructorServiceServer is an autogenerated mock type for the ConstructorServiceServer type
type ConstructorServiceServer struct {
	mock.Mock
}

// BuildOrg provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) BuildOrg(_a0 context.Context, _a1 *gen.BuildOrgRequest) (*gen.BuildOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.BuildOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BuildOrgRequest) (*gen.BuildOrgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BuildOrgRequest) *gen.BuildOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.BuildOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.BuildOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOrg provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) RemoveOrg(_a0 context.Context, _a1 *gen.RemoveOrgRequest) (*gen.RemoveOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemoveOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveOrgRequest) (*gen.RemoveOrgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveOrgRequest) *gen.RemoveOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConstructorConfig provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) UpdateConstructorConfig(_a0 context.Context, _a1 *gen.ConstructorConfigRequest) (*gen.ConstructorConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ConstructorConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructorConfigRequest) (*gen.ConstructorConfigResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructorConfigRequest) *gen.ConstructorConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ConstructorConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ConstructorConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultConstrutorConfig provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) UpdateDefaultConstrutorConfig(_a0 context.Context, _a1 *gen.UpdateDefaultConstrutorConfigRequest) (*gen.UpdateDefaultConstructorConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateDefaultConstructorConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateDefaultConstrutorConfigRequest) (*gen.UpdateDefaultConstructorConfigResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateDefaultConstrutorConfigRequest) *gen.UpdateDefaultConstructorConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateDefaultConstructorConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateDefaultConstrutorConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImageVersion provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) UpdateImageVersion(_a0 context.Context, _a1 *gen.UpdateImageVersionRequest) (*gen.UpdateImageVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateImageVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateImageVersionRequest) (*gen.UpdateImageVersionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateImageVersionRequest) *gen.UpdateImageVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateImageVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateImageVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedConstructorServiceServer provides a mock function with given fields:
func (_m *ConstructorServiceServer) mustEmbedUnimplementedConstructorServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewConstructorServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConstructorServiceServer creates a new instance of ConstructorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConstructorServiceServer(t mockConstructorTestingTNewConstructorServiceServer) *ConstructorServiceServer {
	mock := &ConstructorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
