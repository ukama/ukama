// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// BaseRatesServiceClient is an autogenerated mock type for the BaseRatesServiceClient type
type BaseRatesServiceClient struct {
	mock.Mock
}

// GetBaseRate provides a mock function with given fields: ctx, in, opts
func (_m *BaseRatesServiceClient) GetBaseRate(ctx context.Context, in *gen.GetBaseRateRequest, opts ...grpc.CallOption) (*gen.GetBaseRateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetBaseRateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBaseRateRequest, ...grpc.CallOption) *gen.GetBaseRateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetBaseRateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRates provides a mock function with given fields: ctx, in, opts
func (_m *BaseRatesServiceClient) GetBaseRates(ctx context.Context, in *gen.GetBaseRatesRequest, opts ...grpc.CallOption) (*gen.GetBaseRatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetBaseRatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBaseRatesRequest, ...grpc.CallOption) *gen.GetBaseRatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetBaseRatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBaseRates provides a mock function with given fields: ctx, in, opts
func (_m *BaseRatesServiceClient) UploadBaseRates(ctx context.Context, in *gen.UploadBaseRatesRequest, opts ...grpc.CallOption) (*gen.UploadBaseRatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UploadBaseRatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UploadBaseRatesRequest, ...grpc.CallOption) *gen.UploadBaseRatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UploadBaseRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UploadBaseRatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBaseRatesServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRatesServiceClient creates a new instance of BaseRatesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRatesServiceClient(t mockConstructorTestingTNewBaseRatesServiceClient) *BaseRatesServiceClient {
	mock := &BaseRatesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
