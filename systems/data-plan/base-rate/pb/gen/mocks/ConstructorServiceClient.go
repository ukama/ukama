// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ConstructorServiceClient is an autogenerated mock type for the ConstructorServiceClient type
type ConstructorServiceClient struct {
	mock.Mock
}

// BuildOrg provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) BuildOrg(ctx context.Context, in *gen.BuildOrgRequest, opts ...grpc.CallOption) (*gen.BuildOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.BuildOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BuildOrgRequest, ...grpc.CallOption) (*gen.BuildOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.BuildOrgRequest, ...grpc.CallOption) *gen.BuildOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.BuildOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.BuildOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOrg provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) RemoveOrg(ctx context.Context, in *gen.RemoveOrgRequest, opts ...grpc.CallOption) (*gen.RemoveOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RemoveOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveOrgRequest, ...grpc.CallOption) (*gen.RemoveOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveOrgRequest, ...grpc.CallOption) *gen.RemoveOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConstructorConfig provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) UpdateConstructorConfig(ctx context.Context, in *gen.ConstructorConfigRequest, opts ...grpc.CallOption) (*gen.ConstructorConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ConstructorConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructorConfigRequest, ...grpc.CallOption) (*gen.ConstructorConfigResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructorConfigRequest, ...grpc.CallOption) *gen.ConstructorConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ConstructorConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ConstructorConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultConstrutorConfig provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) UpdateDefaultConstrutorConfig(ctx context.Context, in *gen.UpdateDefaultConstrutorConfigRequest, opts ...grpc.CallOption) (*gen.UpdateDefaultConstructorConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateDefaultConstructorConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateDefaultConstrutorConfigRequest, ...grpc.CallOption) (*gen.UpdateDefaultConstructorConfigResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateDefaultConstrutorConfigRequest, ...grpc.CallOption) *gen.UpdateDefaultConstructorConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateDefaultConstructorConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateDefaultConstrutorConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImageVersion provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) UpdateImageVersion(ctx context.Context, in *gen.UpdateImageVersionRequest, opts ...grpc.CallOption) (*gen.UpdateImageVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateImageVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateImageVersionRequest, ...grpc.CallOption) (*gen.UpdateImageVersionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateImageVersionRequest, ...grpc.CallOption) *gen.UpdateImageVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateImageVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateImageVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConstructorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewConstructorServiceClient creates a new instance of ConstructorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConstructorServiceClient(t mockConstructorTestingTNewConstructorServiceClient) *ConstructorServiceClient {
	mock := &ConstructorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
