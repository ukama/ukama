// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/base-rate/pb/gen"
)

// BaseRatesServiceServer is an autogenerated mock type for the BaseRatesServiceServer type
type BaseRatesServiceServer struct {
	mock.Mock
}

// GetBaseRate provides a mock function with given fields: _a0, _a1
func (_m *BaseRatesServiceServer) GetBaseRate(_a0 context.Context, _a1 *gen.GetBaseRateRequest) (*gen.GetBaseRateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetBaseRateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBaseRateRequest) (*gen.GetBaseRateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBaseRateRequest) *gen.GetBaseRateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetBaseRateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRates provides a mock function with given fields: _a0, _a1
func (_m *BaseRatesServiceServer) GetBaseRates(_a0 context.Context, _a1 *gen.GetBaseRatesRequest) (*gen.GetBaseRatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBaseRatesRequest) (*gen.GetBaseRatesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBaseRatesRequest) *gen.GetBaseRatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetBaseRatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBaseRates provides a mock function with given fields: _a0, _a1
func (_m *BaseRatesServiceServer) UploadBaseRates(_a0 context.Context, _a1 *gen.UploadBaseRatesRequest) (*gen.UploadBaseRatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UploadBaseRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UploadBaseRatesRequest) (*gen.UploadBaseRatesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UploadBaseRatesRequest) *gen.UploadBaseRatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UploadBaseRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UploadBaseRatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedBaseRatesServiceServer provides a mock function with given fields:
func (_m *BaseRatesServiceServer) mustEmbedUnimplementedBaseRatesServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewBaseRatesServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRatesServiceServer creates a new instance of BaseRatesServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRatesServiceServer(t mockConstructorTestingTNewBaseRatesServiceServer) *BaseRatesServiceServer {
	mock := &BaseRatesServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
