// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: rate.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaseRatesServiceClient is the client API for BaseRatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseRatesServiceClient interface {
	GetBaseRates(ctx context.Context, in *GetBaseRatesRequest, opts ...grpc.CallOption) (*GetBaseRatesResponse, error)
	GetBaseRate(ctx context.Context, in *GetBaseRateRequest, opts ...grpc.CallOption) (*GetBaseRateResponse, error)
	UploadBaseRates(ctx context.Context, in *UploadBaseRatesRequest, opts ...grpc.CallOption) (*UploadBaseRatesResponse, error)
}

type baseRatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseRatesServiceClient(cc grpc.ClientConnInterface) BaseRatesServiceClient {
	return &baseRatesServiceClient{cc}
}

func (c *baseRatesServiceClient) GetBaseRates(ctx context.Context, in *GetBaseRatesRequest, opts ...grpc.CallOption) (*GetBaseRatesResponse, error) {
	out := new(GetBaseRatesResponse)
	err := c.cc.Invoke(ctx, "/ukama.data_plan.rate.v1.BaseRatesService/GetBaseRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseRatesServiceClient) GetBaseRate(ctx context.Context, in *GetBaseRateRequest, opts ...grpc.CallOption) (*GetBaseRateResponse, error) {
	out := new(GetBaseRateResponse)
	err := c.cc.Invoke(ctx, "/ukama.data_plan.rate.v1.BaseRatesService/GetBaseRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseRatesServiceClient) UploadBaseRates(ctx context.Context, in *UploadBaseRatesRequest, opts ...grpc.CallOption) (*UploadBaseRatesResponse, error) {
	out := new(UploadBaseRatesResponse)
	err := c.cc.Invoke(ctx, "/ukama.data_plan.rate.v1.BaseRatesService/UploadBaseRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseRatesServiceServer is the server API for BaseRatesService service.
// All implementations must embed UnimplementedBaseRatesServiceServer
// for forward compatibility
type BaseRatesServiceServer interface {
	GetBaseRates(context.Context, *GetBaseRatesRequest) (*GetBaseRatesResponse, error)
	GetBaseRate(context.Context, *GetBaseRateRequest) (*GetBaseRateResponse, error)
	UploadBaseRates(context.Context, *UploadBaseRatesRequest) (*UploadBaseRatesResponse, error)
	mustEmbedUnimplementedBaseRatesServiceServer()
}

// UnimplementedBaseRatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBaseRatesServiceServer struct {
}

func (UnimplementedBaseRatesServiceServer) GetBaseRates(context.Context, *GetBaseRatesRequest) (*GetBaseRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseRates not implemented")
}
func (UnimplementedBaseRatesServiceServer) GetBaseRate(context.Context, *GetBaseRateRequest) (*GetBaseRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseRate not implemented")
}
func (UnimplementedBaseRatesServiceServer) UploadBaseRates(context.Context, *UploadBaseRatesRequest) (*UploadBaseRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBaseRates not implemented")
}
func (UnimplementedBaseRatesServiceServer) mustEmbedUnimplementedBaseRatesServiceServer() {}

// UnsafeBaseRatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseRatesServiceServer will
// result in compilation errors.
type UnsafeBaseRatesServiceServer interface {
	mustEmbedUnimplementedBaseRatesServiceServer()
}

func RegisterBaseRatesServiceServer(s grpc.ServiceRegistrar, srv BaseRatesServiceServer) {
	s.RegisterService(&BaseRatesService_ServiceDesc, srv)
}

func _BaseRatesService_GetBaseRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseRatesServiceServer).GetBaseRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.data_plan.rate.v1.BaseRatesService/GetBaseRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseRatesServiceServer).GetBaseRates(ctx, req.(*GetBaseRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseRatesService_GetBaseRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseRatesServiceServer).GetBaseRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.data_plan.rate.v1.BaseRatesService/GetBaseRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseRatesServiceServer).GetBaseRate(ctx, req.(*GetBaseRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseRatesService_UploadBaseRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBaseRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseRatesServiceServer).UploadBaseRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.data_plan.rate.v1.BaseRatesService/UploadBaseRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseRatesServiceServer).UploadBaseRates(ctx, req.(*UploadBaseRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseRatesService_ServiceDesc is the grpc.ServiceDesc for BaseRatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseRatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.data_plan.rate.v1.BaseRatesService",
	HandlerType: (*BaseRatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBaseRates",
			Handler:    _BaseRatesService_GetBaseRates_Handler,
		},
		{
			MethodName: "GetBaseRate",
			Handler:    _BaseRatesService_GetBaseRate_Handler,
		},
		{
			MethodName: "UploadBaseRates",
			Handler:    _BaseRatesService_UploadBaseRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rate.proto",
}
