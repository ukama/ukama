// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/data-plan/base-rate/pkg/db"
)

// BaseRateRepo is an autogenerated mock type for the BaseRateRepo type
type BaseRateRepo struct {
	mock.Mock
}

// GetAllBaseRates provides a mock function with given fields: effectiveAt
func (_m *BaseRateRepo) GetAllBaseRates(effectiveAt string) ([]db.Rate, error) {
	ret := _m.Called(effectiveAt)

	var r0 []db.Rate
	if rf, ok := ret.Get(0).(func(string) []db.Rate); ok {
		r0 = rf(effectiveAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Rate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(effectiveAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRate provides a mock function with given fields: Id
func (_m *BaseRateRepo) GetBaseRate(Id uint64) (*db.Rate, error) {
	ret := _m.Called(Id)

	var r0 *db.Rate
	if rf, ok := ret.Get(0).(func(uint64) *db.Rate); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Rate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRates provides a mock function with given fields: country, network, simType
func (_m *BaseRateRepo) GetBaseRates(country string, network string, simType string) ([]db.Rate, error) {
	ret := _m.Called(country, network, simType)

	var r0 []db.Rate
	if rf, ok := ret.Get(0).(func(string, string, string) []db.Rate); ok {
		r0 = rf(country, network, simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Rate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(country, network, simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBaseRates provides a mock function with given fields: query
func (_m *BaseRateRepo) UploadBaseRates(query string) error {
	ret := _m.Called(query)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBaseRateRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRateRepo creates a new instance of BaseRateRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRateRepo(t mockConstructorTestingTNewBaseRateRepo) *BaseRateRepo {
	mock := &BaseRateRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
