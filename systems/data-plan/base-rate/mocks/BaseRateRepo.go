// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/data-plan/base-rate/pkg/db"

	time "time"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// BaseRateRepo is an autogenerated mock type for the BaseRateRepo type
type BaseRateRepo struct {
	mock.Mock
}

// GetBaseRateById provides a mock function with given fields: _a0
func (_m *BaseRateRepo) GetBaseRateById(_a0 uuid.UUID) (*db.BaseRate, error) {
	ret := _m.Called(_a0)

	var r0 *db.BaseRate
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.BaseRate, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.BaseRate); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.BaseRate)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesByCountry provides a mock function with given fields: country, provider, simType
func (_m *BaseRateRepo) GetBaseRatesByCountry(country string, provider string, simType db.SimType) ([]db.BaseRate, error) {
	ret := _m.Called(country, provider, simType)

	var r0 []db.BaseRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, db.SimType) ([]db.BaseRate, error)); ok {
		return rf(country, provider, simType)
	}
	if rf, ok := ret.Get(0).(func(string, string, db.SimType) []db.BaseRate); ok {
		r0 = rf(country, provider, simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BaseRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, db.SimType) error); ok {
		r1 = rf(country, provider, simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesForPackage provides a mock function with given fields: country, provider, from, to, simType
func (_m *BaseRateRepo) GetBaseRatesForPackage(country string, provider string, from time.Time, to time.Time, simType db.SimType) ([]db.BaseRate, error) {
	ret := _m.Called(country, provider, from, to, simType)

	var r0 []db.BaseRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time, time.Time, db.SimType) ([]db.BaseRate, error)); ok {
		return rf(country, provider, from, to, simType)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Time, time.Time, db.SimType) []db.BaseRate); ok {
		r0 = rf(country, provider, from, to, simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BaseRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Time, time.Time, db.SimType) error); ok {
		r1 = rf(country, provider, from, to, simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesForPeriod provides a mock function with given fields: country, provider, from, to, simType
func (_m *BaseRateRepo) GetBaseRatesForPeriod(country string, provider string, from time.Time, to time.Time, simType db.SimType) ([]db.BaseRate, error) {
	ret := _m.Called(country, provider, from, to, simType)

	var r0 []db.BaseRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time, time.Time, db.SimType) ([]db.BaseRate, error)); ok {
		return rf(country, provider, from, to, simType)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Time, time.Time, db.SimType) []db.BaseRate); ok {
		r0 = rf(country, provider, from, to, simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BaseRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Time, time.Time, db.SimType) error); ok {
		r1 = rf(country, provider, from, to, simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRatesHistoryByCountry provides a mock function with given fields: country, provider, sType
func (_m *BaseRateRepo) GetBaseRatesHistoryByCountry(country string, provider string, sType db.SimType) ([]db.BaseRate, error) {
	ret := _m.Called(country, provider, sType)

	var r0 []db.BaseRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, db.SimType) ([]db.BaseRate, error)); ok {
		return rf(country, provider, sType)
	}
	if rf, ok := ret.Get(0).(func(string, string, db.SimType) []db.BaseRate); ok {
		r0 = rf(country, provider, sType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BaseRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, db.SimType) error); ok {
		r1 = rf(country, provider, sType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBaseRates provides a mock function with given fields: rateList
func (_m *BaseRateRepo) UploadBaseRates(rateList []db.BaseRate) error {
	ret := _m.Called(rateList)

	var r0 error
	if rf, ok := ret.Get(0).(func([]db.BaseRate) error); ok {
		r0 = rf(rateList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBaseRateRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRateRepo creates a new instance of BaseRateRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRateRepo(t mockConstructorTestingTNewBaseRateRepo) *BaseRateRepo {
	mock := &BaseRateRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
