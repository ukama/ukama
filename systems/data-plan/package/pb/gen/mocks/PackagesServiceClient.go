// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/ukama/ukama/systems/data-plan/package/pb"
)

// PackagesServiceClient is an autogenerated mock type for the PackagesServiceClient type
type PackagesServiceClient struct {
	mock.Mock
}

// AddPackage provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) AddPackage(ctx context.Context, in *pb.AddPackageRequest, opts ...grpc.CallOption) (*pb.AddPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AddPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddPackageRequest, ...grpc.CallOption) *pb.AddPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) DeletePackage(ctx context.Context, in *pb.DeletePackageRequest, opts ...grpc.CallOption) (*pb.DeletePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeletePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeletePackageRequest, ...grpc.CallOption) *pb.DeletePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeletePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeletePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackages provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) GetPackages(ctx context.Context, in *pb.GetPackagesRequest, opts ...grpc.CallOption) (*pb.GetPackagesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetPackagesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetPackagesRequest, ...grpc.CallOption) *pb.GetPackagesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetPackagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetPackagesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) UpdatePackage(ctx context.Context, in *pb.UpdatePackageRequest, opts ...grpc.CallOption) (*pb.UpdatePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdatePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdatePackageRequest, ...grpc.CallOption) *pb.UpdatePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdatePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdatePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPackagesServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackagesServiceClient creates a new instance of PackagesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackagesServiceClient(t mockConstructorTestingTNewPackagesServiceClient) *PackagesServiceClient {
	mock := &PackagesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
