// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/data-plan/package/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// PackagesServiceClient is an autogenerated mock type for the PackagesServiceClient type
type PackagesServiceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) Add(ctx context.Context, in *gen.AddPackageRequest, opts ...grpc.CallOption) (*gen.AddPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) (*gen.AddPackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) *gen.AddPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) Delete(ctx context.Context, in *gen.DeletePackageRequest, opts ...grpc.CallOption) (*gen.DeletePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeletePackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeletePackageRequest, ...grpc.CallOption) (*gen.DeletePackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeletePackageRequest, ...grpc.CallOption) *gen.DeletePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeletePackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeletePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) Get(ctx context.Context, in *gen.GetPackageRequest, opts ...grpc.CallOption) (*gen.GetPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetPackageRequest, ...grpc.CallOption) (*gen.GetPackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetPackageRequest, ...grpc.CallOption) *gen.GetPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) GetByOrg(ctx context.Context, in *gen.GetByOrgPackageRequest, opts ...grpc.CallOption) (*gen.GetByOrgPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetByOrgPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgPackageRequest, ...grpc.CallOption) (*gen.GetByOrgPackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgPackageRequest, ...grpc.CallOption) *gen.GetByOrgPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByOrgPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetails provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) GetDetails(ctx context.Context, in *gen.GetPackageRequest, opts ...grpc.CallOption) (*gen.GetPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetPackageRequest, ...grpc.CallOption) (*gen.GetPackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetPackageRequest, ...grpc.CallOption) *gen.GetPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *PackagesServiceClient) Update(ctx context.Context, in *gen.UpdatePackageRequest, opts ...grpc.CallOption) (*gen.UpdatePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdatePackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageRequest, ...grpc.CallOption) (*gen.UpdatePackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageRequest, ...grpc.CallOption) *gen.UpdatePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdatePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPackagesServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackagesServiceClient creates a new instance of PackagesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackagesServiceClient(t mockConstructorTestingTNewPackagesServiceClient) *PackagesServiceClient {
	mock := &PackagesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
