// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pb "github.com/ukama/ukama/systems/data-plan/package/pb"
)

// PackagesServiceServer is an autogenerated mock type for the PackagesServiceServer type
type PackagesServiceServer struct {
	mock.Mock
}

// CreatePackage provides a mock function with given fields: _a0, _a1
func (_m *PackagesServiceServer) CreatePackage(_a0 context.Context, _a1 *pb.CreatePackageRequest) (*pb.CreatePackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.CreatePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreatePackageRequest) *pb.CreatePackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreatePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreatePackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: _a0, _a1
func (_m *PackagesServiceServer) DeletePackage(_a0 context.Context, _a1 *pb.DeletePackageRequest) (*pb.DeletePackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeletePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeletePackageRequest) *pb.DeletePackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeletePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeletePackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: _a0, _a1
func (_m *PackagesServiceServer) GetPackage(_a0 context.Context, _a1 *pb.GetPackageRequest) (*pb.GetPackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetPackageRequest) *pb.GetPackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetPackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackages provides a mock function with given fields: _a0, _a1
func (_m *PackagesServiceServer) GetPackages(_a0 context.Context, _a1 *pb.GetPackagesRequest) (*pb.GetPackagesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetPackagesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetPackagesRequest) *pb.GetPackagesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetPackagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetPackagesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: _a0, _a1
func (_m *PackagesServiceServer) UpdatePackage(_a0 context.Context, _a1 *pb.UpdatePackageRequest) (*pb.UpdatePackageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.UpdatePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdatePackageRequest) *pb.UpdatePackageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdatePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdatePackageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedPackagesServiceServer provides a mock function with given fields:
func (_m *PackagesServiceServer) mustEmbedUnimplementedPackagesServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewPackagesServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackagesServiceServer creates a new instance of PackagesServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackagesServiceServer(t mockConstructorTestingTNewPackagesServiceServer) *PackagesServiceServer {
	mock := &PackagesServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
