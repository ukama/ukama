// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/package/pb/gen"
)

// EventNotificationServiceServer is an autogenerated mock type for the EventNotificationServiceServer type
type EventNotificationServiceServer struct {
	mock.Mock
}

// EventNotification provides a mock function with given fields: _a0, _a1
func (_m *EventNotificationServiceServer) EventNotification(_a0 context.Context, _a1 *gen.Event) (*gen.EventResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.EventResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Event) *gen.EventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.EventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.Event) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEventNotificationServiceServer provides a mock function with given fields:
func (_m *EventNotificationServiceServer) mustEmbedUnimplementedEventNotificationServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewEventNotificationServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventNotificationServiceServer creates a new instance of EventNotificationServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventNotificationServiceServer(t mockConstructorTestingTNewEventNotificationServiceServer) *EventNotificationServiceServer {
	mock := &EventNotificationServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
