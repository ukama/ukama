// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/data-plan/rate/pb/gen"
)

// RateService is an autogenerated mock type for the RateService type
type RateService struct {
	mock.Mock
}

// GetRateById provides a mock function with given fields: req
func (_m *RateService) GetRateById(req *gen.GetRateByIdRequest) (*gen.GetRateByIdResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetRateByIdResponse
	if rf, ok := ret.Get(0).(func(*gen.GetRateByIdRequest) *gen.GetRateByIdResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRateByIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.GetRateByIdRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRates provides a mock function with given fields: req
func (_m *RateService) GetRates(req *gen.GetRatesRequest) (*gen.GetRatesResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetRatesResponse
	if rf, ok := ret.Get(0).(func(*gen.GetRatesRequest) *gen.GetRatesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.GetRatesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRateService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRateService creates a new instance of RateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRateService(t mockConstructorTestingTNewRateService) *RateService {
	mock := &RateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
