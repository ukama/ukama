// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/data-plan/package/pkg/db"
)

// PackageRepo is an autogenerated mock type for the PackageRepo type
type PackageRepo struct {
	mock.Mock
}

// CreatePackage provides a mock function with given fields: _a0
func (_m *PackageRepo) CreatePackage(_a0 db.Package) (db.Package, error) {
	ret := _m.Called(_a0)

	var r0 db.Package
	if rf, ok := ret.Get(0).(func(db.Package) db.Package); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Package)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(db.Package) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: Id
func (_m *PackageRepo) DeletePackage(Id uint64) (*db.Package, error) {
	ret := _m.Called(Id)

	var r0 *db.Package
	if rf, ok := ret.Get(0).(func(uint64) *db.Package); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: Id
func (_m *PackageRepo) GetPackage(Id uint64) (*db.Package, error) {
	ret := _m.Called(Id)

	var r0 *db.Package
	if rf, ok := ret.Get(0).(func(uint64) *db.Package); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackages provides a mock function with given fields:
func (_m *PackageRepo) GetPackages() ([]db.Package, error) {
	ret := _m.Called()

	var r0 []db.Package
	if rf, ok := ret.Get(0).(func() []db.Package); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: pkg
func (_m *PackageRepo) UpdatePackage(pkg db.Package) (*db.Package, error) {
	ret := _m.Called(pkg)

	var r0 *db.Package
	if rf, ok := ret.Get(0).(func(db.Package) *db.Package); ok {
		r0 = rf(pkg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(db.Package) error); ok {
		r1 = rf(pkg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPackageRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackageRepo creates a new instance of PackageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackageRepo(t mockConstructorTestingTNewPackageRepo) *PackageRepo {
	mock := &PackageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
