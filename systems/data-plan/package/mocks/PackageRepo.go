// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/data-plan/package/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// PackageRepo is an autogenerated mock type for the PackageRepo type
type PackageRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: _package
func (_m *PackageRepo) Add(_package *db.Package) error {
	ret := _m.Called(_package)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Package) error); ok {
		r0 = rf(_package)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *PackageRepo) Delete(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *PackageRepo) Get(_a0 uuid.UUID) (*db.Package, error) {
	ret := _m.Called(_a0)

	var r0 *db.Package
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Package); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: orgID
func (_m *PackageRepo) GetByOrg(orgID uuid.UUID) ([]db.Package, error) {
	ret := _m.Called(orgID)

	var r0 []db.Package
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Package); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, pkg
func (_m *PackageRepo) Update(_a0 uuid.UUID, pkg db.Package) (*db.Package, error) {
	ret := _m.Called(_a0, pkg)

	var r0 *db.Package
	if rf, ok := ret.Get(0).(func(uuid.UUID, db.Package) *db.Package); ok {
		r0 = rf(_a0, pkg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, db.Package) error); ok {
		r1 = rf(_a0, pkg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPackageRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackageRepo creates a new instance of PackageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackageRepo(t mockConstructorTestingTNewPackageRepo) *PackageRepo {
	mock := &PackageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
