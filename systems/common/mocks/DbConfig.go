// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	sql "github.com/ukama/ukama/systems/common/sql"
)

// DbConfig is an autogenerated mock type for the DbConfig type
type DbConfig struct {
	mock.Mock
}

// ChangeDbName provides a mock function with given fields: name
func (_m *DbConfig) ChangeDbName(name string) sql.DbConfig {
	ret := _m.Called(name)

	var r0 sql.DbConfig
	if rf, ok := ret.Get(0).(func(string) sql.DbConfig); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DbConfig)
		}
	}

	return r0
}

// GetConnString provides a mock function with given fields:
func (_m *DbConfig) GetConnString() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDbName provides a mock function with given fields:
func (_m *DbConfig) GetDbName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewDbConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbConfig creates a new instance of DbConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbConfig(t mockConstructorTestingTNewDbConfig) *DbConfig {
	mock := &DbConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
