// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	google_golang_orggrpc "google.golang.org/grpc"

	health "github.com/ukama/ukama/systems/common/pb/gen/health"

	mock "github.com/stretchr/testify/mock"
)

// HealthCheckerInterface is an autogenerated mock type for the HealthCheckerInterface type
type HealthCheckerInterface struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, request
func (_m *HealthCheckerInterface) Check(ctx context.Context, request *health.HealthCheckRequest) (*health.HealthCheckResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *health.HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.HealthCheckRequest) *health.HealthCheckResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.HealthCheckRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: request, server
func (_m *HealthCheckerInterface) Watch(request *health.HealthCheckRequest, server google_golang_orggrpc.ServerStreamingServer[health.HealthCheckResponse]) error {
	ret := _m.Called(request, server)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*health.HealthCheckRequest, google_golang_orggrpc.ServerStreamingServer[health.HealthCheckResponse]) error); ok {
		r0 = rf(request, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHealthCheckerInterface creates a new instance of HealthCheckerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthCheckerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthCheckerInterface {
	mock := &HealthCheckerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
