// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"

	msgbus "github.com/ukama/ukama/systems/common/msgbus"
)

// IMsgBus is an autogenerated mock type for the IMsgBus type
type IMsgBus struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IMsgBus) Close() {
	_m.Called()
}

// ConnectToBroker provides a mock function with given fields: connectionString
func (_m *IMsgBus) ConnectToBroker(connectionString string) {
	_m.Called(connectionString)
}

// Publish provides a mock function with given fields: body, queueName, exchangeName, routingKey, exchangeType
func (_m *IMsgBus) Publish(body []byte, queueName string, exchangeName string, routingKey msgbus.RoutingKey, exchangeType string) error {
	ret := _m.Called(body, queueName, exchangeName, routingKey, exchangeType)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string, msgbus.RoutingKey, string) error); ok {
		r0 = rf(body, queueName, exchangeName, routingKey, exchangeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishOnQueue provides a mock function with given fields: body, queueName, initQueue
func (_m *IMsgBus) PublishOnQueue(body []byte, queueName string, initQueue bool) error {
	ret := _m.Called(body, queueName, initQueue)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, bool) error); ok {
		r0 = rf(body, queueName, initQueue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: queueName, exchangeName, exchangeType, routingKeys, consumerName, handlerFunc
func (_m *IMsgBus) Subscribe(queueName string, exchangeName string, exchangeType string, routingKeys []msgbus.RoutingKey, consumerName string, handlerFunc func(amqp.Delivery, chan<- bool)) error {
	ret := _m.Called(queueName, exchangeName, exchangeType, routingKeys, consumerName, handlerFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []msgbus.RoutingKey, string, func(amqp.Delivery, chan<- bool)) error); ok {
		r0 = rf(queueName, exchangeName, exchangeType, routingKeys, consumerName, handlerFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToQueue provides a mock function with given fields: queueName, consumerName, handlerFunc
func (_m *IMsgBus) SubscribeToQueue(queueName string, consumerName string, handlerFunc func(amqp.Delivery, chan<- bool)) error {
	ret := _m.Called(queueName, consumerName, handlerFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(amqp.Delivery, chan<- bool)) error); ok {
		r0 = rf(queueName, consumerName, handlerFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIMsgBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMsgBus creates a new instance of IMsgBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMsgBus(t mockConstructorTestingTNewIMsgBus) *IMsgBus {
	mock := &IMsgBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
