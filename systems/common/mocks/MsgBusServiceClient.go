// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MsgBusServiceClient is an autogenerated mock type for the MsgBusServiceClient type
type MsgBusServiceClient struct {
	mock.Mock
}

// PublishRequest provides a mock function with given fields: route, msg
func (_m *MsgBusServiceClient) PublishRequest(route string, msg protoreflect.ProtoMessage) error {
	ret := _m.Called(route, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, protoreflect.ProtoMessage) error); ok {
		r0 = rf(route, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields:
func (_m *MsgBusServiceClient) Register() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MsgBusServiceClient) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MsgBusServiceClient) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMsgBusServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgBusServiceClient creates a new instance of MsgBusServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgBusServiceClient(t mockConstructorTestingTNewMsgBusServiceClient) *MsgBusServiceClient {
	mock := &MsgBusServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
