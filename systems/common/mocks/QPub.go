// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	proto "google.golang.org/protobuf/proto"
)

// QPub is an autogenerated mock type for the QPub type
type QPub struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *QPub) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: payload, routingKey
func (_m *QPub) Publish(payload any, routingKey string) error {
	ret := _m.Called(payload, routingKey)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any, string) error); ok {
		r0 = rf(payload, routingKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishProto provides a mock function with given fields: payload, routingKey
func (_m *QPub) PublishProto(payload proto.Message, routingKey string) error {
	ret := _m.Called(payload, routingKey)

	if len(ret) == 0 {
		panic("no return value specified for PublishProto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.Message, string) error); ok {
		r0 = rf(payload, routingKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishToQueue provides a mock function with given fields: queueName, payload
func (_m *QPub) PublishToQueue(queueName string, payload any) error {
	ret := _m.Called(queueName, payload)

	if len(ret) == 0 {
		panic("no return value specified for PublishToQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, any) error); ok {
		r0 = rf(queueName, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQPub creates a new instance of QPub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQPub(t interface {
	mock.TestingT
	Cleanup(func())
}) *QPub {
	mock := &QPub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
