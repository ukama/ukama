// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	msgbus "github.com/ukama/ukama/systems/common/msgbus"
)

// MsgBusShovelProvider is an autogenerated mock type for the MsgBusShovelProvider type
type MsgBusShovelProvider struct {
	mock.Mock
}

// AddShovel provides a mock function with given fields: name, s
func (_m *MsgBusShovelProvider) AddShovel(name string, s *msgbus.Shovel) error {
	ret := _m.Called(name, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *msgbus.Shovel) error); ok {
		r0 = rf(name, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateShovel provides a mock function with given fields: name, s
func (_m *MsgBusShovelProvider) CreateShovel(name string, s *msgbus.Shovel) error {
	ret := _m.Called(name, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *msgbus.Shovel) error); ok {
		r0 = rf(name, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShovel provides a mock function with given fields: name
func (_m *MsgBusShovelProvider) GetShovel(name string) (*msgbus.Shovel, error) {
	ret := _m.Called(name)

	var r0 *msgbus.Shovel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*msgbus.Shovel, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *msgbus.Shovel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msgbus.Shovel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveShovel provides a mock function with given fields: name
func (_m *MsgBusShovelProvider) RemoveShovel(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestartShovel provides a mock function with given fields: name
func (_m *MsgBusShovelProvider) RestartShovel(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMsgBusShovelProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgBusShovelProvider creates a new instance of MsgBusShovelProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgBusShovelProvider(t mockConstructorTestingTNewMsgBusShovelProvider) *MsgBusShovelProvider {
	mock := &MsgBusShovelProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
