// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/ukama/ukama/systems/common/rest/client"
)

// PackageClient is an autogenerated mock type for the PackageClient type
type PackageClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: req
func (_m *PackageClient) Add(req client.AddPackageRequest) (*client.PackageInfo, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *client.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(client.AddPackageRequest) (*client.PackageInfo, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(client.AddPackageRequest) *client.PackageInfo); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PackageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(client.AddPackageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: Id
func (_m *PackageClient) Get(Id string) (*client.PackageInfo, error) {
	ret := _m.Called(Id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *client.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.PackageInfo, error)); ok {
		return rf(Id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.PackageInfo); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PackageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPackageClient creates a new instance of PackageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageClient {
	mock := &PackageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
