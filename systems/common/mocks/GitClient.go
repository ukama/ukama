// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GitClient is an autogenerated mock type for the GitClient type
type GitClient struct {
	mock.Mock
}

// BranchCheckout provides a mock function with given fields: branch
func (_m *GitClient) BranchCheckout(branch string) error {
	ret := _m.Called(branch)

	if len(ret) == 0 {
		panic("no return value specified for BranchCheckout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(branch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloneGitRepo provides a mock function with no fields
func (_m *GitClient) CloneGitRepo() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloneGitRepo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTempDir provides a mock function with no fields
func (_m *GitClient) CreateTempDir() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTempDir")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetFilesPath provides a mock function with given fields: key
func (_m *GitClient) GetFilesPath(key string) ([]string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFilesPath")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFileJSON provides a mock function with given fields: path
func (_m *GitClient) ReadFileJSON(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFileJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFileYML provides a mock function with given fields: path
func (_m *GitClient) ReadFileYML(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFileYML")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTempDir provides a mock function with no fields
func (_m *GitClient) RemoveTempDir() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveTempDir")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetupDir provides a mock function with no fields
func (_m *GitClient) SetupDir() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetupDir")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewGitClient creates a new instance of GitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitClient {
	mock := &GitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
