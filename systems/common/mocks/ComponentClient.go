// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	inventory "github.com/ukama/ukama/systems/common/rest/client/inventory"
)

// ComponentClient is an autogenerated mock type for the ComponentClient type
type ComponentClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: Id
func (_m *ComponentClient) Get(Id string) (*inventory.ComponentInfo, error) {
	ret := _m.Called(Id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *inventory.ComponentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*inventory.ComponentInfo, error)); ok {
		return rf(Id)
	}
	if rf, ok := ret.Get(0).(func(string) *inventory.ComponentInfo); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventory.ComponentInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: Id, UserId, PartNumber, Category
func (_m *ComponentClient) List(Id string, UserId string, PartNumber string, Category string) (*inventory.ListComponent, error) {
	ret := _m.Called(Id, UserId, PartNumber, Category)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *inventory.ListComponent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*inventory.ListComponent, error)); ok {
		return rf(Id, UserId, PartNumber, Category)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *inventory.ListComponent); ok {
		r0 = rf(Id, UserId, PartNumber, Category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventory.ListComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(Id, UserId, PartNumber, Category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComponentClient creates a new instance of ComponentClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentClient {
	mock := &ComponentClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
