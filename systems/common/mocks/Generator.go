// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// Generator is an autogenerated mock type for the Generator type
type Generator struct {
	mock.Mock
}

// NewV1 provides a mock function with given fields:
func (_m *Generator) NewV1() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// NewV2 provides a mock function with given fields: domain
func (_m *Generator) NewV2(domain byte) uuid.UUID {
	ret := _m.Called(domain)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(byte) uuid.UUID); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// NewV3 provides a mock function with given fields: ns, name
func (_m *Generator) NewV3(ns uuid.UUID, name string) uuid.UUID {
	ret := _m.Called(ns, name)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) uuid.UUID); ok {
		r0 = rf(ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// NewV4 provides a mock function with given fields:
func (_m *Generator) NewV4() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// NewV5 provides a mock function with given fields: ns, name
func (_m *Generator) NewV5(ns uuid.UUID, name string) uuid.UUID {
	ret := _m.Called(ns, name)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) uuid.UUID); ok {
		r0 = rf(ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

type mockConstructorTestingTNewGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewGenerator creates a new instance of Generator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGenerator(t mockConstructorTestingTNewGenerator) *Generator {
	mock := &Generator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
