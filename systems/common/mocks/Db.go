// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	testing "testing"
)

// Db is an autogenerated mock type for the Db type
type Db struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *Db) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteInTransaction provides a mock function with given fields: dbOperation, nestedFuncs
func (_m *Db) ExecuteInTransaction(dbOperation func(*gorm.DB) *gorm.DB, nestedFuncs ...func() error) error {
	_va := make([]interface{}, len(nestedFuncs))
	for _i := range nestedFuncs {
		_va[_i] = nestedFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dbOperation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) *gorm.DB, ...func() error) error); ok {
		r0 = rf(dbOperation, nestedFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteInTransaction2 provides a mock function with given fields: dbOperation, nestedFuncs
func (_m *Db) ExecuteInTransaction2(dbOperation func(*gorm.DB) *gorm.DB, nestedFuncs ...func(*gorm.DB) error) error {
	_va := make([]interface{}, len(nestedFuncs))
	for _i := range nestedFuncs {
		_va[_i] = nestedFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dbOperation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) *gorm.DB, ...func(*gorm.DB) error) error); ok {
		r0 = rf(dbOperation, nestedFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGormDb provides a mock function with given fields:
func (_m *Db) GetGormDb() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Init provides a mock function with given fields: model
func (_m *Db) Init(model ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, model...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(model...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDb creates a new instance of Db. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDb(t testing.TB) *Db {
	mock := &Db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
