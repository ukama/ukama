// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"

	msgbus "github.com/ukama/ukama/systems/common/msgbus"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Publisher) Close() {
	_m.Called()
}

// DeclareQueue provides a mock function with given fields: queueName, durable
func (_m *Publisher) DeclareQueue(queueName string, durable bool) (*amqp.Queue, error) {
	ret := _m.Called(queueName, durable)

	if len(ret) == 0 {
		panic("no return value specified for DeclareQueue")
	}

	var r0 *amqp.Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*amqp.Queue, error)); ok {
		return rf(queueName, durable)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *amqp.Queue); ok {
		r0 = rf(queueName, durable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp.Queue)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(queueName, durable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsClosed provides a mock function with no fields
func (_m *Publisher) IsClosed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsClosed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Publish provides a mock function with given fields: body, queueName, exchangeName, routingKey, exchangeType
func (_m *Publisher) Publish(body []byte, queueName string, exchangeName string, routingKey msgbus.RoutingKey, exchangeType string) error {
	ret := _m.Called(body, queueName, exchangeName, routingKey, exchangeType)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string, msgbus.RoutingKey, string) error); ok {
		r0 = rf(body, queueName, exchangeName, routingKey, exchangeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishOnExchange provides a mock function with given fields: exchange, routingKey, body
func (_m *Publisher) PublishOnExchange(exchange string, routingKey string, body interface{}) error {
	ret := _m.Called(exchange, routingKey, body)

	if len(ret) == 0 {
		panic("no return value specified for PublishOnExchange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(exchange, routingKey, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishOnQueue provides a mock function with given fields: msg, queueName, initQueue
func (_m *Publisher) PublishOnQueue(msg []byte, queueName string, initQueue bool) error {
	ret := _m.Called(msg, queueName, initQueue)

	if len(ret) == 0 {
		panic("no return value specified for PublishOnQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, bool) error); ok {
		r0 = rf(msg, queueName, initQueue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
