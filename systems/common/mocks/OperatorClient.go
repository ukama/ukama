// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	operator "github.com/ukama/ukama/systems/common/rest/client/operator"
)

// OperatorClient is an autogenerated mock type for the OperatorClient type
type OperatorClient struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: iccid
func (_m *OperatorClient) ActivateSim(iccid string) error {
	ret := _m.Called(iccid)

	if len(ret) == 0 {
		panic("no return value specified for ActivateSim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindSim provides a mock function with given fields: iccid
func (_m *OperatorClient) BindSim(iccid string) (*operator.OperatorSimInfo, error) {
	ret := _m.Called(iccid)

	if len(ret) == 0 {
		panic("no return value specified for BindSim")
	}

	var r0 *operator.OperatorSimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*operator.OperatorSimInfo, error)); ok {
		return rf(iccid)
	}
	if rf, ok := ret.Get(0).(func(string) *operator.OperatorSimInfo); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operator.OperatorSimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateSim provides a mock function with given fields: iccid
func (_m *OperatorClient) DeactivateSim(iccid string) error {
	ret := _m.Called(iccid)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateSim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSimInfo provides a mock function with given fields: iccid
func (_m *OperatorClient) GetSimInfo(iccid string) (*operator.OperatorSimInfo, error) {
	ret := _m.Called(iccid)

	if len(ret) == 0 {
		panic("no return value specified for GetSimInfo")
	}

	var r0 *operator.OperatorSimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*operator.OperatorSimInfo, error)); ok {
		return rf(iccid)
	}
	if rf, ok := ret.Get(0).(func(string) *operator.OperatorSimInfo); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operator.OperatorSimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsages provides a mock function with given fields: iccid, cdrType, from, to
func (_m *OperatorClient) GetUsages(iccid string, cdrType string, from string, to string) (map[string]interface{}, map[string]interface{}, error) {
	ret := _m.Called(iccid, cdrType, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetUsages")
	}

	var r0 map[string]interface{}
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (map[string]interface{}, map[string]interface{}, error)); ok {
		return rf(iccid, cdrType, from, to)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(iccid, cdrType, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) map[string]interface{}); ok {
		r1 = rf(iccid, cdrType, from, to)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string, string, string, string) error); ok {
		r2 = rf(iccid, cdrType, from, to)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TerminateSim provides a mock function with given fields: iccid
func (_m *OperatorClient) TerminateSim(iccid string) error {
	ret := _m.Called(iccid)

	if len(ret) == 0 {
		panic("no return value specified for TerminateSim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOperatorClient creates a new instance of OperatorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperatorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperatorClient {
	mock := &OperatorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
