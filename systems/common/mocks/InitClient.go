// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	initclient "github.com/ukama/ukama/systems/common/rest/client/initclient"
)

// InitClient is an autogenerated mock type for the InitClient type
type InitClient struct {
	mock.Mock
}

// GetSystem provides a mock function with given fields: org, system
func (_m *InitClient) GetSystem(org string, system string) (*initclient.SystemIPInfo, error) {
	ret := _m.Called(org, system)

	if len(ret) == 0 {
		panic("no return value specified for GetSystem")
	}

	var r0 *initclient.SystemIPInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*initclient.SystemIPInfo, error)); ok {
		return rf(org, system)
	}
	if rf, ok := ret.Get(0).(func(string, string) *initclient.SystemIPInfo); ok {
		r0 = rf(org, system)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*initclient.SystemIPInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(org, system)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemFromHost provides a mock function with given fields: host, org
func (_m *InitClient) GetSystemFromHost(host string, org *string) (*initclient.SystemIPInfo, error) {
	ret := _m.Called(host, org)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemFromHost")
	}

	var r0 *initclient.SystemIPInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string) (*initclient.SystemIPInfo, error)); ok {
		return rf(host, org)
	}
	if rf, ok := ret.Get(0).(func(string, *string) *initclient.SystemIPInfo); ok {
		r0 = rf(host, org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*initclient.SystemIPInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string) error); ok {
		r1 = rf(host, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInitClient creates a new instance of InitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInitClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *InitClient {
	mock := &InitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
