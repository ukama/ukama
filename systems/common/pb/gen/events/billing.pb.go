//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: events/billing.proto

package events

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId   string     `protobuf:"bytes,2,opt,name=ownerId,json=owner_id,proto3" json:"ownerId,omitempty"`
	OwnerType string     `protobuf:"bytes,3,opt,name=ownerType,json=owner_type,proto3" json:"ownerType,omitempty"`
	NetworkId string     `protobuf:"bytes,4,opt,name=networkId,json=network_Id,proto3" json:"networkId,omitempty"`
	Period    string     `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	Type      string     `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	RawReport *RawReport `protobuf:"bytes,7,opt,name=rawReport,json=raw_report,proto3" json:"rawReport,omitempty"`
	IsPaid    bool       `protobuf:"varint,8,opt,name=isPaid,json=is_paid,proto3" json:"isPaid,omitempty"`
	CreatedAt string     `protobuf:"bytes,9,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	mi := &file_events_billing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_events_billing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_events_billing_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Report) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Report) GetOwnerType() string {
	if x != nil {
		return x.OwnerType
	}
	return ""
}

func (x *Report) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Report) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *Report) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Report) GetRawReport() *RawReport {
	if x != nil {
		return x.RawReport
	}
	return nil
}

func (x *Report) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

func (x *Report) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type RawReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuingDate                       string          `protobuf:"bytes,1,opt,name=issuingDate,json=issuing_date,proto3" json:"issuingDate,omitempty"`
	PaymentDueDate                    string          `protobuf:"bytes,2,opt,name=paymentDueDate,json=payment_due_date,proto3" json:"paymentDueDate,omitempty"`
	PaymentOverdue                    bool            `protobuf:"varint,3,opt,name=paymentOverdue,json=payment_overdue,proto3" json:"paymentOverdue,omitempty"`
	InvoiceType                       string          `protobuf:"bytes,4,opt,name=invoiceType,json=invoice_type,proto3" json:"invoiceType,omitempty"`
	Status                            string          `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	PaymentStatus                     string          `protobuf:"bytes,6,opt,name=paymentStatus,json=payment_status,proto3" json:"paymentStatus,omitempty"`
	FeesAmountCents                   int64           `protobuf:"varint,7,opt,name=feesAmountCents,json=fees_amount_cents,proto3" json:"feesAmountCents,omitempty"`
	TaxesAmountCents                  int64           `protobuf:"varint,8,opt,name=taxesAmountCents,json=taxes_amount_cents,proto3" json:"taxesAmountCents,omitempty"`
	SubTotalExcludingTaxesAmountCents int64           `protobuf:"varint,9,opt,name=subTotalExcludingTaxesAmountCents,json=sub_total_excluding_taxes_amount_cents,proto3" json:"subTotalExcludingTaxesAmountCents,omitempty"`
	SubTotalIncludingTaxesAmountCents int64           `protobuf:"varint,10,opt,name=subTotalIncludingTaxesAmountCents,json=sub_total_including_taxes_amount_cents,proto3" json:"subTotalIncludingTaxesAmountCents,omitempty"`
	VatAmountCents                    int64           `protobuf:"varint,11,opt,name=vatAmountCents,json=vat_amount_cents,proto3" json:"vatAmountCents,omitempty"`
	VatAmountCurrency                 string          `protobuf:"bytes,12,opt,name=vatAmountCurrency,json=vat_amount_currency,proto3" json:"vatAmountCurrency,omitempty"`
	TotalAmountCents                  int64           `protobuf:"varint,13,opt,name=totalAmountCents,json=total_amount_cents,proto3" json:"totalAmountCents,omitempty"`
	Currency                          string          `protobuf:"bytes,14,opt,name=currency,proto3" json:"currency,omitempty"`
	FileURL                           string          `protobuf:"bytes,15,opt,name=fileURL,json=file_url,proto3" json:"fileURL,omitempty"`
	Customer                          *Customer       `protobuf:"bytes,16,opt,name=customer,proto3" json:"customer,omitempty"`
	Subscriptions                     []*Subscription `protobuf:"bytes,17,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Fees                              []*Fee          `protobuf:"bytes,18,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (x *RawReport) Reset() {
	*x = RawReport{}
	mi := &file_events_billing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawReport) ProtoMessage() {}

func (x *RawReport) ProtoReflect() protoreflect.Message {
	mi := &file_events_billing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawReport.ProtoReflect.Descriptor instead.
func (*RawReport) Descriptor() ([]byte, []int) {
	return file_events_billing_proto_rawDescGZIP(), []int{1}
}

func (x *RawReport) GetIssuingDate() string {
	if x != nil {
		return x.IssuingDate
	}
	return ""
}

func (x *RawReport) GetPaymentDueDate() string {
	if x != nil {
		return x.PaymentDueDate
	}
	return ""
}

func (x *RawReport) GetPaymentOverdue() bool {
	if x != nil {
		return x.PaymentOverdue
	}
	return false
}

func (x *RawReport) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *RawReport) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RawReport) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *RawReport) GetFeesAmountCents() int64 {
	if x != nil {
		return x.FeesAmountCents
	}
	return 0
}

func (x *RawReport) GetTaxesAmountCents() int64 {
	if x != nil {
		return x.TaxesAmountCents
	}
	return 0
}

func (x *RawReport) GetSubTotalExcludingTaxesAmountCents() int64 {
	if x != nil {
		return x.SubTotalExcludingTaxesAmountCents
	}
	return 0
}

func (x *RawReport) GetSubTotalIncludingTaxesAmountCents() int64 {
	if x != nil {
		return x.SubTotalIncludingTaxesAmountCents
	}
	return 0
}

func (x *RawReport) GetVatAmountCents() int64 {
	if x != nil {
		return x.VatAmountCents
	}
	return 0
}

func (x *RawReport) GetVatAmountCurrency() string {
	if x != nil {
		return x.VatAmountCurrency
	}
	return ""
}

func (x *RawReport) GetTotalAmountCents() int64 {
	if x != nil {
		return x.TotalAmountCents
	}
	return 0
}

func (x *RawReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RawReport) GetFileURL() string {
	if x != nil {
		return x.FileURL
	}
	return ""
}

func (x *RawReport) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *RawReport) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *RawReport) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalCustomerId string `protobuf:"bytes,1,opt,name=externalCustomerId,json=external_customer_id,proto3" json:"externalCustomerId,omitempty"`
	ExternalId         string `protobuf:"bytes,2,opt,name=externalId,json=external_id,proto3" json:"externalId,omitempty"`
	PlanCode           string `protobuf:"bytes,3,opt,name=planCode,json=plan_code,proto3" json:"planCode,omitempty"`
	Name               string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Status             string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt          string `protobuf:"bytes,6,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
	StartedAt          string `protobuf:"bytes,7,opt,name=startedAt,json=started_at,proto3" json:"startedAt,omitempty"`
	CanceldAt          string `protobuf:"bytes,8,opt,name=canceldAt,json=canceled_at,proto3" json:"canceldAt,omitempty"`
	TerminatedAt       string `protobuf:"bytes,9,opt,name=terminatedAt,json=terminated_at,proto3" json:"terminatedAt,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_events_billing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_events_billing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_events_billing_proto_rawDescGZIP(), []int{2}
}

func (x *Subscription) GetExternalCustomerId() string {
	if x != nil {
		return x.ExternalCustomerId
	}
	return ""
}

func (x *Subscription) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Subscription) GetPlanCode() string {
	if x != nil {
		return x.PlanCode
	}
	return ""
}

func (x *Subscription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subscription) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Subscription) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Subscription) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *Subscription) GetCanceldAt() string {
	if x != nil {
		return x.CanceldAt
	}
	return ""
}

func (x *Subscription) GetTerminatedAt() string {
	if x != nil {
		return x.TerminatedAt
	}
	return ""
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId   string  `protobuf:"bytes,1,opt,name=externalId,json=external_id,proto3" json:"externalId,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email        string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AddressLine1 string  `protobuf:"bytes,4,opt,name=AddressLine1,json=address_line1,proto3" json:"AddressLine1,omitempty"`
	LegalName    string  `protobuf:"bytes,5,opt,name=legalName,json=legal_name,proto3" json:"legalName,omitempty"`
	LegalNumber  string  `protobuf:"bytes,6,opt,name=legalNumber,json=legal_number,proto3" json:"legalNumber,omitempty"`
	Phone        string  `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Currency     string  `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	Timezone     string  `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	VatRate      float64 `protobuf:"fixed64,10,opt,name=vatRate,json=vat_rate,proto3" json:"vatRate,omitempty"`
	CreatedAt    string  `protobuf:"bytes,11,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	mi := &file_events_billing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_events_billing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_events_billing_proto_rawDescGZIP(), []int{3}
}

func (x *Customer) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Customer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Customer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Customer) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *Customer) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *Customer) GetLegalNumber() string {
	if x != nil {
		return x.LegalNumber
	}
	return ""
}

func (x *Customer) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Customer) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Customer) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Customer) GetVatRate() float64 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

func (x *Customer) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountCents         int64    `protobuf:"varint,1,opt,name=amountCents,json=amount_cents,proto3" json:"amountCents,omitempty"`
	AmountCurrency      string   `protobuf:"bytes,2,opt,name=amountCurrency,json=amount_currency,proto3" json:"amountCurrency,omitempty"`
	TaxesAmountCents    int64    `protobuf:"varint,3,opt,name=taxesAmountCents,json=taxes_amount_cents,proto3" json:"taxesAmountCents,omitempty"`
	TaxesPreciseAmount  string   `protobuf:"bytes,4,opt,name=taxesPreciseAmount,json=taxes_precise_amount,proto3" json:"taxesPreciseAmount,omitempty"`
	TotalAmountCents    int64    `protobuf:"varint,5,opt,name=totalAmountCents,json=total_amount_cents,proto3" json:"totalAmountCents,omitempty"`
	TotalAmountCurrency string   `protobuf:"bytes,6,opt,name=totalAmountCurrency,json=total_amount_currency,proto3" json:"totalAmountCurrency,omitempty"`
	EventsCount         int64    `protobuf:"varint,7,opt,name=eventsCount,json=events_count,proto3" json:"eventsCount,omitempty"`
	Units               float64  `protobuf:"fixed64,8,opt,name=units,proto3" json:"units,omitempty"`
	Item                *FeeItem `protobuf:"bytes,9,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	mi := &file_events_billing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_events_billing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_events_billing_proto_rawDescGZIP(), []int{4}
}

func (x *Fee) GetAmountCents() int64 {
	if x != nil {
		return x.AmountCents
	}
	return 0
}

func (x *Fee) GetAmountCurrency() string {
	if x != nil {
		return x.AmountCurrency
	}
	return ""
}

func (x *Fee) GetTaxesAmountCents() int64 {
	if x != nil {
		return x.TaxesAmountCents
	}
	return 0
}

func (x *Fee) GetTaxesPreciseAmount() string {
	if x != nil {
		return x.TaxesPreciseAmount
	}
	return ""
}

func (x *Fee) GetTotalAmountCents() int64 {
	if x != nil {
		return x.TotalAmountCents
	}
	return 0
}

func (x *Fee) GetTotalAmountCurrency() string {
	if x != nil {
		return x.TotalAmountCurrency
	}
	return ""
}

func (x *Fee) GetEventsCount() int64 {
	if x != nil {
		return x.EventsCount
	}
	return 0
}

func (x *Fee) GetUnits() float64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Fee) GetItem() *FeeItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type FeeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FeeItem) Reset() {
	*x = FeeItem{}
	mi := &file_events_billing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeItem) ProtoMessage() {}

func (x *FeeItem) ProtoReflect() protoreflect.Message {
	mi := &file_events_billing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeItem.ProtoReflect.Descriptor instead.
func (*FeeItem) Descriptor() ([]byte, []int) {
	return file_events_billing_proto_rawDescGZIP(), []int{5}
}

func (x *FeeItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeeItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FeeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_events_billing_proto protoreflect.FileDescriptor

var file_events_billing_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x02, 0x0a, 0x06, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a,
	0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x69, 0x73,
	0x50, 0x61, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0xc8, 0x06, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x66, 0x65, 0x65, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x65, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x74, 0x61, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x51, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x26, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x65, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x26, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x76, 0x61, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x76, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76,
	0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22, 0xad, 0x02,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xc4, 0x02,
	0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x61,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x65,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x74, 0x61, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x74, 0x61, 0x78, 0x65, 0x73, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x78, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0x45, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_billing_proto_rawDescOnce sync.Once
	file_events_billing_proto_rawDescData = file_events_billing_proto_rawDesc
)

func file_events_billing_proto_rawDescGZIP() []byte {
	file_events_billing_proto_rawDescOnce.Do(func() {
		file_events_billing_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_billing_proto_rawDescData)
	})
	return file_events_billing_proto_rawDescData
}

var file_events_billing_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_events_billing_proto_goTypes = []any{
	(*Report)(nil),       // 0: ukama.events.v1.Report
	(*RawReport)(nil),    // 1: ukama.events.v1.RawReport
	(*Subscription)(nil), // 2: ukama.events.v1.Subscription
	(*Customer)(nil),     // 3: ukama.events.v1.Customer
	(*Fee)(nil),          // 4: ukama.events.v1.Fee
	(*FeeItem)(nil),      // 5: ukama.events.v1.FeeItem
}
var file_events_billing_proto_depIdxs = []int32{
	1, // 0: ukama.events.v1.Report.rawReport:type_name -> ukama.events.v1.RawReport
	3, // 1: ukama.events.v1.RawReport.customer:type_name -> ukama.events.v1.Customer
	2, // 2: ukama.events.v1.RawReport.subscriptions:type_name -> ukama.events.v1.Subscription
	4, // 3: ukama.events.v1.RawReport.fees:type_name -> ukama.events.v1.Fee
	5, // 4: ukama.events.v1.Fee.item:type_name -> ukama.events.v1.FeeItem
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_events_billing_proto_init() }
func file_events_billing_proto_init() {
	if File_events_billing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_billing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_events_billing_proto_goTypes,
		DependencyIndexes: file_events_billing_proto_depIdxs,
		MessageInfos:      file_events_billing_proto_msgTypes,
	}.Build()
	File_events_billing_proto = out.File
	file_events_billing_proto_rawDesc = nil
	file_events_billing_proto_goTypes = nil
	file_events_billing_proto_depIdxs = nil
}
