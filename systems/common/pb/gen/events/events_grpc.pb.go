// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: events/events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventNotificationService_EventNotification_FullMethodName = "/ukama.events.v1.EventNotificationService/EventNotification"
)

// EventNotificationServiceClient is the client API for EventNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventNotificationServiceClient interface {
	EventNotification(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventNotificationServiceClient(cc grpc.ClientConnInterface) EventNotificationServiceClient {
	return &eventNotificationServiceClient{cc}
}

func (c *eventNotificationServiceClient) EventNotification(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, EventNotificationService_EventNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventNotificationServiceServer is the server API for EventNotificationService service.
// All implementations must embed UnimplementedEventNotificationServiceServer
// for forward compatibility
type EventNotificationServiceServer interface {
	EventNotification(context.Context, *Event) (*EventResponse, error)
	mustEmbedUnimplementedEventNotificationServiceServer()
}

// UnimplementedEventNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventNotificationServiceServer struct {
}

func (UnimplementedEventNotificationServiceServer) EventNotification(context.Context, *Event) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventNotification not implemented")
}
func (UnimplementedEventNotificationServiceServer) mustEmbedUnimplementedEventNotificationServiceServer() {
}

// UnsafeEventNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventNotificationServiceServer will
// result in compilation errors.
type UnsafeEventNotificationServiceServer interface {
	mustEmbedUnimplementedEventNotificationServiceServer()
}

func RegisterEventNotificationServiceServer(s grpc.ServiceRegistrar, srv EventNotificationServiceServer) {
	s.RegisterService(&EventNotificationService_ServiceDesc, srv)
}

func _EventNotificationService_EventNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventNotificationServiceServer).EventNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventNotificationService_EventNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventNotificationServiceServer).EventNotification(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// EventNotificationService_ServiceDesc is the grpc.ServiceDesc for EventNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.events.v1.EventNotificationService",
	HandlerType: (*EventNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventNotification",
			Handler:    _EventNotificationService_EventNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events/events.proto",
}
