//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: exporter.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExporterService_Dummy_FullMethodName = "/ukama.metrics.exporter.v1.ExporterService/Dummy"
)

// ExporterServiceClient is the client API for ExporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExporterServiceClient interface {
	Dummy(ctx context.Context, in *DummyParameter, opts ...grpc.CallOption) (*DummyParameter, error)
}

type exporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExporterServiceClient(cc grpc.ClientConnInterface) ExporterServiceClient {
	return &exporterServiceClient{cc}
}

func (c *exporterServiceClient) Dummy(ctx context.Context, in *DummyParameter, opts ...grpc.CallOption) (*DummyParameter, error) {
	out := new(DummyParameter)
	err := c.cc.Invoke(ctx, ExporterService_Dummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExporterServiceServer is the server API for ExporterService service.
// All implementations must embed UnimplementedExporterServiceServer
// for forward compatibility
type ExporterServiceServer interface {
	Dummy(context.Context, *DummyParameter) (*DummyParameter, error)
	mustEmbedUnimplementedExporterServiceServer()
}

// UnimplementedExporterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExporterServiceServer struct {
}

func (UnimplementedExporterServiceServer) Dummy(context.Context, *DummyParameter) (*DummyParameter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dummy not implemented")
}
func (UnimplementedExporterServiceServer) mustEmbedUnimplementedExporterServiceServer() {}

// UnsafeExporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExporterServiceServer will
// result in compilation errors.
type UnsafeExporterServiceServer interface {
	mustEmbedUnimplementedExporterServiceServer()
}

func RegisterExporterServiceServer(s grpc.ServiceRegistrar, srv ExporterServiceServer) {
	s.RegisterService(&ExporterService_ServiceDesc, srv)
}

func _ExporterService_Dummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServiceServer).Dummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExporterService_Dummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServiceServer).Dummy(ctx, req.(*DummyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

// ExporterService_ServiceDesc is the grpc.ServiceDesc for ExporterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExporterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.metrics.exporter.v1.ExporterService",
	HandlerType: (*ExporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dummy",
			Handler:    _ExporterService_Dummy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exporter.proto",
}
