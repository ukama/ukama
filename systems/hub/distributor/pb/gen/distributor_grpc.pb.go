//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: distributor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkerService_CreateChunk_FullMethodName = "/ukama.hub.distributor.v1.ChunkerService/CreateChunk"
)

// ChunkerServiceClient is the client API for ChunkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkerServiceClient interface {
	CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error)
}

type chunkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkerServiceClient(cc grpc.ClientConnInterface) ChunkerServiceClient {
	return &chunkerServiceClient{cc}
}

func (c *chunkerServiceClient) CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChunkResponse)
	err := c.cc.Invoke(ctx, ChunkerService_CreateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkerServiceServer is the server API for ChunkerService service.
// All implementations must embed UnimplementedChunkerServiceServer
// for forward compatibility.
type ChunkerServiceServer interface {
	CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error)
	mustEmbedUnimplementedChunkerServiceServer()
}

// UnimplementedChunkerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkerServiceServer struct{}

func (UnimplementedChunkerServiceServer) CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunk not implemented")
}
func (UnimplementedChunkerServiceServer) mustEmbedUnimplementedChunkerServiceServer() {}
func (UnimplementedChunkerServiceServer) testEmbeddedByValue()                        {}

// UnsafeChunkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkerServiceServer will
// result in compilation errors.
type UnsafeChunkerServiceServer interface {
	mustEmbedUnimplementedChunkerServiceServer()
}

func RegisterChunkerServiceServer(s grpc.ServiceRegistrar, srv ChunkerServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkerService_ServiceDesc, srv)
}

func _ChunkerService_CreateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkerServiceServer).CreateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkerService_CreateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkerServiceServer).CreateChunk(ctx, req.(*CreateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkerService_ServiceDesc is the grpc.ServiceDesc for ChunkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.hub.distributor.v1.ChunkerService",
	HandlerType: (*ChunkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChunk",
			Handler:    _ChunkerService_CreateChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributor.proto",
}
