// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/hub/distributor/pb/gen"
)

// DistributorServiceServer is an autogenerated mock type for the DistributorServiceServer type
type DistributorServiceServer struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *DistributorServiceServer) Get(_a0 context.Context, _a1 *gen.ChunkRequest) (*gen.ChunkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ChunkRequest) (*gen.ChunkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ChunkRequest) *gen.ChunkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ChunkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *DistributorServiceServer) Store(_a0 context.Context, _a1 *gen.Request) (*gen.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request) (*gen.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request) *gen.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedDistributorServiceServer provides a mock function with given fields:
func (_m *DistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewDistributorServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDistributorServiceServer creates a new instance of DistributorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDistributorServiceServer(t mockConstructorTestingTNewDistributorServiceServer) *DistributorServiceServer {
	mock := &DistributorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
