// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	desync "github.com/folbricht/desync"
	mock "github.com/stretchr/testify/mock"
)

// chunker is an autogenerated mock type for the chunker type
type chunker struct {
	mock.Mock
}

// GetIndexExtension provides a mock function with given fields:
func (_m *chunker) GetIndexExtension() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndexExtension")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MakeChunk provides a mock function with given fields: ctx, content, store, wp
func (_m *chunker) MakeChunk(ctx context.Context, content string, store string, wp string) (*desync.Index, error) {
	ret := _m.Called(ctx, content, store, wp)

	if len(ret) == 0 {
		panic("no return value specified for MakeChunk")
	}

	var r0 *desync.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*desync.Index, error)); ok {
		return rf(ctx, content, store, wp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *desync.Index); ok {
		r0 = rf(ctx, content, store, wp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*desync.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, content, store, wp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newChunker creates a new instance of chunker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newChunker(t interface {
	mock.TestingT
	Cleanup(func())
}) *chunker {
	mock := &chunker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
