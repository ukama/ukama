// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: artifact.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtifactServiceClient is the client API for ArtifactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactServiceClient interface {
	StoreArtifact(ctx context.Context, in *StoreArtifactRequest, opts ...grpc.CallOption) (*StoreArtifactResponse, error)
	GetArtifactLocation(ctx context.Context, in *GetArtifactLocationRequest, opts ...grpc.CallOption) (*GetArtifactLocationResponse, error)
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	GetArtifcatVersionList(ctx context.Context, in *GetArtifactVersionListRequest, opts ...grpc.CallOption) (*GetArtifactVersionListResponse, error)
	ListArtifacts(ctx context.Context, in *ListArtifactRequest, opts ...grpc.CallOption) (*ListArtifactResponse, error)
}

type artifactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactServiceClient(cc grpc.ClientConnInterface) ArtifactServiceClient {
	return &artifactServiceClient{cc}
}

func (c *artifactServiceClient) StoreArtifact(ctx context.Context, in *StoreArtifactRequest, opts ...grpc.CallOption) (*StoreArtifactResponse, error) {
	out := new(StoreArtifactResponse)
	err := c.cc.Invoke(ctx, "/ukama.hub.artifactmanager.v1.ArtifactService/StoreArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) GetArtifactLocation(ctx context.Context, in *GetArtifactLocationRequest, opts ...grpc.CallOption) (*GetArtifactLocationResponse, error) {
	out := new(GetArtifactLocationResponse)
	err := c.cc.Invoke(ctx, "/ukama.hub.artifactmanager.v1.ArtifactService/GetArtifactLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/ukama.hub.artifactmanager.v1.ArtifactService/GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) GetArtifcatVersionList(ctx context.Context, in *GetArtifactVersionListRequest, opts ...grpc.CallOption) (*GetArtifactVersionListResponse, error) {
	out := new(GetArtifactVersionListResponse)
	err := c.cc.Invoke(ctx, "/ukama.hub.artifactmanager.v1.ArtifactService/GetArtifcatVersionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) ListArtifacts(ctx context.Context, in *ListArtifactRequest, opts ...grpc.CallOption) (*ListArtifactResponse, error) {
	out := new(ListArtifactResponse)
	err := c.cc.Invoke(ctx, "/ukama.hub.artifactmanager.v1.ArtifactService/ListArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactServiceServer is the server API for ArtifactService service.
// All implementations must embed UnimplementedArtifactServiceServer
// for forward compatibility
type ArtifactServiceServer interface {
	StoreArtifact(context.Context, *StoreArtifactRequest) (*StoreArtifactResponse, error)
	GetArtifactLocation(context.Context, *GetArtifactLocationRequest) (*GetArtifactLocationResponse, error)
	GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	GetArtifcatVersionList(context.Context, *GetArtifactVersionListRequest) (*GetArtifactVersionListResponse, error)
	ListArtifacts(context.Context, *ListArtifactRequest) (*ListArtifactResponse, error)
	mustEmbedUnimplementedArtifactServiceServer()
}

// UnimplementedArtifactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactServiceServer struct {
}

func (UnimplementedArtifactServiceServer) StoreArtifact(context.Context, *StoreArtifactRequest) (*StoreArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) GetArtifactLocation(context.Context, *GetArtifactLocationRequest) (*GetArtifactLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactLocation not implemented")
}
func (UnimplementedArtifactServiceServer) GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) GetArtifcatVersionList(context.Context, *GetArtifactVersionListRequest) (*GetArtifactVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifcatVersionList not implemented")
}
func (UnimplementedArtifactServiceServer) ListArtifacts(context.Context, *ListArtifactRequest) (*ListArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedArtifactServiceServer) mustEmbedUnimplementedArtifactServiceServer() {}

// UnsafeArtifactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactServiceServer will
// result in compilation errors.
type UnsafeArtifactServiceServer interface {
	mustEmbedUnimplementedArtifactServiceServer()
}

func RegisterArtifactServiceServer(s grpc.ServiceRegistrar, srv ArtifactServiceServer) {
	s.RegisterService(&ArtifactService_ServiceDesc, srv)
}

func _ArtifactService_StoreArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).StoreArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hub.artifactmanager.v1.ArtifactService/StoreArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).StoreArtifact(ctx, req.(*StoreArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_GetArtifactLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).GetArtifactLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hub.artifactmanager.v1.ArtifactService/GetArtifactLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).GetArtifactLocation(ctx, req.(*GetArtifactLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hub.artifactmanager.v1.ArtifactService/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_GetArtifcatVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactVersionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).GetArtifcatVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hub.artifactmanager.v1.ArtifactService/GetArtifcatVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).GetArtifcatVersionList(ctx, req.(*GetArtifactVersionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hub.artifactmanager.v1.ArtifactService/ListArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).ListArtifacts(ctx, req.(*ListArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactService_ServiceDesc is the grpc.ServiceDesc for ArtifactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.hub.artifactmanager.v1.ArtifactService",
	HandlerType: (*ArtifactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreArtifact",
			Handler:    _ArtifactService_StoreArtifact_Handler,
		},
		{
			MethodName: "GetArtifactLocation",
			Handler:    _ArtifactService_GetArtifactLocation_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _ArtifactService_GetArtifact_Handler,
		},
		{
			MethodName: "GetArtifcatVersionList",
			Handler:    _ArtifactService_GetArtifcatVersionList_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _ArtifactService_ListArtifacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifact.proto",
}
