// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/hub/artifactmanager/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ArtifactServiceClient is an autogenerated mock type for the ArtifactServiceClient type
type ArtifactServiceClient struct {
	mock.Mock
}

// GetArtifact provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactServiceClient) GetArtifact(ctx context.Context, in *gen.GetArtifactRequest, opts ...grpc.CallOption) (*gen.GetArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactRequest, ...grpc.CallOption) (*gen.GetArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactRequest, ...grpc.CallOption) *gen.GetArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactLocation provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactServiceClient) GetArtifactLocation(ctx context.Context, in *gen.GetArtifactLocationRequest, opts ...grpc.CallOption) (*gen.GetArtifactLocationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetArtifactLocationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactLocationRequest, ...grpc.CallOption) (*gen.GetArtifactLocationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactLocationRequest, ...grpc.CallOption) *gen.GetArtifactLocationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactLocationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetArtifactLocationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactVersionList provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactServiceClient) GetArtifactVersionList(ctx context.Context, in *gen.GetArtifactVersionListRequest, opts ...grpc.CallOption) (*gen.GetArtifactVersionListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetArtifactVersionListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactVersionListRequest, ...grpc.CallOption) (*gen.GetArtifactVersionListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactVersionListRequest, ...grpc.CallOption) *gen.GetArtifactVersionListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactVersionListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetArtifactVersionListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactServiceClient) ListArtifacts(ctx context.Context, in *gen.ListArtifactRequest, opts ...grpc.CallOption) (*gen.ListArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ListArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListArtifactRequest, ...grpc.CallOption) (*gen.ListArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListArtifactRequest, ...grpc.CallOption) *gen.ListArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreArtifact provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactServiceClient) StoreArtifact(ctx context.Context, in *gen.StoreArtifactRequest, opts ...grpc.CallOption) (*gen.StoreArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.StoreArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreArtifactRequest, ...grpc.CallOption) (*gen.StoreArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreArtifactRequest, ...grpc.CallOption) *gen.StoreArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StoreArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.StoreArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewArtifactServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewArtifactServiceClient creates a new instance of ArtifactServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArtifactServiceClient(t mockConstructorTestingTNewArtifactServiceClient) *ArtifactServiceClient {
	mock := &ArtifactServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
