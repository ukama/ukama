// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/hub/artifactmanager/pb/gen"
)

// ArtifactServiceServer is an autogenerated mock type for the ArtifactServiceServer type
type ArtifactServiceServer struct {
	mock.Mock
}

// GetArtifact provides a mock function with given fields: _a0, _a1
func (_m *ArtifactServiceServer) GetArtifact(_a0 context.Context, _a1 *gen.GetArtifactRequest) (*gen.GetArtifactResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactRequest) (*gen.GetArtifactResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactRequest) *gen.GetArtifactResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetArtifactRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactLocation provides a mock function with given fields: _a0, _a1
func (_m *ArtifactServiceServer) GetArtifactLocation(_a0 context.Context, _a1 *gen.GetArtifactLocationRequest) (*gen.GetArtifactLocationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetArtifactLocationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactLocationRequest) (*gen.GetArtifactLocationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactLocationRequest) *gen.GetArtifactLocationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactLocationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetArtifactLocationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactVersionList provides a mock function with given fields: _a0, _a1
func (_m *ArtifactServiceServer) GetArtifactVersionList(_a0 context.Context, _a1 *gen.GetArtifactVersionListRequest) (*gen.GetArtifactVersionListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetArtifactVersionListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactVersionListRequest) (*gen.GetArtifactVersionListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetArtifactVersionListRequest) *gen.GetArtifactVersionListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactVersionListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetArtifactVersionListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: _a0, _a1
func (_m *ArtifactServiceServer) ListArtifacts(_a0 context.Context, _a1 *gen.ListArtifactRequest) (*gen.ListArtifactResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ListArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListArtifactRequest) (*gen.ListArtifactResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListArtifactRequest) *gen.ListArtifactResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListArtifactRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreArtifact provides a mock function with given fields: _a0, _a1
func (_m *ArtifactServiceServer) StoreArtifact(_a0 context.Context, _a1 *gen.StoreArtifactRequest) (*gen.StoreArtifactResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.StoreArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreArtifactRequest) (*gen.StoreArtifactResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreArtifactRequest) *gen.StoreArtifactResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StoreArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.StoreArtifactRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedArtifactServiceServer provides a mock function with given fields:
func (_m *ArtifactServiceServer) mustEmbedUnimplementedArtifactServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewArtifactServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewArtifactServiceServer creates a new instance of ArtifactServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArtifactServiceServer(t mockConstructorTestingTNewArtifactServiceServer) *ArtifactServiceServer {
	mock := &ArtifactServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
