// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/hub/artifactmanager/pb/gen"
)

// artifactManager is an autogenerated mock type for the artifactManager type
type artifactManager struct {
	mock.Mock
}

// GetArtifact provides a mock function with given fields: in
func (_m *artifactManager) GetArtifact(in *gen.GetArtifactRequest) (*gen.GetArtifactResponse, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifact")
	}

	var r0 *gen.GetArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetArtifactRequest) (*gen.GetArtifactResponse, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetArtifactRequest) *gen.GetArtifactResponse); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetArtifactRequest) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactVersionList provides a mock function with given fields: in
func (_m *artifactManager) GetArtifactVersionList(in *gen.GetArtifactVersionListRequest) (*gen.GetArtifactVersionListResponse, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifactVersionList")
	}

	var r0 *gen.GetArtifactVersionListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.GetArtifactVersionListRequest) (*gen.GetArtifactVersionListResponse, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*gen.GetArtifactVersionListRequest) *gen.GetArtifactVersionListResponse); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetArtifactVersionListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.GetArtifactVersionListRequest) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: in
func (_m *artifactManager) ListArtifacts(in *gen.ListArtifactRequest) (*gen.ListArtifactResponse, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *gen.ListArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.ListArtifactRequest) (*gen.ListArtifactResponse, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*gen.ListArtifactRequest) *gen.ListArtifactResponse); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.ListArtifactRequest) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreArtifact provides a mock function with given fields: in
func (_m *artifactManager) StoreArtifact(in *gen.StoreArtifactRequest) (*gen.StoreArtifactResponse, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for StoreArtifact")
	}

	var r0 *gen.StoreArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.StoreArtifactRequest) (*gen.StoreArtifactResponse, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*gen.StoreArtifactRequest) *gen.StoreArtifactResponse); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StoreArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.StoreArtifactRequest) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newArtifactManager creates a new instance of artifactManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newArtifactManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *artifactManager {
	mock := &artifactManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
