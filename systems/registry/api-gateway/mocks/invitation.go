// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/invitation/pb/gen"
)

// invitation is an autogenerated mock type for the invitation type
type invitation struct {
	mock.Mock
}

// AddInvitation provides a mock function with given fields: name, email, role
func (_m *invitation) AddInvitation(name string, email string, role string) (*gen.AddResponse, error) {
	ret := _m.Called(name, email, role)

	if len(ret) == 0 {
		panic("no return value specified for AddInvitation")
	}

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.AddResponse, error)); ok {
		return rf(name, email, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.AddResponse); ok {
		r0 = rf(name, email, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, email, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInvitations provides a mock function with given fields:
func (_m *invitation) GetAllInvitations() (*gen.GetAllResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllInvitations")
	}

	var r0 *gen.GetAllResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gen.GetAllResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gen.GetAllResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetAllResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationById provides a mock function with given fields: invitationId
func (_m *invitation) GetInvitationById(invitationId string) (*gen.GetResponse, error) {
	ret := _m.Called(invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationById")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(invitationId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(invitationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invitationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationsByEmail provides a mock function with given fields: email
func (_m *invitation) GetInvitationsByEmail(email string) (*gen.GetByEmailResponse, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationsByEmail")
	}

	var r0 *gen.GetByEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByEmailResponse, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByEmailResponse); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInvitation provides a mock function with given fields: invitationId
func (_m *invitation) RemoveInvitation(invitationId string) (*gen.DeleteResponse, error) {
	ret := _m.Called(invitationId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveInvitation")
	}

	var r0 *gen.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.DeleteResponse, error)); ok {
		return rf(invitationId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.DeleteResponse); ok {
		r0 = rf(invitationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invitationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvitation provides a mock function with given fields: invitationId, status
func (_m *invitation) UpdateInvitation(invitationId string, status string) (*gen.UpdateStatusResponse, error) {
	ret := _m.Called(invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvitation")
	}

	var r0 *gen.UpdateStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.UpdateStatusResponse, error)); ok {
		return rf(invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.UpdateStatusResponse); ok {
		r0 = rf(invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newInvitation creates a new instance of invitation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newInvitation(t interface {
	mock.TestingT
	Cleanup(func())
}) *invitation {
	mock := &invitation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
