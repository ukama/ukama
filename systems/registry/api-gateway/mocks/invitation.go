// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/invitation/pb/gen"
)

// invitation is an autogenerated mock type for the invitation type
type invitation struct {
	mock.Mock
}

// AddInvitation provides a mock function with given fields: org, name, email, role
func (_m *invitation) AddInvitation(org string, name string, email string, role string) (*gen.AddInvitationResponse, error) {
	ret := _m.Called(org, name, email, role)

	var r0 *gen.AddInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*gen.AddInvitationResponse, error)); ok {
		return rf(org, name, email, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *gen.AddInvitationResponse); ok {
		r0 = rf(org, name, email, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(org, name, email, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationById provides a mock function with given fields: invitationId
func (_m *invitation) GetInvitationById(invitationId string) (*gen.GetInvitationResponse, error) {
	ret := _m.Called(invitationId)

	var r0 *gen.GetInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetInvitationResponse, error)); ok {
		return rf(invitationId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetInvitationResponse); ok {
		r0 = rf(invitationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invitationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationByOrg provides a mock function with given fields: org
func (_m *invitation) GetInvitationByOrg(org string) (*gen.GetInvitationByOrgResponse, error) {
	ret := _m.Called(org)

	var r0 *gen.GetInvitationByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetInvitationByOrgResponse, error)); ok {
		return rf(org)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetInvitationByOrgResponse); ok {
		r0 = rf(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInvitation provides a mock function with given fields: invitationId
func (_m *invitation) RemoveInvitation(invitationId string) (*gen.DeleteInvitationResponse, error) {
	ret := _m.Called(invitationId)

	var r0 *gen.DeleteInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.DeleteInvitationResponse, error)); ok {
		return rf(invitationId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.DeleteInvitationResponse); ok {
		r0 = rf(invitationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invitationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvitation provides a mock function with given fields: invitationId, status
func (_m *invitation) UpdateInvitation(invitationId string, status string) (*gen.UpdateInvitationStatusResponse, error) {
	ret := _m.Called(invitationId, status)

	var r0 *gen.UpdateInvitationStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.UpdateInvitationStatusResponse, error)); ok {
		return rf(invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.UpdateInvitationStatusResponse); ok {
		r0 = rf(invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateInvitationStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewInvitation interface {
	mock.TestingT
	Cleanup(func())
}

// newInvitation creates a new instance of invitation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newInvitation(t mockConstructorTestingTnewInvitation) *invitation {
	mock := &invitation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
