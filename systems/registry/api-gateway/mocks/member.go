// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/member/pb/gen"
)

// member is an autogenerated mock type for the member type
type member struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: userUUID, role
func (_m *member) AddMember(userUUID string, role string) (*gen.MemberResponse, error) {
	ret := _m.Called(userUUID, role)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.MemberResponse, error)); ok {
		return rf(userUUID, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.MemberResponse); ok {
		r0 = rf(userUUID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userUUID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOtherMember provides a mock function with given fields: userUUID, role
func (_m *member) AddOtherMember(userUUID string, role string) (*gen.MemberResponse, error) {
	ret := _m.Called(userUUID, role)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.MemberResponse, error)); ok {
		return rf(userUUID, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.MemberResponse); ok {
		r0 = rf(userUUID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userUUID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: userUUID
func (_m *member) GetMember(userUUID string) (*gen.MemberResponse, error) {
	ret := _m.Called(userUUID)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.MemberResponse, error)); ok {
		return rf(userUUID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.MemberResponse); ok {
		r0 = rf(userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields:
func (_m *member) GetMembers() (*gen.GetMembersResponse, error) {
	ret := _m.Called()

	var r0 *gen.GetMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gen.GetMembersResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gen.GetMembersResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: userUUID
func (_m *member) RemoveMember(userUUID string) error {
	ret := _m.Called(userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: userUUID, isDeactivated, role
func (_m *member) UpdateMember(userUUID string, isDeactivated bool, role string) error {
	ret := _m.Called(userUUID, isDeactivated, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, string) error); ok {
		r0 = rf(userUUID, isDeactivated, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMember interface {
	mock.TestingT
	Cleanup(func())
}

// newMember creates a new instance of member. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMember(t mockConstructorTestingTnewMember) *member {
	mock := &member{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
