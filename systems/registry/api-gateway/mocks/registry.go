// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/org/pb/gen"

	pbgen "github.com/ukama/ukama/systems/registry/network/pb/gen"
)

// registry is an autogenerated mock type for the registry type
type registry struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: orgName, userUUID
func (_m *registry) AddMember(orgName string, userUUID string) (*gen.MemberResponse, error) {
	ret := _m.Called(orgName, userUUID)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.MemberResponse, error)); ok {
		return rf(orgName, userUUID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.MemberResponse); ok {
		r0 = rf(orgName, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNetwork provides a mock function with given fields: orgName, netName
func (_m *registry) AddNetwork(orgName string, netName string) (*pbgen.AddResponse, error) {
	ret := _m.Called(orgName, netName)

	var r0 *pbgen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pbgen.AddResponse, error)); ok {
		return rf(orgName, netName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pbgen.AddResponse); ok {
		r0 = rf(orgName, netName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, netName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: orgName, owner, certificate
func (_m *registry) AddOrg(orgName string, owner string, certificate string) (*gen.AddResponse, error) {
	ret := _m.Called(orgName, owner, certificate)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.AddResponse, error)); ok {
		return rf(orgName, owner, certificate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.AddResponse); ok {
		r0 = rf(orgName, owner, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(orgName, owner, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSite provides a mock function with given fields: netID, siteName
func (_m *registry) AddSite(netID string, siteName string) (*pbgen.AddSiteResponse, error) {
	ret := _m.Called(netID, siteName)

	var r0 *pbgen.AddSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pbgen.AddSiteResponse, error)); ok {
		return rf(netID, siteName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pbgen.AddSiteResponse); ok {
		r0 = rf(netID, siteName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.AddSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(netID, siteName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: orgName, userUUID
func (_m *registry) GetMember(orgName string, userUUID string) (*gen.MemberResponse, error) {
	ret := _m.Called(orgName, userUUID)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.MemberResponse, error)); ok {
		return rf(orgName, userUUID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.MemberResponse); ok {
		r0 = rf(orgName, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: orgName
func (_m *registry) GetMembers(orgName string) (*gen.GetMembersResponse, error) {
	ret := _m.Called(orgName)

	var r0 *gen.GetMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetMembersResponse, error)); ok {
		return rf(orgName)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetMembersResponse); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: netID
func (_m *registry) GetNetwork(netID string) (*pbgen.GetResponse, error) {
	ret := _m.Called(netID)

	var r0 *pbgen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pbgen.GetResponse, error)); ok {
		return rf(netID)
	}
	if rf, ok := ret.Get(0).(func(string) *pbgen.GetResponse); ok {
		r0 = rf(netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworks provides a mock function with given fields: org
func (_m *registry) GetNetworks(org string) (*pbgen.GetByOrgResponse, error) {
	ret := _m.Called(org)

	var r0 *pbgen.GetByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pbgen.GetByOrgResponse, error)); ok {
		return rf(org)
	}
	if rf, ok := ret.Get(0).(func(string) *pbgen.GetByOrgResponse); ok {
		r0 = rf(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.GetByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: orgName
func (_m *registry) GetOrg(orgName string) (*gen.GetByNameResponse, error) {
	ret := _m.Called(orgName)

	var r0 *gen.GetByNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByNameResponse, error)); ok {
		return rf(orgName)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByNameResponse); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgs provides a mock function with given fields: ownerUUID
func (_m *registry) GetOrgs(ownerUUID string) (*gen.GetByOwnerResponse, error) {
	ret := _m.Called(ownerUUID)

	var r0 *gen.GetByOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByOwnerResponse, error)); ok {
		return rf(ownerUUID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByOwnerResponse); ok {
		r0 = rf(ownerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSite provides a mock function with given fields: netID, siteName
func (_m *registry) GetSite(netID string, siteName string) (*pbgen.GetSiteResponse, error) {
	ret := _m.Called(netID, siteName)

	var r0 *pbgen.GetSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pbgen.GetSiteResponse, error)); ok {
		return rf(netID, siteName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pbgen.GetSiteResponse); ok {
		r0 = rf(netID, siteName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.GetSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(netID, siteName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields: netID
func (_m *registry) GetSites(netID string) (*pbgen.GetSitesByNetworkResponse, error) {
	ret := _m.Called(netID)

	var r0 *pbgen.GetSitesByNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pbgen.GetSitesByNetworkResponse, error)); ok {
		return rf(netID)
	}
	if rf, ok := ret.Get(0).(func(string) *pbgen.GetSitesByNetworkResponse); ok {
		r0 = rf(netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.GetSitesByNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: orgName, userUUID
func (_m *registry) RemoveMember(orgName string, userUUID string) error {
	ret := _m.Called(orgName, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgName, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: orgName, userUUID, isDeactivated
func (_m *registry) UpdateMember(orgName string, userUUID string, isDeactivated bool) error {
	ret := _m.Called(orgName, userUUID, isDeactivated)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(orgName, userUUID, isDeactivated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// newRegistry creates a new instance of registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newRegistry(t mockConstructorTestingTnewRegistry) *registry {
	mock := &registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
