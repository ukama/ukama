// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/org/pb/gen"
)

// registry is an autogenerated mock type for the registry type
type registry struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: orgName, userUUID
func (_m *registry) AddMember(orgName string, userUUID string) (*gen.OrgUser, error) {
	ret := _m.Called(orgName, userUUID)

	var r0 *gen.OrgUser
	if rf, ok := ret.Get(0).(func(string, string) *gen.OrgUser); ok {
		r0 = rf(orgName, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.OrgUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: orgName, owner, certificate
func (_m *registry) AddOrg(orgName string, owner string, certificate string) (*gen.Organization, error) {
	ret := _m.Called(orgName, owner, certificate)

	var r0 *gen.Organization
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.Organization); ok {
		r0 = rf(orgName, owner, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(orgName, owner, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: orgName, userUUID
func (_m *registry) GetMember(orgName string, userUUID string) (*gen.OrgUser, error) {
	ret := _m.Called(orgName, userUUID)

	var r0 *gen.OrgUser
	if rf, ok := ret.Get(0).(func(string, string) *gen.OrgUser); ok {
		r0 = rf(orgName, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.OrgUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: orgName
func (_m *registry) GetMembers(orgName string) (*gen.GetMembersResponse, error) {
	ret := _m.Called(orgName)

	var r0 *gen.GetMembersResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetMembersResponse); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: orgName
func (_m *registry) GetOrg(orgName string) (*gen.Organization, error) {
	ret := _m.Called(orgName)

	var r0 *gen.Organization
	if rf, ok := ret.Get(0).(func(string) *gen.Organization); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgs provides a mock function with given fields: ownerUUID
func (_m *registry) GetOrgs(ownerUUID string) (*gen.GetByOwnerResponse, error) {
	ret := _m.Called(ownerUUID)

	var r0 *gen.GetByOwnerResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetByOwnerResponse); ok {
		r0 = rf(ownerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOwnerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorized provides a mock function with given fields: userId, org
func (_m *registry) IsAuthorized(userId string, org string) (bool, error) {
	ret := _m.Called(userId, org)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userId, org)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: orgName, userUUID
func (_m *registry) RemoveMember(orgName string, userUUID string) error {
	ret := _m.Called(orgName, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgName, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// newRegistry creates a new instance of registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newRegistry(t mockConstructorTestingTnewRegistry) *registry {
	mock := &registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
