// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/network/pb/gen"
)

// network is an autogenerated mock type for the network type
type network struct {
	mock.Mock
}

// AddNetwork provides a mock function with given fields: orgName, netName, allowedCountries, allowedNetworks, budget, overdraft, trafficPolicy, paymentLinks
func (_m *network) AddNetwork(orgName string, netName string, allowedCountries []string, allowedNetworks []string, budget float64, overdraft float64, trafficPolicy uint32, paymentLinks bool) (*gen.AddResponse, error) {
	ret := _m.Called(orgName, netName, allowedCountries, allowedNetworks, budget, overdraft, trafficPolicy, paymentLinks)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, float64, float64, uint32, bool) (*gen.AddResponse, error)); ok {
		return rf(orgName, netName, allowedCountries, allowedNetworks, budget, overdraft, trafficPolicy, paymentLinks)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, float64, float64, uint32, bool) *gen.AddResponse); ok {
		r0 = rf(orgName, netName, allowedCountries, allowedNetworks, budget, overdraft, trafficPolicy, paymentLinks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, []string, float64, float64, uint32, bool) error); ok {
		r1 = rf(orgName, netName, allowedCountries, allowedNetworks, budget, overdraft, trafficPolicy, paymentLinks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: netID
func (_m *network) GetNetwork(netID string) (*gen.GetResponse, error) {
	ret := _m.Called(netID)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(netID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworks provides a mock function with given fields: org
func (_m *network) GetNetworks(org string) (*gen.GetByOrgResponse, error) {
	ret := _m.Called(org)

	var r0 *gen.GetByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByOrgResponse, error)); ok {
		return rf(org)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByOrgResponse); ok {
		r0 = rf(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newNetwork creates a new instance of network. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newNetwork(t interface {
	mock.TestingT
	Cleanup(func())
}) *network {
	mock := &network{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
