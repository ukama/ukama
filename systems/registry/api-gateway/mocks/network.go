// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/network/pb/gen"
)

// network is an autogenerated mock type for the network type
type network struct {
	mock.Mock
}

// AddNetwork provides a mock function with given fields: orgName, netName
func (_m *network) AddNetwork(orgName string, netName string) (*gen.AddResponse, error) {
	ret := _m.Called(orgName, netName)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.AddResponse, error)); ok {
		return rf(orgName, netName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.AddResponse); ok {
		r0 = rf(orgName, netName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, netName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSite provides a mock function with given fields: netID, siteName
func (_m *network) AddSite(netID string, siteName string) (*gen.AddSiteResponse, error) {
	ret := _m.Called(netID, siteName)

	var r0 *gen.AddSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.AddSiteResponse, error)); ok {
		return rf(netID, siteName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.AddSiteResponse); ok {
		r0 = rf(netID, siteName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(netID, siteName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: netID
func (_m *network) GetNetwork(netID string) (*gen.GetResponse, error) {
	ret := _m.Called(netID)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(netID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworks provides a mock function with given fields: org
func (_m *network) GetNetworks(org string) (*gen.GetByOrgResponse, error) {
	ret := _m.Called(org)

	var r0 *gen.GetByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByOrgResponse, error)); ok {
		return rf(org)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByOrgResponse); ok {
		r0 = rf(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSite provides a mock function with given fields: netID, siteName
func (_m *network) GetSite(netID string, siteName string) (*gen.GetSiteResponse, error) {
	ret := _m.Called(netID, siteName)

	var r0 *gen.GetSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.GetSiteResponse, error)); ok {
		return rf(netID, siteName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.GetSiteResponse); ok {
		r0 = rf(netID, siteName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(netID, siteName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields: netID
func (_m *network) GetSites(netID string) (*gen.GetSitesByNetworkResponse, error) {
	ret := _m.Called(netID)

	var r0 *gen.GetSitesByNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetSitesByNetworkResponse, error)); ok {
		return rf(netID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetSitesByNetworkResponse); ok {
		r0 = rf(netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSitesByNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewNetwork interface {
	mock.TestingT
	Cleanup(func())
}

// newNetwork creates a new instance of network. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newNetwork(t mockConstructorTestingTnewNetwork) *network {
	mock := &network{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
