// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/node/pb/gen"
)

// node is an autogenerated mock type for the node type
type node struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: nodeId, name, orgId, state
func (_m *node) AddNode(nodeId string, name string, orgId string, state string) (*gen.AddNodeResponse, error) {
	ret := _m.Called(nodeId, name, orgId, state)

	var r0 *gen.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*gen.AddNodeResponse, error)); ok {
		return rf(nodeId, name, orgId, state)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *gen.AddNodeResponse); ok {
		r0 = rf(nodeId, name, orgId, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(nodeId, name, orgId, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNodeToSite provides a mock function with given fields: nodeId, networkId, siteId
func (_m *node) AddNodeToSite(nodeId string, networkId string, siteId string) (*gen.AddNodeToSiteResponse, error) {
	ret := _m.Called(nodeId, networkId, siteId)

	var r0 *gen.AddNodeToSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.AddNodeToSiteResponse, error)); ok {
		return rf(nodeId, networkId, siteId)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.AddNodeToSiteResponse); ok {
		r0 = rf(nodeId, networkId, siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeToSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(nodeId, networkId, siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNodes provides a mock function with given fields: node, l, r
func (_m *node) AttachNodes(node string, l string, r string) (*gen.AttachNodesResponse, error) {
	ret := _m.Called(node, l, r)

	var r0 *gen.AttachNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.AttachNodesResponse, error)); ok {
		return rf(node, l, r)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.AttachNodesResponse); ok {
		r0 = rf(node, l, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AttachNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(node, l, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNode provides a mock function with given fields: nodeId
func (_m *node) DeleteNode(nodeId string) (*gen.DeleteNodeResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.DeleteNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.DeleteNodeResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.DeleteNodeResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNode provides a mock function with given fields: nodeId
func (_m *node) DetachNode(nodeId string) (*gen.DetachNodeResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.DetachNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.DetachNodeResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.DetachNodeResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DetachNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNodes provides a mock function with given fields: free
func (_m *node) GetAllNodes(free bool) (*gen.GetNodesResponse, error) {
	ret := _m.Called(free)

	var r0 *gen.GetNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (*gen.GetNodesResponse, error)); ok {
		return rf(free)
	}
	if rf, ok := ret.Get(0).(func(bool) *gen.GetNodesResponse); ok {
		r0 = rf(free)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(free)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: nodeId
func (_m *node) GetNode(nodeId string) (*gen.GetNodeResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetNodeResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetNodeResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgNodes provides a mock function with given fields: orgId, free
func (_m *node) GetOrgNodes(orgId string, free bool) (*gen.GetByOrgResponse, error) {
	ret := _m.Called(orgId, free)

	var r0 *gen.GetByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.GetByOrgResponse, error)); ok {
		return rf(orgId, free)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.GetByOrgResponse); ok {
		r0 = rf(orgId, free)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(orgId, free)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteNodes provides a mock function with given fields: siteId
func (_m *node) GetSiteNodes(siteId string) (*gen.GetBySiteResponse, error) {
	ret := _m.Called(siteId)

	var r0 *gen.GetBySiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetBySiteResponse, error)); ok {
		return rf(siteId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetBySiteResponse); ok {
		r0 = rf(siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBySiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseNodeFromSite provides a mock function with given fields: nodeId
func (_m *node) ReleaseNodeFromSite(nodeId string) (*gen.ReleaseNodeFromSiteResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.ReleaseNodeFromSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.ReleaseNodeFromSiteResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.ReleaseNodeFromSiteResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReleaseNodeFromSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: nodeId, name
func (_m *node) UpdateNode(nodeId string, name string) (*gen.UpdateNodeResponse, error) {
	ret := _m.Called(nodeId, name)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.UpdateNodeResponse, error)); ok {
		return rf(nodeId, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.UpdateNodeResponse); ok {
		r0 = rf(nodeId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nodeId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeState provides a mock function with given fields: nodeId, state
func (_m *node) UpdateNodeState(nodeId string, state string) (*gen.UpdateNodeResponse, error) {
	ret := _m.Called(nodeId, state)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.UpdateNodeResponse, error)); ok {
		return rf(nodeId, state)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.UpdateNodeResponse); ok {
		r0 = rf(nodeId, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nodeId, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewNode interface {
	mock.TestingT
	Cleanup(func())
}

// newNode creates a new instance of node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newNode(t mockConstructorTestingTnewNode) *node {
	mock := &node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
