// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/site/pb/gen"
)

// site is an autogenerated mock type for the site type
type site struct {
	mock.Mock
}

// AddSite provides a mock function with given fields: networkId, name, backhaulId, powerId, accessId, switchId, location, spectrumId, isDeactivated, latitude, longitude, installDate
func (_m *site) AddSite(networkId string, name string, backhaulId string, powerId string, accessId string, switchId string, location string, spectrumId string, isDeactivated bool, latitude float64, longitude float64, installDate string) (*gen.AddResponse, error) {
	ret := _m.Called(networkId, name, backhaulId, powerId, accessId, switchId, location, spectrumId, isDeactivated, latitude, longitude, installDate)

	if len(ret) == 0 {
		panic("no return value specified for AddSite")
	}

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, bool, float64, float64, string) (*gen.AddResponse, error)); ok {
		return rf(networkId, name, backhaulId, powerId, accessId, switchId, location, spectrumId, isDeactivated, latitude, longitude, installDate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, bool, float64, float64, string) *gen.AddResponse); ok {
		r0 = rf(networkId, name, backhaulId, powerId, accessId, switchId, location, spectrumId, isDeactivated, latitude, longitude, installDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string, string, bool, float64, float64, string) error); ok {
		r1 = rf(networkId, name, backhaulId, powerId, accessId, switchId, location, spectrumId, isDeactivated, latitude, longitude, installDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSite provides a mock function with given fields: siteId
func (_m *site) GetSite(siteId string) (*gen.GetResponse, error) {
	ret := _m.Called(siteId)

	if len(ret) == 0 {
		panic("no return value specified for GetSite")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(siteId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: networkId, isDeactivate
func (_m *site) List(networkId string, isDeactivate bool) (*gen.ListResponse, error) {
	ret := _m.Called(networkId, isDeactivate)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *gen.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.ListResponse, error)); ok {
		return rf(networkId, isDeactivate)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.ListResponse); ok {
		r0 = rf(networkId, isDeactivate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(networkId, isDeactivate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSite provides a mock function with given fields: siteId, name
func (_m *site) UpdateSite(siteId string, name string) (*gen.UpdateResponse, error) {
	ret := _m.Called(siteId, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSite")
	}

	var r0 *gen.UpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.UpdateResponse, error)); ok {
		return rf(siteId, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.UpdateResponse); ok {
		r0 = rf(siteId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(siteId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newSite creates a new instance of site. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSite(t interface {
	mock.TestingT
	Cleanup(func())
}) *site {
	mock := &site{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
