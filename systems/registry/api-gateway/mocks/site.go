// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/site/pb/gen"

	time "time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// site is an autogenerated mock type for the site type
type site struct {
	mock.Mock
}

// AddSite provides a mock function with given fields: networkID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate
func (_m *site) AddSite(networkID string, name string, backhaulID string, powerID string, accessID string, switchID string, isDeactivated bool, latitude float64, longitude float64, installDate time.Time) (*gen.AddResponse, error) {
	ret := _m.Called(networkID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, bool, float64, float64, time.Time) (*gen.AddResponse, error)); ok {
		return rf(networkID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, bool, float64, float64, time.Time) *gen.AddResponse); ok {
		r0 = rf(networkID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, bool, float64, float64, time.Time) error); ok {
		r1 = rf(networkID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSite provides a mock function with given fields: netID, siteID
func (_m *site) GetSite(netID string, siteID string) (*gen.GetResponse, error) {
	ret := _m.Called(netID, siteID)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.GetResponse, error)); ok {
		return rf(netID, siteID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.GetResponse); ok {
		r0 = rf(netID, siteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(netID, siteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields: netID
func (_m *site) GetSites(netID string) (*gen.GetSitesResponse, error) {
	ret := _m.Called(netID)

	var r0 *gen.GetSitesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetSitesResponse, error)); ok {
		return rf(netID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetSitesResponse); ok {
		r0 = rf(netID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSitesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSite provides a mock function with given fields: networkID, siteID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate
func (_m *site) UpdateSite(networkID string, siteID string, name string, backhaulID string, powerID string, accessID string, switchID string, isDeactivated bool, latitude float64, longitude float64, installDate *timestamppb.Timestamp) *gen.UpdateResponse {
	ret := _m.Called(networkID, siteID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate)

	var r0 *gen.UpdateResponse
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, bool, float64, float64, *timestamppb.Timestamp) *gen.UpdateResponse); ok {
		r0 = rf(networkID, siteID, name, backhaulID, powerID, accessID, switchID, isDeactivated, latitude, longitude, installDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateResponse)
		}
	}

	return r0
}

// newSite creates a new instance of site. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSite(t interface {
	mock.TestingT
	Cleanup(func())
}) *site {
	mock := &site{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
