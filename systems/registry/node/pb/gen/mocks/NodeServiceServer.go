// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/node/pb/gen"
)

// NodeServiceServer is an autogenerated mock type for the NodeServiceServer type
type NodeServiceServer struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) AddNode(_a0 context.Context, _a1 *gen.AddNodeRequest) (*gen.AddNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest) (*gen.AddNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest) *gen.AddNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNodeToNetwork provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) AddNodeToNetwork(_a0 context.Context, _a1 *gen.AddNodeToNetworkRequest) (*gen.AddNodeToNetworkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddNodeToNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeToNetworkRequest) (*gen.AddNodeToNetworkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeToNetworkRequest) *gen.AddNodeToNetworkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeToNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeToNetworkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNodes provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) AttachNodes(_a0 context.Context, _a1 *gen.AttachNodesRequest) (*gen.AttachNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AttachNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest) (*gen.AttachNodesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest) *gen.AttachNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AttachNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AttachNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteRequest) (*gen.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteRequest) (*gen.DeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteRequest) *gen.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) DetachNode(_a0 context.Context, _a1 *gen.DetachNodeRequest) (*gen.DetachNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DetachNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest) (*gen.DetachNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest) *gen.DetachNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DetachNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DetachNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNodes provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetAllNodes(_a0 context.Context, _a1 *gen.GetAllNodeRequest) (*gen.GetAllNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetAllNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllNodeRequest) (*gen.GetAllNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllNodeRequest) *gen.GetAllNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetAllNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetAllNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreeNodes provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetFreeNodes(_a0 context.Context, _a1 *gen.GetFreeNodeRequest) (*gen.GetFreeNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetFreeNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetFreeNodeRequest) (*gen.GetFreeNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetFreeNodeRequest) *gen.GetFreeNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetFreeNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetFreeNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetNode(_a0 context.Context, _a1 *gen.GetNodeRequest) (*gen.GetNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest) (*gen.GetNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest) *gen.GetNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNodeFromNetwork provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) RemoveNodeFromNetwork(_a0 context.Context, _a1 *gen.RemoveNodeFromNetworkRequest) (*gen.RemoveNodeFromNetworkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemoveNodeFromNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveNodeFromNetworkRequest) (*gen.RemoveNodeFromNetworkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveNodeFromNetworkRequest) *gen.RemoveNodeFromNetworkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveNodeFromNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveNodeFromNetworkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) UpdateNode(_a0 context.Context, _a1 *gen.UpdateNodeRequest) (*gen.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest) (*gen.UpdateNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest) *gen.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeState provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) UpdateNodeState(_a0 context.Context, _a1 *gen.UpdateNodeStateRequest) (*gen.UpdateNodeStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateNodeStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest) (*gen.UpdateNodeStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest) *gen.UpdateNodeStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNodeServiceServer provides a mock function with given fields:
func (_m *NodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewNodeServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeServiceServer creates a new instance of NodeServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeServiceServer(t mockConstructorTestingTNewNodeServiceServer) *NodeServiceServer {
	mock := &NodeServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
