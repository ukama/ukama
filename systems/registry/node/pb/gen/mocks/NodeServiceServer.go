// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/node/pb/gen"
)

// NodeServiceServer is an autogenerated mock type for the NodeServiceServer type
type NodeServiceServer struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) AddNode(_a0 context.Context, _a1 *gen.AddNodeRequest) (*gen.AddNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest) (*gen.AddNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest) *gen.AddNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNodeToSite provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) AddNodeToSite(_a0 context.Context, _a1 *gen.AddNodeToSiteRequest) (*gen.AddNodeToSiteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddNodeToSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeToSiteRequest) (*gen.AddNodeToSiteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeToSiteRequest) *gen.AddNodeToSiteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeToSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeToSiteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNodes provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) AttachNodes(_a0 context.Context, _a1 *gen.AttachNodesRequest) (*gen.AttachNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AttachNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest) (*gen.AttachNodesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest) *gen.AttachNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AttachNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AttachNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) DeleteNode(_a0 context.Context, _a1 *gen.DeleteNodeRequest) (*gen.DeleteNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest) (*gen.DeleteNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest) *gen.DeleteNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) DetachNode(_a0 context.Context, _a1 *gen.DetachNodeRequest) (*gen.DetachNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DetachNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest) (*gen.DetachNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest) *gen.DetachNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DetachNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DetachNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetNode(_a0 context.Context, _a1 *gen.GetNodeRequest) (*gen.GetNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest) (*gen.GetNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest) *gen.GetNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetNodes(_a0 context.Context, _a1 *gen.GetNodesRequest) (*gen.GetNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodesRequest) (*gen.GetNodesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodesRequest) *gen.GetNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesForOrg provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetNodesForOrg(_a0 context.Context, _a1 *gen.GetByOrgRequest) (*gen.GetByOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgRequest) (*gen.GetByOrgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgRequest) *gen.GetByOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesForSite provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) GetNodesForSite(_a0 context.Context, _a1 *gen.GetBySiteRequest) (*gen.GetBySiteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetBySiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBySiteRequest) (*gen.GetBySiteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBySiteRequest) *gen.GetBySiteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBySiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetBySiteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseNodeFromSite provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) ReleaseNodeFromSite(_a0 context.Context, _a1 *gen.ReleaseNodeFromSiteRequest) (*gen.ReleaseNodeFromSiteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ReleaseNodeFromSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReleaseNodeFromSiteRequest) (*gen.ReleaseNodeFromSiteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReleaseNodeFromSiteRequest) *gen.ReleaseNodeFromSiteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReleaseNodeFromSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReleaseNodeFromSiteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) UpdateNode(_a0 context.Context, _a1 *gen.UpdateNodeRequest) (*gen.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest) (*gen.UpdateNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest) *gen.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeState provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) UpdateNodeState(_a0 context.Context, _a1 *gen.UpdateNodeStateRequest) (*gen.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest) (*gen.UpdateNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest) *gen.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNodeServiceServer provides a mock function with given fields:
func (_m *NodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewNodeServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeServiceServer creates a new instance of NodeServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeServiceServer(t mockConstructorTestingTNewNodeServiceServer) *NodeServiceServer {
	mock := &NodeServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
