// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/registry/node/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NodeServiceClient is an autogenerated mock type for the NodeServiceClient type
type NodeServiceClient struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) AddNode(ctx context.Context, in *gen.AddNodeRequest, opts ...grpc.CallOption) (*gen.AddNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest, ...grpc.CallOption) (*gen.AddNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest, ...grpc.CallOption) *gen.AddNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNodeToSite provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) AddNodeToSite(ctx context.Context, in *gen.AddNodeToSiteRequest, opts ...grpc.CallOption) (*gen.AddNodeToSiteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddNodeToSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeToSiteRequest, ...grpc.CallOption) (*gen.AddNodeToSiteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeToSiteRequest, ...grpc.CallOption) *gen.AddNodeToSiteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeToSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeToSiteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNodes provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) AttachNodes(ctx context.Context, in *gen.AttachNodesRequest, opts ...grpc.CallOption) (*gen.AttachNodesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AttachNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest, ...grpc.CallOption) (*gen.AttachNodesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest, ...grpc.CallOption) *gen.AttachNodesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AttachNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AttachNodesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNode provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) DeleteNode(ctx context.Context, in *gen.DeleteNodeRequest, opts ...grpc.CallOption) (*gen.DeleteNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest, ...grpc.CallOption) (*gen.DeleteNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest, ...grpc.CallOption) *gen.DeleteNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNode provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) DetachNode(ctx context.Context, in *gen.DetachNodeRequest, opts ...grpc.CallOption) (*gen.DetachNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DetachNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest, ...grpc.CallOption) (*gen.DetachNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest, ...grpc.CallOption) *gen.DetachNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DetachNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DetachNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) GetNode(ctx context.Context, in *gen.GetNodeRequest, opts ...grpc.CallOption) (*gen.GetNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest, ...grpc.CallOption) (*gen.GetNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest, ...grpc.CallOption) *gen.GetNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) GetNodes(ctx context.Context, in *gen.GetNodesRequest, opts ...grpc.CallOption) (*gen.GetNodesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodesRequest, ...grpc.CallOption) (*gen.GetNodesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodesRequest, ...grpc.CallOption) *gen.GetNodesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesForOrg provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) GetNodesForOrg(ctx context.Context, in *gen.GetByOrgRequest, opts ...grpc.CallOption) (*gen.GetByOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgRequest, ...grpc.CallOption) (*gen.GetByOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgRequest, ...grpc.CallOption) *gen.GetByOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesForSite provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) GetNodesForSite(ctx context.Context, in *gen.GetBySiteRequest, opts ...grpc.CallOption) (*gen.GetBySiteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetBySiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBySiteRequest, ...grpc.CallOption) (*gen.GetBySiteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetBySiteRequest, ...grpc.CallOption) *gen.GetBySiteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBySiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetBySiteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseNodeFromSite provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) ReleaseNodeFromSite(ctx context.Context, in *gen.ReleaseNodeFromSiteRequest, opts ...grpc.CallOption) (*gen.ReleaseNodeFromSiteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ReleaseNodeFromSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReleaseNodeFromSiteRequest, ...grpc.CallOption) (*gen.ReleaseNodeFromSiteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReleaseNodeFromSiteRequest, ...grpc.CallOption) *gen.ReleaseNodeFromSiteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReleaseNodeFromSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReleaseNodeFromSiteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) UpdateNode(ctx context.Context, in *gen.UpdateNodeRequest, opts ...grpc.CallOption) (*gen.UpdateNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest, ...grpc.CallOption) (*gen.UpdateNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest, ...grpc.CallOption) *gen.UpdateNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeState provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) UpdateNodeState(ctx context.Context, in *gen.UpdateNodeStateRequest, opts ...grpc.CallOption) (*gen.UpdateNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest, ...grpc.CallOption) (*gen.UpdateNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest, ...grpc.CallOption) *gen.UpdateNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNodeServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeServiceClient creates a new instance of NodeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeServiceClient(t mockConstructorTestingTNewNodeServiceClient) *NodeServiceClient {
	mock := &NodeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
