syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/registry/node/pb/gen";

package ukama.registry.node.v1;


service NodeService {
    rpc AttachNodes(AttachNodesRequest) returns (AttachNodesResponse);
    rpc DetachNode(DetachNodeRequest) returns (DetachNodeResponse);
    rpc UpdateNodeState(UpdateNodeStateRequest) returns (UpdateNodeStateResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc GetAllNodes(GetAllNodeRequest) returns (GetAllNodeResponse);
    rpc GetFreeNodes(GetFreeNodeRequest) returns (GetFreeNodeResponse);
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    rpc AddNodeToNetwork(AddNodeToNetworkRequest)returns (AddNodeToNetworkResponse);
    rpc RemoveNodeFromNetwork(RemoveNodeFromNetworkRequest)returns (RemoveNodeFromNetworkResponse);
}


message AddNodeToNetworkRequest {
    string nodeId = 1;
    string network = 2;
}

message AddNodeToNetworkResponse {

}

message RemoveNodeFromNetworkRequest {
    string nodeId = 1;
}

message RemoveNodeFromNetworkResponse {

}

message AttachNodesRequest {
    string parentNodeId = 1;
    repeated string  attachedNodeIds = 2;
    string network = 3;
}

message AttachNodesResponse {

}

message DetachNodeRequest{
    string detachedNodeId = 2;
}

message DetachNodeResponse {

}

message  UpdateNodeStateRequest{
    string nodeId = 1;
    string state = 2;
}

message UpdateNodeStateResponse{
    string nodeId = 1;
    string state = 2;
}


message  UpdateNodeRequest{
    string nodeId = 1;
    string name = 2;
}

message UpdateNodeResponse {
    Node node = 1;
}

message GetNodeRequest{
    string nodeId = 1;
}

message GetNodeResponse{
    Node node = 1;
}

message GetAllNodeRequest{
}

message GetAllNodeResponse{
   repeated Node node = 1;
}

message GetFreeNodeRequest{
}

message GetFreeNodeResponse{
   repeated Node node = 1;
}


message Node {
    string nodeId = 1;
    string state = 2;
    string name = 3;
    string type = 4;
    repeated Node attached = 5;
    bool allocated = 6;
    string network = 7;
}

message AddNodeRequest{
    Node node = 1;
}

message AddNodeResponse{
    Node node = 1;
}


message DeleteRequest{
    string nodeId = 1;
}

message DeleteResponse{
    string nodeId = 1;
}


