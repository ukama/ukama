/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2023-present, Ukama Inc.
 */

syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/registry/node/pb/gen";

import "validator.proto";
import "ukama/node.proto";
import "google/protobuf/timestamp.proto";

package ukama.registry.node.v1;

service NodeService {
    /** Deprecated */
    rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc GetNodesForSite(GetBySiteRequest) returns (GetBySiteResponse);
    rpc GetNodesForNetwork(GetByNetworkRequest) returns (GetByNetworkResponse);
    rpc GetNodesByState(GetNodesByStateRequest) returns (GetNodesResponse);
    /** End of Deprecated */

    // List API is used for getting nodes by nodeId, siteId, networkId, connectivity, state, type
    rpc List(ListRequest) returns (ListResponse);
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
    rpc UpdateNodeState(UpdateNodeStateRequest) returns (UpdateNodeResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc AttachNodes(AttachNodesRequest) returns (AttachNodesResponse);
    rpc DetachNode(DetachNodeRequest) returns (DetachNodeResponse);
    rpc AddNodeToSite(AddNodeToSiteRequest)returns (AddNodeToSiteResponse);
    rpc ReleaseNodeFromSite(ReleaseNodeFromSiteRequest)returns (ReleaseNodeFromSiteResponse);
}

message AddNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];;
    string name = 2;
    double latitude = 3;
    double longitude = 4;
}

message AddNodeResponse{
    Node node = 1;
}

message ListRequest{
    string nodeId = 1 [json_name = "node_id"];
    string siteId = 2 [json_name = "site_id"];
    string networkId = 3 [json_name = "network_id"];
    ukama.common.v1.NodeConnectivity connectivity = 4;
    ukama.common.v1.NodeState state = 5;
    string type = 6;
}

message ListResponse{
   repeated Node nodes = 1;
}

message GetNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message GetNodesRequest{}

message GetNodeResponse{
    Node node = 1;
}

message GetBySiteRequest{
    string siteId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "site_id"];
}

message GetBySiteResponse{
    string siteId = 1 [json_name = "site_id"];
    repeated Node nodes = 2;
}

message GetByNetworkRequest{
    string networkId = 1 [json_name = "network_id"];
}

message GetByNetworkResponse{
    string networkId = 1 [json_name = "network_id"];
    repeated Node nodes = 2;
}

message GetNodesByStateRequest{
    ukama.common.v1.NodeConnectivity connectivity = 1;
    ukama.common.v1.NodeState state = 2;
}

message GetNodesResponse{
   repeated Node nodes = 1;
}

message  UpdateNodeStateRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string connectivity = 2;
    string state = 3;
}

message  UpdateNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string name = 2;
    double latitude = 3;
    double longitude = 4;
}

message UpdateNodeResponse {
    Node node = 1;
}


message DeleteNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message DeleteNodeResponse{
}


message AttachNodesRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    repeated string  attachedNodes = 2;
}

message AttachNodesResponse {
}


message DetachNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message DetachNodeResponse {
}


message AddNodeToSiteRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string networkId = 2 ;
    string siteId = 3 ;
}

message AddNodeToSiteResponse {
}

message ReleaseNodeFromSiteRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message ReleaseNodeFromSiteResponse {
}

message NodeStatus {
    ukama.common.v1.NodeConnectivity connectivity = 1;
    ukama.common.v1.NodeState state = 2;
}

message Site {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string siteId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "site_id"];
    string networkId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "network_id"];
    google.protobuf.Timestamp addedAt = 4 [json_name = "added_at"];
}

message Node {
    string id = 1 [(validator.field) = {string_not_empty: true}];
    string name = 2;
    string type = 4;
    NodeStatus status = 5;
    Site site = 6;
    repeated Node attached = 7;
    double latitude = 8;
    double longitude = 9;
}
