syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/registry/node/pb/gen";

package ukama.registry.node.v1;


service NodeService {
    rpc AttachNodes(AttachNodesRequest) returns (AttachNodesResponse);
    rpc DetachNode(DetachNodeRequest) returns (DetachNodeResponse);
    rpc UpdateNodeState(UpdateNodeStateRequest) returns (UpdateNodeStateResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc GetAllNodes(GetAllNodesRequest) returns (GetAllNodesResponse);
    rpc GetFreeNodes(GetFreeNodesRequest) returns (GetFreeNodesResponse);
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc AddNodeToNetwork(AddNodeToNetworkRequest)returns (AddNodeToNetworkResponse);
    rpc ReleaseNodeFromNetwork(ReleaseNodeFromNetworkRequest)returns (ReleaseNodeFromNetworkResponse);
}


message AddNodeToNetworkRequest {
    string node = 1;
    string network = 2;
}

message AddNodeToNetworkResponse {

}

message ReleaseNodeFromNetworkRequest {
    string node = 1;
}

message ReleaseNodeFromNetworkResponse {

}

message AttachNodesRequest {
    string parentNode = 1;
    repeated string  attachedNodes = 2;
}

message AttachNodesResponse {

}

message DetachNodeRequest{
    string node = 2;
}

message DetachNodeResponse {

}

message  UpdateNodeStateRequest{
    string node = 1;
    string state = 2;
}

message UpdateNodeStateResponse{
    string node = 1;
    string state = 2;
}


message  UpdateNodeRequest{
    string node = 1;
    string name = 2;
}

message UpdateNodeResponse {
    Node node = 1;
}

message GetNodeRequest{
    string node = 1;
}

message GetNodeResponse{
    Node node = 1;
}

message GetAllNodesRequest{
}

message GetAllNodesResponse{
   repeated Node node = 1;
}

message GetFreeNodesRequest{
}

message GetFreeNodesResponse{
   repeated Node node = 1;
}


message Node {
    string node = 1;
    string state = 2;
    string name = 3;
    string type = 4;
    repeated Node attached = 5;
    bool allocated = 6;
    string network = 7;
}

message AddNodeRequest{
    Node node = 1;
}

message AddNodeResponse{
    Node node = 1;
}


message DeleteNodeRequest{
    string node = 1;
}

message DeleteNodeResponse{
    string node = 1;
}


