syntax = "proto3";

option go_package = "github.com/ukama/ukama/systems/registry/node/pb/gen";


import "validator.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";


package ukama.registry.node.v1;


service NodeService {
    rpc AttachNodes(AttachNodesRequest) returns (AttachNodesResponse);
    rpc DetachNode(DetachNodeRequest) returns (DetachNodeResponse);
    rpc UpdateNodeState(UpdateNodeStateRequest) returns (UpdateNodeResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc GetAllNodes(GetAllNodesRequest) returns (GetAllNodesResponse);
    rpc GetFreeNodes(GetFreeNodesRequest) returns (GetFreeNodesResponse);
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc AddNodeToNetwork(AddNodeToNetworkRequest)returns (AddNodeToNetworkResponse);
    rpc ReleaseNodeFromNetwork(ReleaseNodeFromNetworkRequest)returns (ReleaseNodeFromNetworkResponse);
}


message AddNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}];
    string orgId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "org_id"];
	string name = 3;
	string state = 4;
}

message AddNodeResponse{
    Node node = 1;
}


message GetNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message GetNodeResponse{
    Node node = 1;
}


message GetBySiteRequest{
    string siteId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "site_id"];
}

message GetBySiteResponse{
    string siteId = 1 [json_name = "site_id"];
    repeated Node nodes = 2;
}


message GetFreeNodesRequest{
}

message GetFreeNodesResponse{
   repeated Node node = 1;
}


message GetAllNodesRequest{
}

message GetAllNodesResponse{
   repeated Node node = 1;
}


message  UpdateNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string name = 2;
}

message UpdateNodeResponse {
    Node node = 1;
}


message  UpdateNodeStateRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string state = 2;
}


message DeleteNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message DeleteNodeResponse{
}


message AttachNodesRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    repeated string  attachedNodes = 2;
}

message AttachNodesResponse {

}


message DetachNodeRequest{
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message DetachNodeResponse {

}

message AddNodeToNetworkRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
    string networkId = 2;
    string siteId = 3;
}

message AddNodeToNetworkResponse {

}

message ReleaseNodeFromNetworkRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
}

message ReleaseNodeFromNetworkResponse {

}

message Node {
    string id = 1 [(validator.field) = {string_not_empty: true}];
    string name = 2;
    string orgId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "org_id"];
    string type = 4;
    string state = 5;
    repeated Node attached = 6;
    google.protobuf.Timestamp createdAt = 7 [json_name = "created_at"];
}
