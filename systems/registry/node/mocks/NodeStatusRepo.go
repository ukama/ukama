// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/registry/node/pkg/db"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// NodeStatusRepo is an autogenerated mock type for the NodeStatusRepo type
type NodeStatusRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *NodeStatusRepo) Delete(_a0 ukama.NodeID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *NodeStatusRepo) Get(_a0 ukama.NodeID) (*db.NodeStatus, error) {
	ret := _m.Called(_a0)

	var r0 *db.NodeStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) (*db.NodeStatus, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.NodeStatus); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *NodeStatusRepo) GetAll() ([]db.NodeStatus, error) {
	ret := _m.Called()

	var r0 []db.NodeStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.NodeStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.NodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeCount provides a mock function with given fields:
func (_m *NodeStatusRepo) GetNodeCount() (int64, int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() (int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: _a0
func (_m *NodeStatusRepo) Update(_a0 *db.NodeStatus) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.NodeStatus) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNodeStatusRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeStatusRepo creates a new instance of NodeStatusRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeStatusRepo(t mockConstructorTestingTNewNodeStatusRepo) *NodeStatusRepo {
	mock := &NodeStatusRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
