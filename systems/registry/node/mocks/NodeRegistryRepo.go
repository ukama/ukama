// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/registry/node/pkg/db"

	testing "testing"
)

// NodeRegistryRepo is an autogenerated mock type for the NodeRegistryRepo type
type NodeRegistryRepo struct {
	mock.Mock
}

// AddOrUpdate provides a mock function with given fields: node
func (_m *NodeRegistryRepo) AddOrUpdate(node *db.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodeRegistryRepo) Get(id int) (*db.Node, error) {
	ret := _m.Called(id)

	var r0 *db.Node
	if rf, ok := ret.Get(0).(func(int) *db.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeRegistryRepo creates a new instance of NodeRegistryRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeRegistryRepo(t testing.TB) *NodeRegistryRepo {
	mock := &NodeRegistryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
