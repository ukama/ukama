// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/node/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	ukama "github.com/ukama/ukama/systems/common/ukama"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// SiteRepo is an autogenerated mock type for the SiteRepo type
type SiteRepo struct {
	mock.Mock
}

// AddNodes provides a mock function with given fields: _a0, _a1
func (_m *SiteRepo) AddNodes(_a0 []*db.Site, _a1 func([]*db.Site, *gorm.DB) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*db.Site, func([]*db.Site, *gorm.DB) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFreeNodes provides a mock function with given fields:
func (_m *SiteRepo) GetFreeNodes() ([]db.Node, error) {
	ret := _m.Called()

	var r0 []db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreeNodesForOrg provides a mock function with given fields: _a0
func (_m *SiteRepo) GetFreeNodesForOrg(_a0 uuid.UUID) ([]db.Node, error) {
	ret := _m.Called(_a0)

	var r0 []db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Node, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: _a0
func (_m *SiteRepo) GetNodes(_a0 uuid.UUID) ([]db.Node, error) {
	ret := _m.Called(_a0)

	var r0 []db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Node, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAllocated provides a mock function with given fields: _a0
func (_m *SiteRepo) IsAllocated(_a0 ukama.NodeID) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ukama.NodeID) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveNodes provides a mock function with given fields: _a0
func (_m *SiteRepo) RemoveNodes(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSiteRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiteRepo creates a new instance of SiteRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiteRepo(t mockConstructorTestingTNewSiteRepo) *SiteRepo {
	mock := &SiteRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
