// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/node/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	ukama "github.com/ukama/ukama/systems/common/ukama"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *NodeRepo) Add(_a0 *db.Node, _a1 func(*db.Node, *gorm.DB) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node, func(*db.Node, *gorm.DB) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachNodes provides a mock function with given fields: nodeId, attachedNodeId
func (_m *NodeRepo) AttachNodes(nodeId ukama.NodeID, attachedNodeId []string) error {
	ret := _m.Called(nodeId, attachedNodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, []string) error); ok {
		r0 = rf(nodeId, attachedNodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *NodeRepo) Delete(_a0 ukama.NodeID, _a1 func(ukama.NodeID, *gorm.DB) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, func(ukama.NodeID, *gorm.DB) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachNode provides a mock function with given fields: detachNodeId
func (_m *NodeRepo) DetachNode(detachNodeId ukama.NodeID) error {
	ret := _m.Called(detachNodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) error); ok {
		r0 = rf(detachNodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *NodeRepo) Get(_a0 ukama.NodeID) (*db.Node, error) {
	ret := _m.Called(_a0)

	var r0 *db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) (*db.Node, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *NodeRepo) GetAll() ([]db.Node, error) {
	ret := _m.Called()

	var r0 []db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForOrg provides a mock function with given fields: _a0
func (_m *NodeRepo) GetForOrg(_a0 uuid.UUID) ([]db.Node, error) {
	ret := _m.Called(_a0)

	var r0 []db.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Node, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeCount provides a mock function with given fields:
func (_m *NodeRepo) GetNodeCount() (int64, int64, int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func() (int64, int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() int64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *NodeRepo) Update(_a0 *db.Node, _a1 func(*db.Node, *gorm.DB) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node, func(*db.Node, *gorm.DB) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNodeRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeRepo creates a new instance of NodeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeRepo(t mockConstructorTestingTNewNodeRepo) *NodeRepo {
	mock := &NodeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
