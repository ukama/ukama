// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	providers "github.com/ukama/ukama/systems/registry/member/pkg/providers"
)

// NucleusClientProvider is an autogenerated mock type for the NucleusClientProvider type
type NucleusClientProvider struct {
	mock.Mock
}

// GetOrgByName provides a mock function with given fields: name
func (_m *NucleusClientProvider) GetOrgByName(name string) (*providers.OrgInfo, error) {
	ret := _m.Called(name)

	var r0 *providers.OrgInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*providers.OrgInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *providers.OrgInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providers.OrgInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: userId
func (_m *NucleusClientProvider) GetUserById(userId string) (*providers.UserInfo, error) {
	ret := _m.Called(userId)

	var r0 *providers.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*providers.UserInfo, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *providers.UserInfo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providers.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOrgFromUser provides a mock function with given fields: orgId, userId
func (_m *NucleusClientProvider) RemoveOrgFromUser(orgId string, userId string) error {
	ret := _m.Called(orgId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrgToUser provides a mock function with given fields: orgId, userId
func (_m *NucleusClientProvider) UpdateOrgToUser(orgId string, userId string) error {
	ret := _m.Called(orgId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNucleusClientProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewNucleusClientProvider creates a new instance of NucleusClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNucleusClientProvider(t mockConstructorTestingTNewNucleusClientProvider) *NucleusClientProvider {
	mock := &NucleusClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
