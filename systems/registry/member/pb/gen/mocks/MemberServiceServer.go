// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/member/pb/gen"
)

// MemberServiceServer is an autogenerated mock type for the MemberServiceServer type
type MemberServiceServer struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) AddMember(_a0 context.Context, _a1 *gen.AddMemberRequest) (*gen.MemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest) (*gen.MemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest) *gen.MemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddMemberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOtherMember provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) AddOtherMember(_a0 context.Context, _a1 *gen.AddMemberRequest) (*gen.MemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest) (*gen.MemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest) *gen.MemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddMemberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) GetMember(_a0 context.Context, _a1 *gen.MemberRequest) (*gen.MemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest) (*gen.MemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest) *gen.MemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.MemberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) GetMembers(_a0 context.Context, _a1 *gen.GetMembersRequest) (*gen.GetMembersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMembersRequest) (*gen.GetMembersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMembersRequest) *gen.GetMembersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetMembersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) RemoveMember(_a0 context.Context, _a1 *gen.MemberRequest) (*gen.MemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest) (*gen.MemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest) *gen.MemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.MemberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMember provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) UpdateMember(_a0 context.Context, _a1 *gen.UpdateMemberRequest) (*gen.MemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateMemberRequest) (*gen.MemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateMemberRequest) *gen.MemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateMemberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedMemberServiceServer provides a mock function with given fields:
func (_m *MemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMemberServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemberServiceServer creates a new instance of MemberServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemberServiceServer(t mockConstructorTestingTNewMemberServiceServer) *MemberServiceServer {
	mock := &MemberServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
