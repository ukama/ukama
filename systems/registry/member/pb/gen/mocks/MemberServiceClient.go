// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/registry/member/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MemberServiceClient is an autogenerated mock type for the MemberServiceClient type
type MemberServiceClient struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) AddMember(ctx context.Context, in *gen.AddMemberRequest, opts ...grpc.CallOption) (*gen.MemberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest, ...grpc.CallOption) (*gen.MemberResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest, ...grpc.CallOption) *gen.MemberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddMemberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOtherMember provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) AddOtherMember(ctx context.Context, in *gen.AddMemberRequest, opts ...grpc.CallOption) (*gen.MemberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest, ...grpc.CallOption) (*gen.MemberResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddMemberRequest, ...grpc.CallOption) *gen.MemberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddMemberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) GetMember(ctx context.Context, in *gen.MemberRequest, opts ...grpc.CallOption) (*gen.MemberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest, ...grpc.CallOption) (*gen.MemberResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest, ...grpc.CallOption) *gen.MemberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.MemberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) GetMembers(ctx context.Context, in *gen.GetMembersRequest, opts ...grpc.CallOption) (*gen.GetMembersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMembersRequest, ...grpc.CallOption) (*gen.GetMembersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetMembersRequest, ...grpc.CallOption) *gen.GetMembersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetMembersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) RemoveMember(ctx context.Context, in *gen.MemberRequest, opts ...grpc.CallOption) (*gen.MemberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest, ...grpc.CallOption) (*gen.MemberResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.MemberRequest, ...grpc.CallOption) *gen.MemberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.MemberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMember provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) UpdateMember(ctx context.Context, in *gen.UpdateMemberRequest, opts ...grpc.CallOption) (*gen.MemberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.MemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateMemberRequest, ...grpc.CallOption) (*gen.MemberResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateMemberRequest, ...grpc.CallOption) *gen.MemberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.MemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateMemberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMemberServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemberServiceClient creates a new instance of MemberServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemberServiceClient(t mockConstructorTestingTNewMemberServiceClient) *MemberServiceClient {
	mock := &MemberServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
