// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/registry/network/pkg/db"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: node, nestedFunc
func (_m *NodeRepo) Add(node *db.Node, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, node)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node, ...func() error) error); ok {
		r0 = rf(node, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, nestedFunc
func (_m *NodeRepo) Delete(id ukama.NodeID, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, ...func() error) error); ok {
		r0 = rf(id, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodeRepo) Get(id ukama.NodeID) (*db.Node, error) {
	ret := _m.Called(id)

	var r0 *db.Node
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: orgName
func (_m *NodeRepo) GetByOrg(orgName string) ([]db.Node, error) {
	ret := _m.Called(orgName)

	var r0 []db.Node
	if rf, ok := ret.Get(0).(func(string) []db.Node); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, node, nestedFunc
func (_m *NodeRepo) Update(id ukama.NodeID, node *db.NodeAttributes, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, node)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, *db.NodeAttributes, ...func() error) error); ok {
		r0 = rf(id, node, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNodeRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeRepo creates a new instance of NodeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeRepo(t mockConstructorTestingTNewNodeRepo) *NodeRepo {
	mock := &NodeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
