// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/registry/network/pkg/db"
)

// NetRepo is an autogenerated mock type for the NetRepo type
type NetRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: orgId, network
func (_m *NetRepo) Add(orgId uint, network string) (*db.Network, error) {
	ret := _m.Called(orgId, network)

	var r0 *db.Network
	if rf, ok := ret.Get(0).(func(uint, string) *db.Network); ok {
		r0 = rf(orgId, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(orgId, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: orgName, network
func (_m *NetRepo) Delete(orgName string, network string) error {
	ret := _m.Called(orgName, network)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgName, network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: orgName, network
func (_m *NetRepo) Get(orgName string, network string) (*db.Network, error) {
	ret := _m.Called(orgName, network)

	var r0 *db.Network
	if rf, ok := ret.Get(0).(func(string, string) *db.Network); ok {
		r0 = rf(orgName, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *NetRepo) List() (map[string]map[string]map[db.NodeType]int, error) {
	ret := _m.Called()

	var r0 map[string]map[string]map[db.NodeType]int
	if rf, ok := ret.Get(0).(func() map[string]map[string]map[db.NodeType]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]map[db.NodeType]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNetRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetRepo creates a new instance of NetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetRepo(t mockConstructorTestingTNewNetRepo) *NetRepo {
	mock := &NetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
