// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/registry/network/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// NetRepo is an autogenerated mock type for the NetRepo type
type NetRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: network
func (_m *NetRepo) Add(network *db.Network) error {
	ret := _m.Called(network)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Network) error); ok {
		r0 = rf(network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: orgName, network
func (_m *NetRepo) Delete(orgName string, network string) error {
	ret := _m.Called(orgName, network)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgName, network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NetRepo) Get(id uuid.UUID) (*db.Network, error) {
	ret := _m.Called(id)

	var r0 *db.Network
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Network); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: orgName, network
func (_m *NetRepo) GetByName(orgName string, network string) (*db.Network, error) {
	ret := _m.Called(orgName, network)

	var r0 *db.Network
	if rf, ok := ret.Get(0).(func(string, string) *db.Network); ok {
		r0 = rf(orgName, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: orgID
func (_m *NetRepo) GetByOrg(orgID uuid.UUID) ([]db.Network, error) {
	ret := _m.Called(orgID)

	var r0 []db.Network
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Network); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNetRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetRepo creates a new instance of NetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetRepo(t mockConstructorTestingTNewNetRepo) *NetRepo {
	mock := &NetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
