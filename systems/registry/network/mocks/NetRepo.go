// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/network/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// NetRepo is an autogenerated mock type for the NetRepo type
type NetRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: network, nestedFunc
func (_m *NetRepo) Add(network *db.Network, nestedFunc func(*db.Network, *gorm.DB) error) error {
	ret := _m.Called(network, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Network, func(*db.Network, *gorm.DB) error) error); ok {
		r0 = rf(network, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *NetRepo) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NetRepo) Get(id uuid.UUID) (*db.Network, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Network
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Network, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Network); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *NetRepo) GetAll() ([]db.Network, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []db.Network
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Network, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Network); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Network)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: network
func (_m *NetRepo) GetByName(network string) (*db.Network, error) {
	ret := _m.Called(network)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *db.Network
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Network, error)); ok {
		return rf(network)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Network); ok {
		r0 = rf(network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkCount provides a mock function with given fields:
func (_m *NetRepo) GetNetworkCount() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNetRepo creates a new instance of NetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetRepo {
	mock := &NetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
