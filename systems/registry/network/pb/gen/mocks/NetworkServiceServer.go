// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/network/pb/gen"
)

// NetworkServiceServer is an autogenerated mock type for the NetworkServiceServer type
type NetworkServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) Add(_a0 context.Context, _a1 *gen.AddRequest) (*gen.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) *gen.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSite provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) AddSite(_a0 context.Context, _a1 *gen.AddSiteRequest) (*gen.AddSiteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddSiteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddSiteRequest) *gen.AddSiteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSiteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddSiteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteRequest) (*gen.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteRequest) *gen.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) GetByName(_a0 context.Context, _a1 *gen.GetByNameRequest) (*gen.GetByNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNameRequest) *gen.GetByNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNetwork provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) GetByNetwork(_a0 context.Context, _a1 *gen.GetByNetworkRequest) (*gen.GetByNetworkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNetworkRequest) *gen.GetByNetworkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByNetworkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) GetByOrg(_a0 context.Context, _a1 *gen.GetByOrgRequest) (*gen.GetByOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByOrgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOrgRequest) *gen.GetByOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOrgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSite provides a mock function with given fields: _a0, _a1
func (_m *NetworkServiceServer) GetSite(_a0 context.Context, _a1 *gen.GetSiteRequest) (*gen.GetSiteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSiteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSiteRequest) *gen.GetSiteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSiteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSiteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNetworkServiceServer provides a mock function with given fields:
func (_m *NetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewNetworkServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetworkServiceServer creates a new instance of NetworkServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetworkServiceServer(t mockConstructorTestingTNewNetworkServiceServer) *NetworkServiceServer {
	mock := &NetworkServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
