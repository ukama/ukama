syntax = "proto3";

option go_package = "pb/gen";

package ukama.org.v1;

import "validator.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";


service OrgService {
    /* Orgs */
    rpc Add(AddRequest) returns (AddResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc GetByName(GetByNameRequest) returns (GetByNameResponse);
    rpc GetByOwner(GetByOwnerRequest) returns (GetByOwnerResponse);


    /* Users */
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);

    /* Members */
    rpc RegisterUser(RegisterUserRequest) returns (MemberResponse);
    rpc AddMember(MemberRequest) returns (MemberResponse);
    rpc GetMember(MemberRequest) returns (MemberResponse);
    rpc GetMembers(GetMembersRequest) returns (GetMembersResponse);
    rpc UpdateMember(UpdateMemberRequest) returns (MemberResponse);
    rpc RemoveMember(MemberRequest) returns (MemberResponse);
}

message AddRequest{
    Organization org = 1 [(validator.field) = {msg_exists : true}];
}

message AddResponse{
    Organization org = 1;
}

message GetRequest {
    uint64 id = 1 [json_name = "org_id"];
}

message GetResponse{
    Organization org = 1;
}

message GetByOwnerRequest{
    string userUuid = 1 [(validator.field) = {uuid_ver: 0, string_not_empty: true}, json_name = "user_uuid"];
}

message GetByOwnerResponse{
    string owner = 1 [(validator.field) = {uuid_ver: 0}];
    repeated Organization orgs = 2;
}

message GetByNameRequest {
    string name = 1;
}

message GetByNameResponse{
    Organization org = 1;
}

message MemberRequest{
    string orgName = 1 [json_name = "org"];
    string userUuid = 2 [(validator.field) = {uuid_ver: 0, string_not_empty: true}, json_name = "user_uuid"];
}

message MemberResponse{
  OrgUser member = 1;
}

message RegisterUserRequest{
    uint64 orgId = 1 [json_name = "org_id"];
    string userUuid = 2 [(validator.field) = {uuid_ver: 0, string_not_empty: true}, json_name = "user_uuid"];
}

message GetMembersRequest {
    string orgName = 1 [json_name = "org"];
}

message GetMembersResponse{
    string org = 1 [json_name = "org"];
    repeated OrgUser members = 2;
}

message UpdateMemberRequest {
  MemberRequest member = 1;
  OrgUserAttributes attributes = 2;
}

message UpdateUserRequest {
    string userUuid = 1 [(validator.field) = {uuid_ver: 0, string_not_empty: true}, json_name = "user_uuid"];
    UserAttributes attributes = 2;
}

message UpdateUserResponse {
    User user = 1;
}

message Organization {
    uint64 id = 1;
    string name = 2 [(validator.field) = {string_not_empty: true}]; // there is extra vlidation on repository level
    string owner = 3 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
    string certificate = 4;
    bool isDeactivated = 5 [json_name = "is_deactivated"];
    google.protobuf.Timestamp created_at = 6 [json_name = "created_at"];
}

message UserAttributes {
    bool isDeactivated = 3 [json_name = "is_deactivated"];
}

message User {
    uint64 userId = 1 [json_name = "user_id"];
    string uuid = 2 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
    bool isDeactivated = 3 [json_name = "is_deactivated"];
}

message OrgUserAttributes {
    bool isDeactivated = 1 [json_name = "is_deactivated"];
}

message OrgUser {
    uint64 orgId = 1 [json_name = "org_id"];
    uint64 userId = 2 [json_name = "user_id"];
    string uuid = 3 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
    bool isDeactivated = 4 [json_name = "is_deactivated"];
    google.protobuf.Timestamp created_at = 5 [json_name = "member_since"];
}
