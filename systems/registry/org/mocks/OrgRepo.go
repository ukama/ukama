// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/services/cloud/org/pkg/db"

	testing "testing"
)

// OrgRepo is an autogenerated mock type for the OrgRepo type
type OrgRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: org, nestedFunc
func (_m *OrgRepo) Add(org *db.Org, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, org)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Org, ...func() error) error); ok {
		r0 = rf(org, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: name
func (_m *OrgRepo) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *OrgRepo) Get(id int) (*db.Org, error) {
	ret := _m.Called(id)

	var r0 *db.Org
	if rf, ok := ret.Get(0).(func(int) *db.Org); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *OrgRepo) GetByName(name string) (*db.Org, error) {
	ret := _m.Called(name)

	var r0 *db.Org
	if rf, ok := ret.Get(0).(func(string) *db.Org); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrgRepo creates a new instance of OrgRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrgRepo(t testing.TB) *OrgRepo {
	mock := &OrgRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
