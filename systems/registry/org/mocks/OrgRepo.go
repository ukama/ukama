// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/org/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OrgRepo is an autogenerated mock type for the OrgRepo type
type OrgRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: org, nestedFunc
func (_m *OrgRepo) Add(org *db.Org, nestedFunc func(*db.Org, *gorm.DB) error) error {
	ret := _m.Called(org, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Org, func(*db.Org, *gorm.DB) error) error); ok {
		r0 = rf(org, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMember provides a mock function with given fields: member
func (_m *OrgRepo) AddMember(member *db.OrgUser) error {
	ret := _m.Called(member)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.OrgUser) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *OrgRepo) Get(id uint) (*db.Org, error) {
	ret := _m.Called(id)

	var r0 *db.Org
	if rf, ok := ret.Get(0).(func(uint) *db.Org); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *OrgRepo) GetByName(name string) (*db.Org, error) {
	ret := _m.Called(name)

	var r0 *db.Org
	if rf, ok := ret.Get(0).(func(string) *db.Org); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwner provides a mock function with given fields: _a0
func (_m *OrgRepo) GetByOwner(_a0 uuid.UUID) ([]db.Org, error) {
	ret := _m.Called(_a0)

	var r0 []db.Org
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Org); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: orgID, userUUID
func (_m *OrgRepo) GetMember(orgID uint, userUUID uuid.UUID) (*db.OrgUser, error) {
	ret := _m.Called(orgID, userUUID)

	var r0 *db.OrgUser
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) *db.OrgUser); ok {
		r0 = rf(orgID, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.OrgUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uuid.UUID) error); ok {
		r1 = rf(orgID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: orgID
func (_m *OrgRepo) GetMembers(orgID uint) ([]db.OrgUser, error) {
	ret := _m.Called(orgID)

	var r0 []db.OrgUser
	if rf, ok := ret.Get(0).(func(uint) []db.OrgUser); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.OrgUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: orgID, userUUID
func (_m *OrgRepo) RemoveMember(orgID uint, userUUID uuid.UUID) error {
	ret := _m.Called(orgID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) error); ok {
		r0 = rf(orgID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: orgID, member
func (_m *OrgRepo) UpdateMember(orgID uint, member *db.OrgUser) error {
	ret := _m.Called(orgID, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *db.OrgUser) error); ok {
		r0 = rf(orgID, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrgRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrgRepo creates a new instance of OrgRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrgRepo(t mockConstructorTestingTNewOrgRepo) *OrgRepo {
	mock := &OrgRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
