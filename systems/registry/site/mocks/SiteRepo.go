// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/site/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// SiteRepo is an autogenerated mock type for the SiteRepo type
type SiteRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: site, nestedFunc
func (_m *SiteRepo) Add(site *db.Site, nestedFunc func(*db.Site, *gorm.DB) error) error {
	ret := _m.Called(site, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Site, func(*db.Site, *gorm.DB) error) error); ok {
		r0 = rf(site, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: siteID
func (_m *SiteRepo) Get(siteID uuid.UUID) (*db.Site, error) {
	ret := _m.Called(siteID)

	var r0 *db.Site
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Site, error)); ok {
		return rf(siteID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Site); ok {
		r0 = rf(siteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Site)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(siteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteCount provides a mock function with given fields: networkId
func (_m *SiteRepo) GetSiteCount(networkId uuid.UUID) (int64, error) {
	ret := _m.Called(networkId)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (int64, error)); ok {
		return rf(networkId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) int64); ok {
		r0 = rf(networkId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(networkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields: networkId
func (_m *SiteRepo) GetSites(networkId uuid.UUID) ([]db.Site, error) {
	ret := _m.Called(networkId)

	var r0 []db.Site
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Site, error)); ok {
		return rf(networkId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Site); ok {
		r0 = rf(networkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Site)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(networkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: site
func (_m *SiteRepo) Update(site *db.Site) error {
	ret := _m.Called(site)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Site) error); ok {
		r0 = rf(site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSiteRepo creates a new instance of SiteRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSiteRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SiteRepo {
	mock := &SiteRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
