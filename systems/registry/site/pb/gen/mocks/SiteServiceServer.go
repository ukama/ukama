// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/site/pb/gen"
)

// SiteServiceServer is an autogenerated mock type for the SiteServiceServer type
type SiteServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *SiteServiceServer) Add(_a0 context.Context, _a1 *gen.AddRequest) (*gen.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) (*gen.AddResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) *gen.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *SiteServiceServer) Get(_a0 context.Context, _a1 *gen.GetRequest) (*gen.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) (*gen.GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) *gen.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields: _a0, _a1
func (_m *SiteServiceServer) GetSites(_a0 context.Context, _a1 *gen.GetSitesRequest) (*gen.GetSitesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSitesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSitesRequest) (*gen.GetSitesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSitesRequest) *gen.GetSitesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSitesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSitesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SiteServiceServer) Update(_a0 context.Context, _a1 *gen.UpdateRequest) (*gen.UpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateRequest) (*gen.UpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateRequest) *gen.UpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSiteServiceServer provides a mock function with given fields:
func (_m *SiteServiceServer) mustEmbedUnimplementedSiteServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewSiteServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiteServiceServer creates a new instance of SiteServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiteServiceServer(t mockConstructorTestingTNewSiteServiceServer) *SiteServiceServer {
	mock := &SiteServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
