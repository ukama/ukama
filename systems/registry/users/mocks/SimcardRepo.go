// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/services/cloud/users/pkg/db"

	testing "testing"

	uuid "github.com/google/uuid"
)

// SimcardRepo is an autogenerated mock type for the SimcardRepo type
type SimcardRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: simcard
func (_m *SimcardRepo) Add(simcard *db.Simcard) error {
	ret := _m.Called(simcard)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Simcard) error); ok {
		r0 = rf(simcard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: iccid
func (_m *SimcardRepo) Delete(iccid string) error {
	ret := _m.Called(iccid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUser provides a mock function with given fields: userUuid
func (_m *SimcardRepo) DeleteByUser(userUuid uuid.UUID) error {
	ret := _m.Called(userUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(userUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: iccid
func (_m *SimcardRepo) Get(iccid string) (*db.Simcard, error) {
	ret := _m.Called(iccid)

	var r0 *db.Simcard
	if rf, ok := ret.Get(0).(func(string) *db.Simcard); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Simcard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServices provides a mock function with given fields: ukama, carrier, nested
func (_m *SimcardRepo) UpdateServices(ukama *db.Service, carrier *db.Service, nested ...func() error) error {
	_va := make([]interface{}, len(nested))
	for _i := range nested {
		_va[_i] = nested[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ukama, carrier)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Service, *db.Service, ...func() error) error); ok {
		r0 = rf(ukama, carrier, nested...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSimcardRepo creates a new instance of SimcardRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimcardRepo(t testing.TB) *SimcardRepo {
	mock := &SimcardRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
