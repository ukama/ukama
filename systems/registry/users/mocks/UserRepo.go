// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/users/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: user
func (_m *UserRepo) Add(user *db.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, nestedFunc
func (_m *UserRepo) Delete(_a0 uuid.UUID, nestedFunc func(uuid.UUID, *gorm.DB) error) error {
	ret := _m.Called(_a0, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(uuid.UUID, *gorm.DB) error) error); ok {
		r0 = rf(_a0, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *UserRepo) Get(_a0 uuid.UUID) (*db.User, error) {
	ret := _m.Called(_a0)

	var r0 *db.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UserRepo) Update(user *db.User) (*db.User, error) {
	ret := _m.Called(user)

	var r0 *db.User
	if rf, ok := ret.Get(0).(func(*db.User) *db.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
