// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/registry/invitation/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// InvitationServiceClient is an autogenerated mock type for the InvitationServiceClient type
type InvitationServiceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *InvitationServiceClient) Add(ctx context.Context, in *gen.AddInvitationRequest, opts ...grpc.CallOption) (*gen.AddInvitationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddInvitationRequest, ...grpc.CallOption) (*gen.AddInvitationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddInvitationRequest, ...grpc.CallOption) *gen.AddInvitationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *InvitationServiceClient) Delete(ctx context.Context, in *gen.DeleteInvitationRequest, opts ...grpc.CallOption) (*gen.DeleteInvitationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteInvitationRequest, ...grpc.CallOption) (*gen.DeleteInvitationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteInvitationRequest, ...grpc.CallOption) *gen.DeleteInvitationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *InvitationServiceClient) Get(ctx context.Context, in *gen.GetInvitationRequest, opts ...grpc.CallOption) (*gen.GetInvitationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationRequest, ...grpc.CallOption) (*gen.GetInvitationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationRequest, ...grpc.CallOption) *gen.GetInvitationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: ctx, in, opts
func (_m *InvitationServiceClient) GetByOrg(ctx context.Context, in *gen.GetInvitationByOrgRequest, opts ...grpc.CallOption) (*gen.GetInvitationByOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetInvitationByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByOrgRequest, ...grpc.CallOption) (*gen.GetInvitationByOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByOrgRequest, ...grpc.CallOption) *gen.GetInvitationByOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetInvitationByOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationByEmail provides a mock function with given fields: ctx, in, opts
func (_m *InvitationServiceClient) GetInvitationByEmail(ctx context.Context, in *gen.GetInvitationByEmailRequest, opts ...grpc.CallOption) (*gen.GetInvitationByEmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetInvitationByEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByEmailRequest, ...grpc.CallOption) (*gen.GetInvitationByEmailResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByEmailRequest, ...grpc.CallOption) *gen.GetInvitationByEmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationByEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetInvitationByEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, in, opts
func (_m *InvitationServiceClient) UpdateStatus(ctx context.Context, in *gen.UpdateInvitationStatusRequest, opts ...grpc.CallOption) (*gen.UpdateInvitationStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateInvitationStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateInvitationStatusRequest, ...grpc.CallOption) (*gen.UpdateInvitationStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateInvitationStatusRequest, ...grpc.CallOption) *gen.UpdateInvitationStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateInvitationStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateInvitationStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInvitationServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvitationServiceClient creates a new instance of InvitationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvitationServiceClient(t mockConstructorTestingTNewInvitationServiceClient) *InvitationServiceClient {
	mock := &InvitationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
