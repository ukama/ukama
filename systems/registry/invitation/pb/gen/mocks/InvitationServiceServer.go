// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/invitation/pb/gen"
)

// InvitationServiceServer is an autogenerated mock type for the InvitationServiceServer type
type InvitationServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) Add(_a0 context.Context, _a1 *gen.AddInvitationRequest) (*gen.AddInvitationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddInvitationRequest) (*gen.AddInvitationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddInvitationRequest) *gen.AddInvitationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddInvitationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteInvitationRequest) (*gen.DeleteInvitationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteInvitationRequest) (*gen.DeleteInvitationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteInvitationRequest) *gen.DeleteInvitationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteInvitationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) Get(_a0 context.Context, _a1 *gen.GetInvitationRequest) (*gen.GetInvitationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationRequest) (*gen.GetInvitationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationRequest) *gen.GetInvitationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetInvitationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) GetByOrg(_a0 context.Context, _a1 *gen.GetInvitationByOrgRequest) (*gen.GetInvitationByOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetInvitationByOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByOrgRequest) (*gen.GetInvitationByOrgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByOrgRequest) *gen.GetInvitationByOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationByOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetInvitationByOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationByEmail provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) GetInvitationByEmail(_a0 context.Context, _a1 *gen.GetInvitationByEmailRequest) (*gen.GetInvitationByEmailResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetInvitationByEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByEmailRequest) (*gen.GetInvitationByEmailResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetInvitationByEmailRequest) *gen.GetInvitationByEmailResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetInvitationByEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetInvitationByEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) UpdateStatus(_a0 context.Context, _a1 *gen.UpdateInvitationStatusRequest) (*gen.UpdateInvitationStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateInvitationStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateInvitationStatusRequest) (*gen.UpdateInvitationStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateInvitationStatusRequest) *gen.UpdateInvitationStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateInvitationStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateInvitationStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedInvitationServiceServer provides a mock function with given fields:
func (_m *InvitationServiceServer) mustEmbedUnimplementedInvitationServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewInvitationServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvitationServiceServer creates a new instance of InvitationServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvitationServiceServer(t mockConstructorTestingTNewInvitationServiceServer) *InvitationServiceServer {
	mock := &InvitationServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
