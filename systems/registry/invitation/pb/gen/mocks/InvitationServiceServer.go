// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/registry/invitation/pb/gen"
)

// InvitationServiceServer is an autogenerated mock type for the InvitationServiceServer type
type InvitationServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) Add(_a0 context.Context, _a1 *gen.AddRequest) (*gen.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) (*gen.AddResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) *gen.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteRequest) (*gen.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *gen.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteRequest) (*gen.DeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteRequest) *gen.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) Get(_a0 context.Context, _a1 *gen.GetRequest) (*gen.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) (*gen.GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) *gen.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) GetAll(_a0 context.Context, _a1 *gen.GetAllRequest) (*gen.GetAllResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *gen.GetAllResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllRequest) (*gen.GetAllResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetAllRequest) *gen.GetAllResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetAllResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) GetByEmail(_a0 context.Context, _a1 *gen.GetByEmailRequest) (*gen.GetByEmailResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *gen.GetByEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByEmailRequest) (*gen.GetByEmailResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByEmailRequest) *gen.GetByEmailResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *InvitationServiceServer) UpdateStatus(_a0 context.Context, _a1 *gen.UpdateStatusRequest) (*gen.UpdateStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *gen.UpdateStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStatusRequest) (*gen.UpdateStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStatusRequest) *gen.UpdateStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedInvitationServiceServer provides a mock function with given fields:
func (_m *InvitationServiceServer) mustEmbedUnimplementedInvitationServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewInvitationServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvitationServiceServer creates a new instance of InvitationServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvitationServiceServer(t mockConstructorTestingTNewInvitationServiceServer) *InvitationServiceServer {
	mock := &InvitationServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
