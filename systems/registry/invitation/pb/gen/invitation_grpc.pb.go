// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: invitation.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvitationServiceClient is the client API for InvitationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationServiceClient interface {
	// Invitations
	Add(ctx context.Context, in *AddInvitationRequest, opts ...grpc.CallOption) (*AddInvitationResponse, error)
	Get(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*GetInvitationResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateInvitationStatusRequest, opts ...grpc.CallOption) (*UpdateInvitationStatusResponse, error)
	Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*DeleteInvitationResponse, error)
	GetByOrg(ctx context.Context, in *GetInvitationByOrgRequest, opts ...grpc.CallOption) (*GetInvitationByOrgResponse, error)
	GetInvitationByEmail(ctx context.Context, in *GetInvitationByEmailRequest, opts ...grpc.CallOption) (*GetInvitationByEmailResponse, error)
}

type invitationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationServiceClient(cc grpc.ClientConnInterface) InvitationServiceClient {
	return &invitationServiceClient{cc}
}

func (c *invitationServiceClient) Add(ctx context.Context, in *AddInvitationRequest, opts ...grpc.CallOption) (*AddInvitationResponse, error) {
	out := new(AddInvitationResponse)
	err := c.cc.Invoke(ctx, "/ukama.registry.invitation.v1.InvitationService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Get(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*GetInvitationResponse, error) {
	out := new(GetInvitationResponse)
	err := c.cc.Invoke(ctx, "/ukama.registry.invitation.v1.InvitationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) UpdateStatus(ctx context.Context, in *UpdateInvitationStatusRequest, opts ...grpc.CallOption) (*UpdateInvitationStatusResponse, error) {
	out := new(UpdateInvitationStatusResponse)
	err := c.cc.Invoke(ctx, "/ukama.registry.invitation.v1.InvitationService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*DeleteInvitationResponse, error) {
	out := new(DeleteInvitationResponse)
	err := c.cc.Invoke(ctx, "/ukama.registry.invitation.v1.InvitationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) GetByOrg(ctx context.Context, in *GetInvitationByOrgRequest, opts ...grpc.CallOption) (*GetInvitationByOrgResponse, error) {
	out := new(GetInvitationByOrgResponse)
	err := c.cc.Invoke(ctx, "/ukama.registry.invitation.v1.InvitationService/GetByOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) GetInvitationByEmail(ctx context.Context, in *GetInvitationByEmailRequest, opts ...grpc.CallOption) (*GetInvitationByEmailResponse, error) {
	out := new(GetInvitationByEmailResponse)
	err := c.cc.Invoke(ctx, "/ukama.registry.invitation.v1.InvitationService/GetInvitationByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationServiceServer is the server API for InvitationService service.
// All implementations must embed UnimplementedInvitationServiceServer
// for forward compatibility
type InvitationServiceServer interface {
	// Invitations
	Add(context.Context, *AddInvitationRequest) (*AddInvitationResponse, error)
	Get(context.Context, *GetInvitationRequest) (*GetInvitationResponse, error)
	UpdateStatus(context.Context, *UpdateInvitationStatusRequest) (*UpdateInvitationStatusResponse, error)
	Delete(context.Context, *DeleteInvitationRequest) (*DeleteInvitationResponse, error)
	GetByOrg(context.Context, *GetInvitationByOrgRequest) (*GetInvitationByOrgResponse, error)
	GetInvitationByEmail(context.Context, *GetInvitationByEmailRequest) (*GetInvitationByEmailResponse, error)
	mustEmbedUnimplementedInvitationServiceServer()
}

// UnimplementedInvitationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationServiceServer struct {
}

func (UnimplementedInvitationServiceServer) Add(context.Context, *AddInvitationRequest) (*AddInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedInvitationServiceServer) Get(context.Context, *GetInvitationRequest) (*GetInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInvitationServiceServer) UpdateStatus(context.Context, *UpdateInvitationStatusRequest) (*UpdateInvitationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedInvitationServiceServer) Delete(context.Context, *DeleteInvitationRequest) (*DeleteInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInvitationServiceServer) GetByOrg(context.Context, *GetInvitationByOrgRequest) (*GetInvitationByOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOrg not implemented")
}
func (UnimplementedInvitationServiceServer) GetInvitationByEmail(context.Context, *GetInvitationByEmailRequest) (*GetInvitationByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationByEmail not implemented")
}
func (UnimplementedInvitationServiceServer) mustEmbedUnimplementedInvitationServiceServer() {}

// UnsafeInvitationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationServiceServer will
// result in compilation errors.
type UnsafeInvitationServiceServer interface {
	mustEmbedUnimplementedInvitationServiceServer()
}

func RegisterInvitationServiceServer(s grpc.ServiceRegistrar, srv InvitationServiceServer) {
	s.RegisterService(&InvitationService_ServiceDesc, srv)
}

func _InvitationService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.registry.invitation.v1.InvitationService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Add(ctx, req.(*AddInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.registry.invitation.v1.InvitationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Get(ctx, req.(*GetInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.registry.invitation.v1.InvitationService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).UpdateStatus(ctx, req.(*UpdateInvitationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.registry.invitation.v1.InvitationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Delete(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_GetByOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationByOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).GetByOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.registry.invitation.v1.InvitationService/GetByOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).GetByOrg(ctx, req.(*GetInvitationByOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_GetInvitationByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).GetInvitationByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.registry.invitation.v1.InvitationService/GetInvitationByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).GetInvitationByEmail(ctx, req.(*GetInvitationByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationService_ServiceDesc is the grpc.ServiceDesc for InvitationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.registry.invitation.v1.InvitationService",
	HandlerType: (*InvitationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _InvitationService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InvitationService_Get_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _InvitationService_UpdateStatus_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InvitationService_Delete_Handler,
		},
		{
			MethodName: "GetByOrg",
			Handler:    _InvitationService_GetByOrg_Handler,
		},
		{
			MethodName: "GetInvitationByEmail",
			Handler:    _InvitationService_GetInvitationByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invitation.proto",
}
