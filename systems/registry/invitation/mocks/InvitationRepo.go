// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/invitation/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// InvitationRepo is an autogenerated mock type for the InvitationRepo type
type InvitationRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: invitation, nestedFunc
func (_m *InvitationRepo) Add(invitation *db.Invitation, nestedFunc func(*db.Invitation, *gorm.DB) error) error {
	ret := _m.Called(invitation, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Invitation, func(*db.Invitation, *gorm.DB) error) error); ok {
		r0 = rf(invitation, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, nestedFunc
func (_m *InvitationRepo) Delete(id uuid.UUID, nestedFunc func(string, string) error) error {
	ret := _m.Called(id, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(string, string) error) error); ok {
		r0 = rf(id, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *InvitationRepo) Get(id uuid.UUID) (*db.Invitation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Invitation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Invitation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *InvitationRepo) GetAll() ([]*db.Invitation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*db.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*db.Invitation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*db.Invitation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *InvitationRepo) GetByEmail(email string) (*db.Invitation, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *db.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Invitation, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Invitation); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *InvitationRepo) UpdateStatus(id uuid.UUID, status uint8) error {
	ret := _m.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uint8) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserId provides a mock function with given fields: id, userId
func (_m *InvitationRepo) UpdateUserId(id uuid.UUID, userId uuid.UUID) error {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInvitationRepo creates a new instance of InvitationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvitationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvitationRepo {
	mock := &InvitationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
