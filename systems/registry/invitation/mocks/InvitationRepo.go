// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/registry/invitation/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// InvitationRepo is an autogenerated mock type for the InvitationRepo type
type InvitationRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: invitation, nestedFunc
func (_m *InvitationRepo) Add(invitation *db.Invitation, nestedFunc func(string, string) error) error {
	ret := _m.Called(invitation, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Invitation, func(string, string) error) error); ok {
		r0 = rf(invitation, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, nestedFunc
func (_m *InvitationRepo) Delete(id uuid.UUID, nestedFunc func(string, string) error) error {
	ret := _m.Called(id, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(string, string) error) error); ok {
		r0 = rf(id, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *InvitationRepo) Get(id uuid.UUID) (*db.Invitation, error) {
	ret := _m.Called(id)

	var r0 *db.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Invitation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Invitation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: org
func (_m *InvitationRepo) GetByOrg(org string) ([]*db.Invitation, error) {
	ret := _m.Called(org)

	var r0 []*db.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*db.Invitation, error)); ok {
		return rf(org)
	}
	if rf, ok := ret.Get(0).(func(string) []*db.Invitation); ok {
		r0 = rf(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationByEmail provides a mock function with given fields: email
func (_m *InvitationRepo) GetInvitationByEmail(email string) (*db.Invitation, error) {
	ret := _m.Called(email)

	var r0 *db.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Invitation, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Invitation); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *InvitationRepo) UpdateStatus(id uuid.UUID, status string) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewInvitationRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvitationRepo creates a new instance of InvitationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvitationRepo(t mockConstructorTestingTNewInvitationRepo) *InvitationRepo {
	mock := &InvitationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
