// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/inventory/accounting/pb/gen"
)

// accounting is an autogenerated mock type for the accounting type
type accounting struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *accounting) Get(id string) (*gen.GetResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCompany provides a mock function with given fields: c
func (_m *accounting) GetByCompany(c string) (*gen.GetByCompanmyResponse, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetByCompany")
	}

	var r0 *gen.GetByCompanmyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByCompanmyResponse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByCompanmyResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByCompanmyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncAccounts provides a mock function with given fields:
func (_m *accounting) SyncAccounts() (*gen.SyncAcountingResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SyncAccounts")
	}

	var r0 *gen.SyncAcountingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gen.SyncAcountingResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gen.SyncAcountingResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncAcountingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newAccounting creates a new instance of accounting. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newAccounting(t interface {
	mock.TestingT
	Cleanup(func())
}) *accounting {
	mock := &accounting{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
