// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/inventory/account/pb/gen"
)

// account is an autogenerated mock type for the account type
type account struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *account) Get(id string) (*gen.GetResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCompany provides a mock function with given fields: c
func (_m *account) GetByCompany(c string) (*gen.GetByCompanmyResponse, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetByCompany")
	}

	var r0 *gen.GetByCompanmyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByCompanmyResponse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByCompanmyResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByCompanmyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncAccounts provides a mock function with given fields:
func (_m *account) SyncAccounts() (*gen.SyncAcountsResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SyncAccounts")
	}

	var r0 *gen.SyncAcountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gen.SyncAcountsResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gen.SyncAcountsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncAcountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newAccount creates a new instance of account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *account {
	mock := &account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
