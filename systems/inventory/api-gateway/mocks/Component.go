// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/inventory/component/pb/gen"
)

// Component is an autogenerated mock type for the Component type
type Component struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *Component) Get(id string) (*gen.GetResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: uid, c
func (_m *Component) GetByUser(uid string, c string) (*gen.GetByUserResponse, error) {
	ret := _m.Called(uid, c)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 *gen.GetByUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.GetByUserResponse, error)); ok {
		return rf(uid, c)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.GetByUserResponse); ok {
		r0 = rf(uid, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: userId, partNumber, category
func (_m *Component) List(userId string, partNumber string, category string) (*gen.ListResponse, error) {
	ret := _m.Called(userId, partNumber, category)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *gen.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.ListResponse, error)); ok {
		return rf(userId, partNumber, category)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.ListResponse); ok {
		r0 = rf(userId, partNumber, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userId, partNumber, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncComponent provides a mock function with no fields
func (_m *Component) SyncComponent() (*gen.SyncComponentsResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SyncComponent")
	}

	var r0 *gen.SyncComponentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gen.SyncComponentsResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gen.SyncComponentsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncComponentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComponent creates a new instance of Component. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Component {
	mock := &Component{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
