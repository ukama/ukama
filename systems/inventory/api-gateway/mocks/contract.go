// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/inventory/contract/pb/gen"
)

// contract is an autogenerated mock type for the contract type
type contract struct {
	mock.Mock
}

// GetContracts provides a mock function with given fields: c, a
func (_m *contract) GetContracts(c string, a bool) (*gen.GetContractsResponse, error) {
	ret := _m.Called(c, a)

	if len(ret) == 0 {
		panic("no return value specified for GetContracts")
	}

	var r0 *gen.GetContractsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.GetContractsResponse, error)); ok {
		return rf(c, a)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.GetContractsResponse); ok {
		r0 = rf(c, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetContractsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(c, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newContract creates a new instance of contract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *contract {
	mock := &contract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
