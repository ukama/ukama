// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/inventory/contract/pb/gen"
)

// ContractServiceServer is an autogenerated mock type for the ContractServiceServer type
type ContractServiceServer struct {
	mock.Mock
}

// GetContracts provides a mock function with given fields: _a0, _a1
func (_m *ContractServiceServer) GetContracts(_a0 context.Context, _a1 *gen.GetContractsRequest) (*gen.GetContractsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetContracts")
	}

	var r0 *gen.GetContractsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetContractsRequest) (*gen.GetContractsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetContractsRequest) *gen.GetContractsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetContractsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetContractsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncContracts provides a mock function with given fields: _a0, _a1
func (_m *ContractServiceServer) SyncContracts(_a0 context.Context, _a1 *gen.SyncContractsRequest) (*gen.SyncContractsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SyncContracts")
	}

	var r0 *gen.SyncContractsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncContractsRequest) (*gen.SyncContractsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncContractsRequest) *gen.SyncContractsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncContractsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SyncContractsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedContractServiceServer provides a mock function with given fields:
func (_m *ContractServiceServer) mustEmbedUnimplementedContractServiceServer() {
	_m.Called()
}

// NewContractServiceServer creates a new instance of ContractServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractServiceServer {
	mock := &ContractServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
