// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/inventory/contract/pkg/db"
)

// ContractRepo is an autogenerated mock type for the ContractRepo type
type ContractRepo struct {
	mock.Mock
}

// GetContracts provides a mock function with given fields: company, active
func (_m *ContractRepo) GetContracts(company string, active bool) ([]*db.Contract, error) {
	ret := _m.Called(company, active)

	if len(ret) == 0 {
		panic("no return value specified for GetContracts")
	}

	var r0 []*db.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]*db.Contract, error)); ok {
		return rf(company, active)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []*db.Contract); ok {
		r0 = rf(company, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(company, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContractRepo creates a new instance of ContractRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractRepo {
	mock := &ContractRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
