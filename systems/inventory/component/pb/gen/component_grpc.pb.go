// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: component.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentServiceClient is the client API for ComponentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetByCompany(ctx context.Context, in *GetByCompanyRequest, opts ...grpc.CallOption) (*GetByCompanyResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	SyncComponents(ctx context.Context, in *SyncComponentsRequest, opts ...grpc.CallOption) (*SyncComponentsResponse, error)
}

type componentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentServiceClient(cc grpc.ClientConnInterface) ComponentServiceClient {
	return &componentServiceClient{cc}
}

func (c *componentServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ukama.inventory.component.v1.ComponentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentServiceClient) GetByCompany(ctx context.Context, in *GetByCompanyRequest, opts ...grpc.CallOption) (*GetByCompanyResponse, error) {
	out := new(GetByCompanyResponse)
	err := c.cc.Invoke(ctx, "/ukama.inventory.component.v1.ComponentService/GetByCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/ukama.inventory.component.v1.ComponentService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentServiceClient) SyncComponents(ctx context.Context, in *SyncComponentsRequest, opts ...grpc.CallOption) (*SyncComponentsResponse, error) {
	out := new(SyncComponentsResponse)
	err := c.cc.Invoke(ctx, "/ukama.inventory.component.v1.ComponentService/SyncComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentServiceServer is the server API for ComponentService service.
// All implementations must embed UnimplementedComponentServiceServer
// for forward compatibility
type ComponentServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetByCompany(context.Context, *GetByCompanyRequest) (*GetByCompanyResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	SyncComponents(context.Context, *SyncComponentsRequest) (*SyncComponentsResponse, error)
	mustEmbedUnimplementedComponentServiceServer()
}

// UnimplementedComponentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComponentServiceServer struct {
}

func (UnimplementedComponentServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedComponentServiceServer) GetByCompany(context.Context, *GetByCompanyRequest) (*GetByCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCompany not implemented")
}
func (UnimplementedComponentServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedComponentServiceServer) SyncComponents(context.Context, *SyncComponentsRequest) (*SyncComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncComponents not implemented")
}
func (UnimplementedComponentServiceServer) mustEmbedUnimplementedComponentServiceServer() {}

// UnsafeComponentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServiceServer will
// result in compilation errors.
type UnsafeComponentServiceServer interface {
	mustEmbedUnimplementedComponentServiceServer()
}

func RegisterComponentServiceServer(s grpc.ServiceRegistrar, srv ComponentServiceServer) {
	s.RegisterService(&ComponentService_ServiceDesc, srv)
}

func _ComponentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.inventory.component.v1.ComponentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentService_GetByCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).GetByCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.inventory.component.v1.ComponentService/GetByCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).GetByCompany(ctx, req.(*GetByCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.inventory.component.v1.ComponentService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentService_SyncComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).SyncComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.inventory.component.v1.ComponentService/SyncComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).SyncComponents(ctx, req.(*SyncComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentService_ServiceDesc is the grpc.ServiceDesc for ComponentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.inventory.component.v1.ComponentService",
	HandlerType: (*ComponentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ComponentService_Get_Handler,
		},
		{
			MethodName: "GetByCompany",
			Handler:    _ComponentService_GetByCompany_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ComponentService_Add_Handler,
		},
		{
			MethodName: "SyncComponents",
			Handler:    _ComponentService_SyncComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "component.proto",
}
