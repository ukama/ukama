// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/inventory/component/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// ComponentRepo is an autogenerated mock type for the ComponentRepo type
type ComponentRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: components
func (_m *ComponentRepo) Add(components []*db.Component) error {
	ret := _m.Called(components)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*db.Component) error); ok {
		r0 = rf(components)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields:
func (_m *ComponentRepo) Delete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ComponentRepo) Get(id uuid.UUID) (*db.Component, error) {
	ret := _m.Called(id)

	var r0 *db.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Component, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Component); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: userId, category
func (_m *ComponentRepo) GetByUser(userId string, category int32) ([]*db.Component, error) {
	ret := _m.Called(userId, category)

	var r0 []*db.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int32) ([]*db.Component, error)); ok {
		return rf(userId, category)
	}
	if rf, ok := ret.Get(0).(func(string, int32) []*db.Component); ok {
		r0 = rf(userId, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(userId, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComponentRepo creates a new instance of ComponentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentRepo {
	mock := &ComponentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
