// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/inventory/accounting/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// AccountingRepo is an autogenerated mock type for the AccountingRepo type
type AccountingRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: accounts
func (_m *AccountingRepo) Add(accounts []*db.Accounting) error {
	ret := _m.Called(accounts)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*db.Accounting) error); ok {
		r0 = rf(accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields:
func (_m *AccountingRepo) Delete() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *AccountingRepo) Get(id uuid.UUID) (*db.Accounting, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Accounting
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Accounting, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Accounting); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Accounting)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: userId
func (_m *AccountingRepo) GetByUser(userId string) ([]*db.Accounting, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*db.Accounting
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*db.Accounting, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []*db.Accounting); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Accounting)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountingRepo creates a new instance of AccountingRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountingRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountingRepo {
	mock := &AccountingRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
