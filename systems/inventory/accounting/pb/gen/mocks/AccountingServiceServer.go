// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/inventory/accounting/pb/gen"
)

// AccountingServiceServer is an autogenerated mock type for the AccountingServiceServer type
type AccountingServiceServer struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *AccountingServiceServer) Get(_a0 context.Context, _a1 *gen.GetRequest) (*gen.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) (*gen.GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) *gen.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: _a0, _a1
func (_m *AccountingServiceServer) GetByUser(_a0 context.Context, _a1 *gen.GetByUserRequest) (*gen.GetByUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 *gen.GetByUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByUserRequest) (*gen.GetByUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByUserRequest) *gen.GetByUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncAccounting provides a mock function with given fields: _a0, _a1
func (_m *AccountingServiceServer) SyncAccounting(_a0 context.Context, _a1 *gen.SyncAcountingRequest) (*gen.SyncAcountingResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SyncAccounting")
	}

	var r0 *gen.SyncAcountingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncAcountingRequest) (*gen.SyncAcountingResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncAcountingRequest) *gen.SyncAcountingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncAcountingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SyncAcountingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAccountingServiceServer provides a mock function with given fields:
func (_m *AccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {
	_m.Called()
}

// NewAccountingServiceServer creates a new instance of AccountingServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountingServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountingServiceServer {
	mock := &AccountingServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
