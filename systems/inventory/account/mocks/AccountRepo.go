// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/inventory/account/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// AccountRepo is an autogenerated mock type for the AccountRepo type
type AccountRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: accounts
func (_m *AccountRepo) Add(accounts []db.Account) error {
	ret := _m.Called(accounts)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]db.Account) error); ok {
		r0 = rf(accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *AccountRepo) Get(id uuid.UUID) (*db.Account, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCompany provides a mock function with given fields: company
func (_m *AccountRepo) GetByCompany(company string) ([]*db.Account, error) {
	ret := _m.Called(company)

	if len(ret) == 0 {
		panic("no return value specified for GetByCompany")
	}

	var r0 []*db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*db.Account, error)); ok {
		return rf(company)
	}
	if rf, ok := ret.Get(0).(func(string) []*db.Account); ok {
		r0 = rf(company)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountRepo creates a new instance of AccountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepo {
	mock := &AccountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
