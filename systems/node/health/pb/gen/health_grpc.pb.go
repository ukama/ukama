// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: health.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HealhtService_GetRunningApps_FullMethodName       = "/ukama.node.health.v1.healhtService/GetRunningApps"
	HealhtService_StoreRunningAppsInfo_FullMethodName = "/ukama.node.health.v1.healhtService/StoreRunningAppsInfo"
)

// HealhtServiceClient is the client API for HealhtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealhtServiceClient interface {
	GetRunningApps(ctx context.Context, in *GetRunningAppsRequest, opts ...grpc.CallOption) (*GetRunningAppsResponse, error)
	StoreRunningAppsInfo(ctx context.Context, in *StoreRunningAppsInfoRequest, opts ...grpc.CallOption) (*StoreRunningAppsInfoResponse, error)
}

type healhtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealhtServiceClient(cc grpc.ClientConnInterface) HealhtServiceClient {
	return &healhtServiceClient{cc}
}

func (c *healhtServiceClient) GetRunningApps(ctx context.Context, in *GetRunningAppsRequest, opts ...grpc.CallOption) (*GetRunningAppsResponse, error) {
	out := new(GetRunningAppsResponse)
	err := c.cc.Invoke(ctx, HealhtService_GetRunningApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healhtServiceClient) StoreRunningAppsInfo(ctx context.Context, in *StoreRunningAppsInfoRequest, opts ...grpc.CallOption) (*StoreRunningAppsInfoResponse, error) {
	out := new(StoreRunningAppsInfoResponse)
	err := c.cc.Invoke(ctx, HealhtService_StoreRunningAppsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealhtServiceServer is the server API for HealhtService service.
// All implementations must embed UnimplementedHealhtServiceServer
// for forward compatibility
type HealhtServiceServer interface {
	GetRunningApps(context.Context, *GetRunningAppsRequest) (*GetRunningAppsResponse, error)
	StoreRunningAppsInfo(context.Context, *StoreRunningAppsInfoRequest) (*StoreRunningAppsInfoResponse, error)
	mustEmbedUnimplementedHealhtServiceServer()
}

// UnimplementedHealhtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealhtServiceServer struct {
}

func (UnimplementedHealhtServiceServer) GetRunningApps(context.Context, *GetRunningAppsRequest) (*GetRunningAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningApps not implemented")
}
func (UnimplementedHealhtServiceServer) StoreRunningAppsInfo(context.Context, *StoreRunningAppsInfoRequest) (*StoreRunningAppsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRunningAppsInfo not implemented")
}
func (UnimplementedHealhtServiceServer) mustEmbedUnimplementedHealhtServiceServer() {}

// UnsafeHealhtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealhtServiceServer will
// result in compilation errors.
type UnsafeHealhtServiceServer interface {
	mustEmbedUnimplementedHealhtServiceServer()
}

func RegisterHealhtServiceServer(s grpc.ServiceRegistrar, srv HealhtServiceServer) {
	s.RegisterService(&HealhtService_ServiceDesc, srv)
}

func _HealhtService_GetRunningApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealhtServiceServer).GetRunningApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealhtService_GetRunningApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealhtServiceServer).GetRunningApps(ctx, req.(*GetRunningAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealhtService_StoreRunningAppsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRunningAppsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealhtServiceServer).StoreRunningAppsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealhtService_StoreRunningAppsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealhtServiceServer).StoreRunningAppsInfo(ctx, req.(*StoreRunningAppsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealhtService_ServiceDesc is the grpc.ServiceDesc for HealhtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealhtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.node.health.v1.healhtService",
	HandlerType: (*HealhtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunningApps",
			Handler:    _HealhtService_GetRunningApps_Handler,
		},
		{
			MethodName: "StoreRunningAppsInfo",
			Handler:    _HealhtService_StoreRunningAppsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health.proto",
}
