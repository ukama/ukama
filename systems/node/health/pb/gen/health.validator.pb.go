// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: health.proto

package gen

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetRunningAppsRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	return nil
}
func (this *GetRunningAppsResponse) Validate() error {
	if this.RunningApps != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RunningApps); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RunningApps", err)
		}
	}
	return nil
}
func (this *StoreRunningAppsInfoRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	for _, item := range this.System {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("System", err)
			}
		}
	}
	for _, item := range this.Capps {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Capps", err)
			}
		}
	}
	return nil
}
func (this *App) Validate() error {
	for _, item := range this.System {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("System", err)
			}
		}
	}
	for _, item := range this.Capps {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Capps", err)
			}
		}
	}
	return nil
}
func (this *Capps) Validate() error {
	for _, item := range this.Resources {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Resources", err)
			}
		}
	}
	return nil
}
func (this *System) Validate() error {
	return nil
}
func (this *Resource) Validate() error {
	return nil
}
func (this *StoreRunningAppsInfoResponse) Validate() error {
	return nil
}
