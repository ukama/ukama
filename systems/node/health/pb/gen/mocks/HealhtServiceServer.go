// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/health/pb/gen"
)

// HealhtServiceServer is an autogenerated mock type for the HealhtServiceServer type
type HealhtServiceServer struct {
	mock.Mock
}

// GetRunningApps provides a mock function with given fields: _a0, _a1
func (_m *HealhtServiceServer) GetRunningApps(_a0 context.Context, _a1 *gen.GetRunningAppsRequest) (*gen.GetRunningAppsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetRunningAppsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRunningAppsRequest) (*gen.GetRunningAppsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRunningAppsRequest) *gen.GetRunningAppsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRunningAppsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRunningAppsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreRunningAppsInfo provides a mock function with given fields: _a0, _a1
func (_m *HealhtServiceServer) StoreRunningAppsInfo(_a0 context.Context, _a1 *gen.StoreRunningAppsInfoRequest) (*gen.StoreRunningAppsInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.StoreRunningAppsInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreRunningAppsInfoRequest) (*gen.StoreRunningAppsInfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreRunningAppsInfoRequest) *gen.StoreRunningAppsInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StoreRunningAppsInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.StoreRunningAppsInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedHealhtServiceServer provides a mock function with given fields:
func (_m *HealhtServiceServer) mustEmbedUnimplementedHealhtServiceServer() {
	_m.Called()
}

// NewHealhtServiceServer creates a new instance of HealhtServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealhtServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealhtServiceServer {
	mock := &HealhtServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
