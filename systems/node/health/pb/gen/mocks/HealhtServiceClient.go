// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/node/health/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// HealhtServiceClient is an autogenerated mock type for the HealhtServiceClient type
type HealhtServiceClient struct {
	mock.Mock
}

// GetRunningApps provides a mock function with given fields: ctx, in, opts
func (_m *HealhtServiceClient) GetRunningApps(ctx context.Context, in *gen.GetRunningAppsRequest, opts ...grpc.CallOption) (*gen.GetRunningAppsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetRunningAppsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRunningAppsRequest, ...grpc.CallOption) (*gen.GetRunningAppsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRunningAppsRequest, ...grpc.CallOption) *gen.GetRunningAppsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRunningAppsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRunningAppsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreRunningAppsInfo provides a mock function with given fields: ctx, in, opts
func (_m *HealhtServiceClient) StoreRunningAppsInfo(ctx context.Context, in *gen.StoreRunningAppsInfoRequest, opts ...grpc.CallOption) (*gen.StoreRunningAppsInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.StoreRunningAppsInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreRunningAppsInfoRequest, ...grpc.CallOption) (*gen.StoreRunningAppsInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.StoreRunningAppsInfoRequest, ...grpc.CallOption) *gen.StoreRunningAppsInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StoreRunningAppsInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.StoreRunningAppsInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHealhtServiceClient creates a new instance of HealhtServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealhtServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealhtServiceClient {
	mock := &HealhtServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
