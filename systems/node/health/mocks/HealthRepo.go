// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/node/health/pkg/db"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// HealthRepo is an autogenerated mock type for the HealthRepo type
type HealthRepo struct {
	mock.Mock
}

// GetRunningAppsInfo provides a mock function with given fields: nodeId
func (_m *HealthRepo) GetRunningAppsInfo(nodeId ukama.NodeID) (*db.Health, error) {
	ret := _m.Called(nodeId)

	var r0 *db.Health
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) (*db.Health, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.Health); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Health)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreRunningAppsInfo provides a mock function with given fields: health, nestedFunc
func (_m *HealthRepo) StoreRunningAppsInfo(health *db.Health, nestedFunc func(string, string) error) error {
	ret := _m.Called(health, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Health, func(string, string) error) error); ok {
		r0 = rf(health, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHealthRepo creates a new instance of HealthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthRepo {
	mock := &HealthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
