// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RegistryProvider is an autogenerated mock type for the RegistryProvider type
type RegistryProvider struct {
	mock.Mock
}

// GetNodesBySite provides a mock function with given fields: siteId
func (_m *RegistryProvider) GetNodesBySite(siteId string) ([]string, error) {
	ret := _m.Called(siteId)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(siteId)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(siteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(siteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateNetwork provides a mock function with given fields: networkId, orgName
func (_m *RegistryProvider) ValidateNetwork(networkId string, orgName string) error {
	ret := _m.Called(networkId, orgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(networkId, orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSite provides a mock function with given fields: networkId, siteName, orgName
func (_m *RegistryProvider) ValidateSite(networkId string, siteName string, orgName string) error {
	ret := _m.Called(networkId, siteName, orgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(networkId, siteName, orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRegistryProvider creates a new instance of RegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryProvider {
	mock := &RegistryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
