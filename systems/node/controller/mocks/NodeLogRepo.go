// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/node/controller/pkg/db"
)

// NodeLogRepo is an autogenerated mock type for the NodeLogRepo type
type NodeLogRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: nodeLog
func (_m *NodeLogRepo) Add(nodeLog string) error {
	ret := _m.Called(nodeLog)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: nodeId
func (_m *NodeLogRepo) Get(nodeId string) (*db.NodeLog, error) {
	ret := _m.Called(nodeId)

	var r0 *db.NodeLog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.NodeLog, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.NodeLog); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NodeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeLogRepo creates a new instance of NodeLogRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeLogRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeLogRepo {
	mock := &NodeLogRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
