// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/controller/pb/gen"
)

// ControllerServiceServer is an autogenerated mock type for the ControllerServiceServer type
type ControllerServiceServer struct {
	mock.Mock
}

// PingNode provides a mock function with given fields: _a0, _a1
func (_m *ControllerServiceServer) PingNode(_a0 context.Context, _a1 *gen.PingNodeRequest) (*gen.PingNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PingNode")
	}

	var r0 *gen.PingNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.PingNodeRequest) (*gen.PingNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.PingNodeRequest) *gen.PingNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.PingNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.PingNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartNode provides a mock function with given fields: _a0, _a1
func (_m *ControllerServiceServer) RestartNode(_a0 context.Context, _a1 *gen.RestartNodeRequest) (*gen.RestartNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RestartNode")
	}

	var r0 *gen.RestartNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodeRequest) (*gen.RestartNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodeRequest) *gen.RestartNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RestartNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartNodes provides a mock function with given fields: _a0, _a1
func (_m *ControllerServiceServer) RestartNodes(_a0 context.Context, _a1 *gen.RestartNodesRequest) (*gen.RestartNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RestartNodes")
	}

	var r0 *gen.RestartNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodesRequest) (*gen.RestartNodesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodesRequest) *gen.RestartNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RestartNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartSite provides a mock function with given fields: _a0, _a1
func (_m *ControllerServiceServer) RestartSite(_a0 context.Context, _a1 *gen.RestartSiteRequest) (*gen.RestartSiteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RestartSite")
	}

	var r0 *gen.RestartSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartSiteRequest) (*gen.RestartSiteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartSiteRequest) *gen.RestartSiteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RestartSiteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleInternetSwitch provides a mock function with given fields: _a0, _a1
func (_m *ControllerServiceServer) ToggleInternetSwitch(_a0 context.Context, _a1 *gen.ToggleInternetSwitchRequest) (*gen.ToggleInternetSwitchResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ToggleInternetSwitch")
	}

	var r0 *gen.ToggleInternetSwitchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ToggleInternetSwitchRequest) (*gen.ToggleInternetSwitchResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ToggleInternetSwitchRequest) *gen.ToggleInternetSwitchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ToggleInternetSwitchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ToggleInternetSwitchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleRfSwitch provides a mock function with given fields: _a0, _a1
func (_m *ControllerServiceServer) ToggleRfSwitch(_a0 context.Context, _a1 *gen.ToggleRfSwitchRequest) (*gen.ToggleRfSwitchResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ToggleRfSwitch")
	}

	var r0 *gen.ToggleRfSwitchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ToggleRfSwitchRequest) (*gen.ToggleRfSwitchResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ToggleRfSwitchRequest) *gen.ToggleRfSwitchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ToggleRfSwitchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ToggleRfSwitchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedControllerServiceServer provides a mock function with no fields
func (_m *ControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {
	_m.Called()
}

// NewControllerServiceServer creates a new instance of ControllerServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControllerServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControllerServiceServer {
	mock := &ControllerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
