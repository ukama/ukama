// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/node/controller/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ControllerServiceClient is an autogenerated mock type for the ControllerServiceClient type
type ControllerServiceClient struct {
	mock.Mock
}

// RestartNode provides a mock function with given fields: ctx, in, opts
func (_m *ControllerServiceClient) RestartNode(ctx context.Context, in *gen.RestartNodeRequest, opts ...grpc.CallOption) (*gen.RestartNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RestartNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodeRequest, ...grpc.CallOption) (*gen.RestartNodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodeRequest, ...grpc.CallOption) *gen.RestartNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RestartNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartNodes provides a mock function with given fields: ctx, in, opts
func (_m *ControllerServiceClient) RestartNodes(ctx context.Context, in *gen.RestartNodesRequest, opts ...grpc.CallOption) (*gen.RestartNodesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RestartNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodesRequest, ...grpc.CallOption) (*gen.RestartNodesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartNodesRequest, ...grpc.CallOption) *gen.RestartNodesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RestartNodesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartSite provides a mock function with given fields: ctx, in, opts
func (_m *ControllerServiceClient) RestartSite(ctx context.Context, in *gen.RestartSiteRequest, opts ...grpc.CallOption) (*gen.RestartSiteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RestartSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartSiteRequest, ...grpc.CallOption) (*gen.RestartSiteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RestartSiteRequest, ...grpc.CallOption) *gen.RestartSiteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RestartSiteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewControllerServiceClient creates a new instance of ControllerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControllerServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControllerServiceClient {
	mock := &ControllerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
