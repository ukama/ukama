syntax = "proto3";
package ukama.node.controller.v1;
option go_package = "github.com/ukama/ukama/systems/node/controller/pb/gen";

import "validator.proto";


// Defines the service for controller operations
service ControllerService {
  rpc RestartSite(RestartSiteRequest) returns (RestartSiteResponse);
  rpc RestartNode(RestartNodeRequest) returns (RestartNodeResponse);
  rpc RestartNodes(RestartNodesRequest) returns (RestartNodesResponse);
  rpc ToggleInternetSwitch(ToggleInternetSwitchRequest) returns (ToggleInternetSwitchResponse);
  rpc PingNode(PingNodeRequest) returns  (PingNodeResponse);
}

message PingNodeRequest {
  string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
  string requestId = 2  [(validator.field) = {string_not_empty: true}, json_name = "request_id"];
  string message = 3;
  uint64 timestamp = 4;
}

message PingNodeResponse {
  string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];
  string requestId = 2  [(validator.field) = {string_not_empty: true}, json_name = "request_id"];
  uint64 timestamp = 3;
}

message RestartNodesRequest {
  repeated string nodeIds = 2 [(validator.field) = {string_not_empty: true}, json_name = "node_ids"];
}

message ToggleInternetSwitchRequest {
  string siteId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}, json_name = "site_id"];
  bool status = 2;  
  int32 port = 3;  
}
message ToggleInternetSwitchResponse {
}

message RestartNodesResponse {
}

message RestartSiteResponse {
}

message RestartNodeRequest {
    string nodeId = 1 [(validator.field) = {string_not_empty: true}, json_name = "node_id"];

   }

message RestartSiteRequest {
    string siteId =1 [(validator.field) = {string_not_empty: true}, json_name = "site_id"];
}

message RestartNodeResponse {
}

