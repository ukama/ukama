// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/node/software/pkg/db"
)

// SoftwareRepo is an autogenerated mock type for the SoftwareRepo type
type SoftwareRepo struct {
	mock.Mock
}

// CreateSoftwareUpdate provides a mock function with given fields: Software, nestedFunc
func (_m *SoftwareRepo) CreateSoftwareUpdate(Software *db.Software, nestedFunc func(string, string) error) error {
	ret := _m.Called(Software, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Software, func(string, string) error) error); ok {
		r0 = rf(Software, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestSoftwareUpdate provides a mock function with given fields:
func (_m *SoftwareRepo) GetLatestSoftwareUpdate() (*db.Software, error) {
	ret := _m.Called()

	var r0 *db.Software
	var r1 error
	if rf, ok := ret.Get(0).(func() (*db.Software, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *db.Software); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Software)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSoftwareRepo creates a new instance of SoftwareRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSoftwareRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SoftwareRepo {
	mock := &SoftwareRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
