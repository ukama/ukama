// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: software.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SoftwareService_CreateSoftwareUpdate_FullMethodName    = "/ukama.node.software.v1.SoftwareService/CreateSoftwareUpdate"
	SoftwareService_GetLatestSoftwareUpdate_FullMethodName = "/ukama.node.software.v1.SoftwareService/GetLatestSoftwareUpdate"
	SoftwareService_UpdateSoftware_FullMethodName          = "/ukama.node.software.v1.SoftwareService/UpdateSoftware"
)

// SoftwareServiceClient is the client API for SoftwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoftwareServiceClient interface {
	CreateSoftwareUpdate(ctx context.Context, in *CreateSoftwareUpdateRequest, opts ...grpc.CallOption) (*CreateSoftwareUpdateResponse, error)
	GetLatestSoftwareUpdate(ctx context.Context, in *GetLatestSoftwareUpdateRequest, opts ...grpc.CallOption) (*GetLatestSoftwareUpdateResponse, error)
	UpdateSoftware(ctx context.Context, in *UpdateSoftwareRequest, opts ...grpc.CallOption) (*UpdateSoftwareResponse, error)
}

type softwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoftwareServiceClient(cc grpc.ClientConnInterface) SoftwareServiceClient {
	return &softwareServiceClient{cc}
}

func (c *softwareServiceClient) CreateSoftwareUpdate(ctx context.Context, in *CreateSoftwareUpdateRequest, opts ...grpc.CallOption) (*CreateSoftwareUpdateResponse, error) {
	out := new(CreateSoftwareUpdateResponse)
	err := c.cc.Invoke(ctx, SoftwareService_CreateSoftwareUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareServiceClient) GetLatestSoftwareUpdate(ctx context.Context, in *GetLatestSoftwareUpdateRequest, opts ...grpc.CallOption) (*GetLatestSoftwareUpdateResponse, error) {
	out := new(GetLatestSoftwareUpdateResponse)
	err := c.cc.Invoke(ctx, SoftwareService_GetLatestSoftwareUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareServiceClient) UpdateSoftware(ctx context.Context, in *UpdateSoftwareRequest, opts ...grpc.CallOption) (*UpdateSoftwareResponse, error) {
	out := new(UpdateSoftwareResponse)
	err := c.cc.Invoke(ctx, SoftwareService_UpdateSoftware_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftwareServiceServer is the server API for SoftwareService service.
// All implementations must embed UnimplementedSoftwareServiceServer
// for forward compatibility
type SoftwareServiceServer interface {
	CreateSoftwareUpdate(context.Context, *CreateSoftwareUpdateRequest) (*CreateSoftwareUpdateResponse, error)
	GetLatestSoftwareUpdate(context.Context, *GetLatestSoftwareUpdateRequest) (*GetLatestSoftwareUpdateResponse, error)
	UpdateSoftware(context.Context, *UpdateSoftwareRequest) (*UpdateSoftwareResponse, error)
	mustEmbedUnimplementedSoftwareServiceServer()
}

// UnimplementedSoftwareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoftwareServiceServer struct {
}

func (UnimplementedSoftwareServiceServer) CreateSoftwareUpdate(context.Context, *CreateSoftwareUpdateRequest) (*CreateSoftwareUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSoftwareUpdate not implemented")
}
func (UnimplementedSoftwareServiceServer) GetLatestSoftwareUpdate(context.Context, *GetLatestSoftwareUpdateRequest) (*GetLatestSoftwareUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSoftwareUpdate not implemented")
}
func (UnimplementedSoftwareServiceServer) UpdateSoftware(context.Context, *UpdateSoftwareRequest) (*UpdateSoftwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSoftware not implemented")
}
func (UnimplementedSoftwareServiceServer) mustEmbedUnimplementedSoftwareServiceServer() {}

// UnsafeSoftwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoftwareServiceServer will
// result in compilation errors.
type UnsafeSoftwareServiceServer interface {
	mustEmbedUnimplementedSoftwareServiceServer()
}

func RegisterSoftwareServiceServer(s grpc.ServiceRegistrar, srv SoftwareServiceServer) {
	s.RegisterService(&SoftwareService_ServiceDesc, srv)
}

func _SoftwareService_CreateSoftwareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSoftwareUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServiceServer).CreateSoftwareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftwareService_CreateSoftwareUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServiceServer).CreateSoftwareUpdate(ctx, req.(*CreateSoftwareUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareService_GetLatestSoftwareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSoftwareUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServiceServer).GetLatestSoftwareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftwareService_GetLatestSoftwareUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServiceServer).GetLatestSoftwareUpdate(ctx, req.(*GetLatestSoftwareUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareService_UpdateSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSoftwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServiceServer).UpdateSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftwareService_UpdateSoftware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServiceServer).UpdateSoftware(ctx, req.(*UpdateSoftwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoftwareService_ServiceDesc is the grpc.ServiceDesc for SoftwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoftwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.node.software.v1.SoftwareService",
	HandlerType: (*SoftwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSoftwareUpdate",
			Handler:    _SoftwareService_CreateSoftwareUpdate_Handler,
		},
		{
			MethodName: "GetLatestSoftwareUpdate",
			Handler:    _SoftwareService_GetLatestSoftwareUpdate_Handler,
		},
		{
			MethodName: "UpdateSoftware",
			Handler:    _SoftwareService_UpdateSoftware_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "software.proto",
}
