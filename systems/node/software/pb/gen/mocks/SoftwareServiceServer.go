// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/software/pb/gen"
)

// SoftwareServiceServer is an autogenerated mock type for the SoftwareServiceServer type
type SoftwareServiceServer struct {
	mock.Mock
}

// CreateSoftwareUpdate provides a mock function with given fields: _a0, _a1
func (_m *SoftwareServiceServer) CreateSoftwareUpdate(_a0 context.Context, _a1 *gen.CreateSoftwareUpdateRequest) (*gen.CreateSoftwareUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.CreateSoftwareUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateSoftwareUpdateRequest) (*gen.CreateSoftwareUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateSoftwareUpdateRequest) *gen.CreateSoftwareUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.CreateSoftwareUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.CreateSoftwareUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestSoftwareUpdate provides a mock function with given fields: _a0, _a1
func (_m *SoftwareServiceServer) GetLatestSoftwareUpdate(_a0 context.Context, _a1 *gen.GetLatestSoftwareUpdateRequest) (*gen.GetLatestSoftwareUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetLatestSoftwareUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetLatestSoftwareUpdateRequest) (*gen.GetLatestSoftwareUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetLatestSoftwareUpdateRequest) *gen.GetLatestSoftwareUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetLatestSoftwareUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetLatestSoftwareUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSoftware provides a mock function with given fields: _a0, _a1
func (_m *SoftwareServiceServer) UpdateSoftware(_a0 context.Context, _a1 *gen.UpdateSoftwareRequest) (*gen.UpdateSoftwareResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateSoftwareResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateSoftwareRequest) (*gen.UpdateSoftwareResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateSoftwareRequest) *gen.UpdateSoftwareResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateSoftwareResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateSoftwareRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSoftwareServiceServer provides a mock function with given fields:
func (_m *SoftwareServiceServer) mustEmbedUnimplementedSoftwareServiceServer() {
	_m.Called()
}

// NewSoftwareServiceServer creates a new instance of SoftwareServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSoftwareServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SoftwareServiceServer {
	mock := &SoftwareServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
