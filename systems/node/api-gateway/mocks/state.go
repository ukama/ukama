// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/state/pb/gen"
)

// state is an autogenerated mock type for the state type
type state struct {
	mock.Mock
}

// EnforeTransition provides a mock function with given fields: nodeId, event
func (_m *state) EnforeTransition(nodeId string, event string) (*gen.EnforceStateTransitionResponse, error) {
	ret := _m.Called(nodeId, event)

	if len(ret) == 0 {
		panic("no return value specified for EnforeTransition")
	}

	var r0 *gen.EnforceStateTransitionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.EnforceStateTransitionResponse, error)); ok {
		return rf(nodeId, event)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.EnforceStateTransitionResponse); ok {
		r0 = rf(nodeId, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.EnforceStateTransitionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nodeId, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStates provides a mock function with given fields: nodeId
func (_m *state) GetStates(nodeId string) (*gen.GetStatesResponse, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetStates")
	}

	var r0 *gen.GetStatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetStatesResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetStatesResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatesHistory provides a mock function with given fields: nodeId, pageSize, pageNumber, startTime, endTime
func (_m *state) GetStatesHistory(nodeId string, pageSize int32, pageNumber int32, startTime string, endTime string) (*gen.GetStatesHistoryResponse, error) {
	ret := _m.Called(nodeId, pageSize, pageNumber, startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetStatesHistory")
	}

	var r0 *gen.GetStatesHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int32, int32, string, string) (*gen.GetStatesHistoryResponse, error)); ok {
		return rf(nodeId, pageSize, pageNumber, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(string, int32, int32, string, string) *gen.GetStatesHistoryResponse); ok {
		r0 = rf(nodeId, pageSize, pageNumber, startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStatesHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int32, int32, string, string) error); ok {
		r1 = rf(nodeId, pageSize, pageNumber, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newState creates a new instance of state. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newState(t interface {
	mock.TestingT
	Cleanup(func())
}) *state {
	mock := &state{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
