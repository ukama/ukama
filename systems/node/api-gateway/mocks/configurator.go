// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/configurator/pb/gen"
)

// configurator is an autogenerated mock type for the configurator type
type configurator struct {
	mock.Mock
}

// ApplyConfig provides a mock function with given fields: commit
func (_m *configurator) ApplyConfig(commit string) (*gen.ApplyConfigResponse, error) {
	ret := _m.Called(commit)

	var r0 *gen.ApplyConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.ApplyConfigResponse, error)); ok {
		return rf(commit)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.ApplyConfigResponse); ok {
		r0 = rf(commit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ApplyConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigEvent provides a mock function with given fields: b
func (_m *configurator) ConfigEvent(b []byte) (*gen.ConfigStoreEventResponse, error) {
	ret := _m.Called(b)

	var r0 *gen.ConfigStoreEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*gen.ConfigStoreEventResponse, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) *gen.ConfigStoreEventResponse); ok {
		r0 = rf(b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ConfigStoreEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigVersion provides a mock function with given fields: nodeId
func (_m *configurator) GetConfigVersion(nodeId string) (*gen.ConfigVersionResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.ConfigVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.ConfigVersionResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.ConfigVersionResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ConfigVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newConfigurator creates a new instance of configurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *configurator {
	mock := &configurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
