// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/controller/pb/gen"
)

// controller is an autogenerated mock type for the controller type
type controller struct {
	mock.Mock
}

// RestartNode provides a mock function with given fields: nodeId
func (_m *controller) RestartNode(nodeId string) (*gen.RestartNodeResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.RestartNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.RestartNodeResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.RestartNodeResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartNodes provides a mock function with given fields: networkId, nodeIds
func (_m *controller) RestartNodes(networkId string, nodeIds []string) (*gen.RestartNodesResponse, error) {
	ret := _m.Called(networkId, nodeIds)

	var r0 *gen.RestartNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*gen.RestartNodesResponse, error)); ok {
		return rf(networkId, nodeIds)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *gen.RestartNodesResponse); ok {
		r0 = rf(networkId, nodeIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(networkId, nodeIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartSite provides a mock function with given fields: siteName, networkId
func (_m *controller) RestartSite(siteName string, networkId string) (*gen.RestartSiteResponse, error) {
	ret := _m.Called(siteName, networkId)

	var r0 *gen.RestartSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.RestartSiteResponse, error)); ok {
		return rf(siteName, networkId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.RestartSiteResponse); ok {
		r0 = rf(siteName, networkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RestartSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(siteName, networkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newController creates a new instance of controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newController(t interface {
	mock.TestingT
	Cleanup(func())
}) *controller {
	mock := &controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
