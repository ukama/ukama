// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: configurator.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfiguratorServiceClient is the client API for ConfiguratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfiguratorServiceClient interface {
	ConfigEvent(ctx context.Context, in *ConfigStoreEvent, opts ...grpc.CallOption) (*ConfigStoreEventResponse, error)
	ApplyConfig(ctx context.Context, in *ApplyConfigRequest, opts ...grpc.CallOption) (*ApplyConfigResponse, error)
	GetConfigVersion(ctx context.Context, in *ConfigVersionRequest, opts ...grpc.CallOption) (*ConfigVersionResponse, error)
}

type configuratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfiguratorServiceClient(cc grpc.ClientConnInterface) ConfiguratorServiceClient {
	return &configuratorServiceClient{cc}
}

func (c *configuratorServiceClient) ConfigEvent(ctx context.Context, in *ConfigStoreEvent, opts ...grpc.CallOption) (*ConfigStoreEventResponse, error) {
	out := new(ConfigStoreEventResponse)
	err := c.cc.Invoke(ctx, "/ukama.node.configurator.v1.ConfiguratorService/ConfigEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configuratorServiceClient) ApplyConfig(ctx context.Context, in *ApplyConfigRequest, opts ...grpc.CallOption) (*ApplyConfigResponse, error) {
	out := new(ApplyConfigResponse)
	err := c.cc.Invoke(ctx, "/ukama.node.configurator.v1.ConfiguratorService/ApplyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configuratorServiceClient) GetConfigVersion(ctx context.Context, in *ConfigVersionRequest, opts ...grpc.CallOption) (*ConfigVersionResponse, error) {
	out := new(ConfigVersionResponse)
	err := c.cc.Invoke(ctx, "/ukama.node.configurator.v1.ConfiguratorService/GetConfigVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfiguratorServiceServer is the server API for ConfiguratorService service.
// All implementations must embed UnimplementedConfiguratorServiceServer
// for forward compatibility
type ConfiguratorServiceServer interface {
	ConfigEvent(context.Context, *ConfigStoreEvent) (*ConfigStoreEventResponse, error)
	ApplyConfig(context.Context, *ApplyConfigRequest) (*ApplyConfigResponse, error)
	GetConfigVersion(context.Context, *ConfigVersionRequest) (*ConfigVersionResponse, error)
	mustEmbedUnimplementedConfiguratorServiceServer()
}

// UnimplementedConfiguratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfiguratorServiceServer struct {
}

func (UnimplementedConfiguratorServiceServer) ConfigEvent(context.Context, *ConfigStoreEvent) (*ConfigStoreEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigEvent not implemented")
}
func (UnimplementedConfiguratorServiceServer) ApplyConfig(context.Context, *ApplyConfigRequest) (*ApplyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfig not implemented")
}
func (UnimplementedConfiguratorServiceServer) GetConfigVersion(context.Context, *ConfigVersionRequest) (*ConfigVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigVersion not implemented")
}
func (UnimplementedConfiguratorServiceServer) mustEmbedUnimplementedConfiguratorServiceServer() {}

// UnsafeConfiguratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfiguratorServiceServer will
// result in compilation errors.
type UnsafeConfiguratorServiceServer interface {
	mustEmbedUnimplementedConfiguratorServiceServer()
}

func RegisterConfiguratorServiceServer(s grpc.ServiceRegistrar, srv ConfiguratorServiceServer) {
	s.RegisterService(&ConfiguratorService_ServiceDesc, srv)
}

func _ConfiguratorService_ConfigEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigStoreEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).ConfigEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.node.configurator.v1.ConfiguratorService/ConfigEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).ConfigEvent(ctx, req.(*ConfigStoreEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfiguratorService_ApplyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).ApplyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.node.configurator.v1.ConfiguratorService/ApplyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).ApplyConfig(ctx, req.(*ApplyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfiguratorService_GetConfigVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).GetConfigVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.node.configurator.v1.ConfiguratorService/GetConfigVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).GetConfigVersion(ctx, req.(*ConfigVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfiguratorService_ServiceDesc is the grpc.ServiceDesc for ConfiguratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfiguratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.node.configurator.v1.ConfiguratorService",
	HandlerType: (*ConfiguratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigEvent",
			Handler:    _ConfiguratorService_ConfigEvent_Handler,
		},
		{
			MethodName: "ApplyConfig",
			Handler:    _ConfiguratorService_ApplyConfig_Handler,
		},
		{
			MethodName: "GetConfigVersion",
			Handler:    _ConfiguratorService_GetConfigVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configurator.proto",
}
