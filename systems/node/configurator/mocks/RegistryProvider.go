// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RegistryProvider is an autogenerated mock type for the RegistryProvider type
type RegistryProvider struct {
	mock.Mock
}

// ValidateNetwork provides a mock function with given fields: networkId, orgName
func (_m *RegistryProvider) ValidateNetwork(networkId string, orgName string) error {
	ret := _m.Called(networkId, orgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(networkId, orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateNode provides a mock function with given fields: nodeId, orgName
func (_m *RegistryProvider) ValidateNode(nodeId string, orgName string) error {
	ret := _m.Called(nodeId, orgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeId, orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSite provides a mock function with given fields: networkId, siteName, orgName
func (_m *RegistryProvider) ValidateSite(networkId string, siteName string, orgName string) error {
	ret := _m.Called(networkId, siteName, orgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(networkId, siteName, orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRegistryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistryProvider creates a new instance of RegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistryProvider(t mockConstructorTestingTNewRegistryProvider) *RegistryProvider {
	mock := &RegistryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
