// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// StoreProvider is an autogenerated mock type for the StoreProvider type
type StoreProvider struct {
	mock.Mock
}

// GetDiff provides a mock function with given fields: prevSha, curSha, dir
func (_m *StoreProvider) GetDiff(prevSha string, curSha string, dir string) ([]string, error) {
	ret := _m.Called(prevSha, curSha, dir)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]string, error)); ok {
		return rf(prevSha, curSha, dir)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(prevSha, curSha, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(prevSha, curSha, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestRemoteConfigs provides a mock function with given fields: dir
func (_m *StoreProvider) GetLatestRemoteConfigs(dir string) (string, error) {
	ret := _m.Called(dir)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(dir)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteConfigVersion provides a mock function with given fields: dir, version
func (_m *StoreProvider) GetRemoteConfigVersion(dir string, version string) error {
	ret := _m.Called(dir, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dir, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStoreProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreProvider creates a new instance of StoreProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreProvider(t mockConstructorTestingTNewStoreProvider) *StoreProvider {
	mock := &StoreProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
