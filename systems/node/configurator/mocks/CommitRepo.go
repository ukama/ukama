// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/node/configurator/pkg/db"
)

// CommitRepo is an autogenerated mock type for the CommitRepo type
type CommitRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: hash
func (_m *CommitRepo) Add(hash string) error {
	ret := _m.Called(hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: hash
func (_m *CommitRepo) Get(hash string) (*db.Commit, error) {
	ret := _m.Called(hash)

	var r0 *db.Commit
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Commit, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Commit); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *CommitRepo) GetAll() ([]db.Commit, error) {
	ret := _m.Called()

	var r0 []db.Commit
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Commit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatest provides a mock function with given fields:
func (_m *CommitRepo) GetLatest() (*db.Commit, error) {
	ret := _m.Called()

	var r0 *db.Commit
	var r1 error
	if rf, ok := ret.Get(0).(func() (*db.Commit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *db.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommitRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommitRepo creates a new instance of CommitRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommitRepo(t mockConstructorTestingTNewCommitRepo) *CommitRepo {
	mock := &CommitRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
