// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: state.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateService_Create_FullMethodName          = "/ukama.node.state.v1.StateService/Create"
	StateService_GetByNodeId_FullMethodName     = "/ukama.node.state.v1.StateService/GetByNodeId"
	StateService_Delete_FullMethodName          = "/ukama.node.state.v1.StateService/Delete"
	StateService_GetStateHistory_FullMethodName = "/ukama.node.state.v1.StateService/GetStateHistory"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateServiceClient interface {
	Create(ctx context.Context, in *CreateStateRequest, opts ...grpc.CallOption) (*CreateStateResponse, error)
	GetByNodeId(ctx context.Context, in *GetByNodeIdRequest, opts ...grpc.CallOption) (*GetByNodeIdResponse, error)
	Delete(ctx context.Context, in *DeleteStateRequest, opts ...grpc.CallOption) (*DeleteStateResponse, error)
	GetStateHistory(ctx context.Context, in *GetStateHistoryRequest, opts ...grpc.CallOption) (*GetStateHistoryResponse, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) Create(ctx context.Context, in *CreateStateRequest, opts ...grpc.CallOption) (*CreateStateResponse, error) {
	out := new(CreateStateResponse)
	err := c.cc.Invoke(ctx, StateService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetByNodeId(ctx context.Context, in *GetByNodeIdRequest, opts ...grpc.CallOption) (*GetByNodeIdResponse, error) {
	out := new(GetByNodeIdResponse)
	err := c.cc.Invoke(ctx, StateService_GetByNodeId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) Delete(ctx context.Context, in *DeleteStateRequest, opts ...grpc.CallOption) (*DeleteStateResponse, error) {
	out := new(DeleteStateResponse)
	err := c.cc.Invoke(ctx, StateService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetStateHistory(ctx context.Context, in *GetStateHistoryRequest, opts ...grpc.CallOption) (*GetStateHistoryResponse, error) {
	out := new(GetStateHistoryResponse)
	err := c.cc.Invoke(ctx, StateService_GetStateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility
type StateServiceServer interface {
	Create(context.Context, *CreateStateRequest) (*CreateStateResponse, error)
	GetByNodeId(context.Context, *GetByNodeIdRequest) (*GetByNodeIdResponse, error)
	Delete(context.Context, *DeleteStateRequest) (*DeleteStateResponse, error)
	GetStateHistory(context.Context, *GetStateHistoryRequest) (*GetStateHistoryResponse, error)
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) Create(context.Context, *CreateStateRequest) (*CreateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStateServiceServer) GetByNodeId(context.Context, *GetByNodeIdRequest) (*GetByNodeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByNodeId not implemented")
}
func (UnimplementedStateServiceServer) Delete(context.Context, *DeleteStateRequest) (*DeleteStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStateServiceServer) GetStateHistory(context.Context, *GetStateHistoryRequest) (*GetStateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateHistory not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).Create(ctx, req.(*CreateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetByNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNodeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetByNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_GetByNodeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetByNodeId(ctx, req.(*GetByNodeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).Delete(ctx, req.(*DeleteStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetStateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetStateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_GetStateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetStateHistory(ctx, req.(*GetStateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.node.state.v1.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StateService_Create_Handler,
		},
		{
			MethodName: "GetByNodeId",
			Handler:    _StateService_GetByNodeId_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StateService_Delete_Handler,
		},
		{
			MethodName: "GetStateHistory",
			Handler:    _StateService_GetStateHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "state.proto",
}
