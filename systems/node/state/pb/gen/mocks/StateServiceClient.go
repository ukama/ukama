// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/node/state/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// StateServiceClient is an autogenerated mock type for the StateServiceClient type
type StateServiceClient struct {
	mock.Mock
}

// AddState provides a mock function with given fields: ctx, in, opts
func (_m *StateServiceClient) AddState(ctx context.Context, in *gen.AddStateRequest, opts ...grpc.CallOption) (*gen.AddStateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddState")
	}

	var r0 *gen.AddStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddStateRequest, ...grpc.CallOption) (*gen.AddStateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddStateRequest, ...grpc.CallOption) *gen.AddStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestState provides a mock function with given fields: ctx, in, opts
func (_m *StateServiceClient) GetLatestState(ctx context.Context, in *gen.GetLatestStateRequest, opts ...grpc.CallOption) (*gen.GetLatestStateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestState")
	}

	var r0 *gen.GetLatestStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetLatestStateRequest, ...grpc.CallOption) (*gen.GetLatestStateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetLatestStateRequest, ...grpc.CallOption) *gen.GetLatestStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetLatestStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetLatestStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateById provides a mock function with given fields: ctx, in, opts
func (_m *StateServiceClient) GetStateById(ctx context.Context, in *gen.GetStateByIdRequest, opts ...grpc.CallOption) (*gen.GetStateByIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStateById")
	}

	var r0 *gen.GetStateByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStateByIdRequest, ...grpc.CallOption) (*gen.GetStateByIdResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStateByIdRequest, ...grpc.CallOption) *gen.GetStateByIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStateByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetStateByIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStates provides a mock function with given fields: ctx, in, opts
func (_m *StateServiceClient) GetStates(ctx context.Context, in *gen.GetStatesRequest, opts ...grpc.CallOption) (*gen.GetStatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStates")
	}

	var r0 *gen.GetStatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStatesRequest, ...grpc.CallOption) (*gen.GetStatesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStatesRequest, ...grpc.CallOption) *gen.GetStatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetStatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStateServiceClient creates a new instance of StateServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateServiceClient {
	mock := &StateServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
