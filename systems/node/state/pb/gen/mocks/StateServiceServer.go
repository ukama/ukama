// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/state/pb/gen"
)

// StateServiceServer is an autogenerated mock type for the StateServiceServer type
type StateServiceServer struct {
	mock.Mock
}

// AddState provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) AddState(_a0 context.Context, _a1 *gen.AddStateRequest) (*gen.AddStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddState")
	}

	var r0 *gen.AddStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddStateRequest) (*gen.AddStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddStateRequest) *gen.AddStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnforceStateTransition provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) EnforceStateTransition(_a0 context.Context, _a1 *gen.EnforceStateTransitionRequest) (*gen.EnforceStateTransitionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EnforceStateTransition")
	}

	var r0 *gen.EnforceStateTransitionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.EnforceStateTransitionRequest) (*gen.EnforceStateTransitionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.EnforceStateTransitionRequest) *gen.EnforceStateTransitionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.EnforceStateTransitionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.EnforceStateTransitionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestState provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) GetLatestState(_a0 context.Context, _a1 *gen.GetLatestStateRequest) (*gen.GetLatestStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestState")
	}

	var r0 *gen.GetLatestStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetLatestStateRequest) (*gen.GetLatestStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetLatestStateRequest) *gen.GetLatestStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetLatestStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetLatestStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateById provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) GetStateById(_a0 context.Context, _a1 *gen.GetStateByIdRequest) (*gen.GetStateByIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStateById")
	}

	var r0 *gen.GetStateByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStateByIdRequest) (*gen.GetStateByIdResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStateByIdRequest) *gen.GetStateByIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStateByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetStateByIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStates provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) GetStates(_a0 context.Context, _a1 *gen.GetStatesRequest) (*gen.GetStatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStates")
	}

	var r0 *gen.GetStatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStatesRequest) (*gen.GetStatesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStatesRequest) *gen.GetStatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetStatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatesHistory provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) GetStatesHistory(_a0 context.Context, _a1 *gen.GetStatesHistoryRequest) (*gen.GetStatesHistoryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatesHistory")
	}

	var r0 *gen.GetStatesHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStatesHistoryRequest) (*gen.GetStatesHistoryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStatesHistoryRequest) *gen.GetStatesHistoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStatesHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetStatesHistoryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateState provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) UpdateState(_a0 context.Context, _a1 *gen.UpdateStateRequest) (*gen.UpdateStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 *gen.UpdateStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStateRequest) (*gen.UpdateStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateStateRequest) *gen.UpdateStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedStateServiceServer provides a mock function with given fields:
func (_m *StateServiceServer) mustEmbedUnimplementedStateServiceServer() {
	_m.Called()
}

// NewStateServiceServer creates a new instance of StateServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateServiceServer {
	mock := &StateServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
