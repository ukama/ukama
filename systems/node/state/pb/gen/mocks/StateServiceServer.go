/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2023-present, Ukama Inc.
 */

// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/state/pb/gen"
)

// StateServiceServer is an autogenerated mock type for the StateServiceServer type
type StateServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) Create(_a0 context.Context, _a1 *gen.CreateStateRequest) (*gen.CreateStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.CreateStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateStateRequest) (*gen.CreateStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateStateRequest) *gen.CreateStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.CreateStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.CreateStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteStateRequest) (*gen.DeleteStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteStateRequest) (*gen.DeleteStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteStateRequest) *gen.DeleteStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNodeId provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) GetByNodeId(_a0 context.Context, _a1 *gen.GetByNodeIdRequest) (*gen.GetByNodeIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByNodeIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNodeIdRequest) (*gen.GetByNodeIdResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNodeIdRequest) *gen.GetByNodeIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNodeIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByNodeIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateHistory provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) GetStateHistory(_a0 context.Context, _a1 *gen.GetStateHistoryRequest) (*gen.GetStateHistoryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetStateHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStateHistoryRequest) (*gen.GetStateHistoryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetStateHistoryRequest) *gen.GetStateHistoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStateHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetStateHistoryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedStateServiceServer provides a mock function with given fields:
func (_m *StateServiceServer) mustEmbedUnimplementedStateServiceServer() {
	_m.Called()
}

// NewStateServiceServer creates a new instance of StateServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateServiceServer {
	mock := &StateServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
