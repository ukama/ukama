// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: state.proto

package gen

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *DeleteStateResponse) Validate() error {
	return nil
}
func (this *CreateStateResponse) Validate() error {
	if this.State != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.State); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("State", err)
		}
	}
	return nil
}
func (this *GetByNodeIdResponse) Validate() error {
	if this.State != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.State); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("State", err)
		}
	}
	return nil
}
func (this *State) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	if this.LastHeartbeat != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.LastHeartbeat); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("LastHeartbeat", err)
		}
	}
	if this.LastStateChange != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.LastStateChange); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("LastStateChange", err)
		}
	}
	return nil
}
func (this *CreateStateRequest) Validate() error {
	if this.State != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.State); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("State", err)
		}
	}
	return nil
}
func (this *GetByNodeIdRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	return nil
}
func (this *DeleteStateRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	return nil
}
func (this *GetStateHistoryResponse) Validate() error {
	for _, item := range this.StateHistory {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("StateHistory", err)
			}
		}
	}
	return nil
}
func (this *GetStateHistoryRequest) Validate() error {
	if this.NodeId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf(`value '%v' must not be an empty string`, this.NodeId))
	}
	if this.FromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.FromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("FromTime", err)
		}
	}
	if this.ToTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ToTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ToTime", err)
		}
	}
	return nil
}
