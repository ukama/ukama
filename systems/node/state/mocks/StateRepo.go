// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/node/state/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// StateRepo is an autogenerated mock type for the StateRepo type
type StateRepo struct {
	mock.Mock
}

// AddState provides a mock function with given fields: newState, previousState
func (_m *StateRepo) AddState(newState *db.State, previousState *db.State) error {
	ret := _m.Called(newState, previousState)

	if len(ret) == 0 {
		panic("no return value specified for AddState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.State, *db.State) error); ok {
		r0 = rf(newState, previousState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestState provides a mock function with given fields: nodeId
func (_m *StateRepo) GetLatestState(nodeId string) (*db.State, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestState")
	}

	var r0 *db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.State, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.State); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.State)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeConfig provides a mock function with given fields: nodeId
func (_m *StateRepo) GetNodeConfig(nodeId string) (*db.NodeConfig, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeConfig")
	}

	var r0 *db.NodeConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.NodeConfig, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.NodeConfig); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NodeConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateById provides a mock function with given fields: id
func (_m *StateRepo) GetStateById(id uuid.UUID) (*db.State, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStateById")
	}

	var r0 *db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.State, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.State); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.State)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateHistory provides a mock function with given fields: nodeId
func (_m *StateRepo) GetStateHistory(nodeId string) ([]db.State, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetStateHistory")
	}

	var r0 []db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.State, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) []db.State); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.State)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatesByNodeId provides a mock function with given fields: nodeId
func (_m *StateRepo) GetStatesByNodeId(nodeId string) ([]db.State, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetStatesByNodeId")
	}

	var r0 []db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.State, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) []db.State); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.State)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateState provides a mock function with given fields: nodeId, subStates, events
func (_m *StateRepo) UpdateState(nodeId string, subStates []string, events []string) (*db.State, error) {
	ret := _m.Called(nodeId, subStates, events)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 *db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, []string) (*db.State, error)); ok {
		return rf(nodeId, subStates, events)
	}
	if rf, ok := ret.Get(0).(func(string, []string, []string) *db.State); ok {
		r0 = rf(nodeId, subStates, events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.State)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string, []string) error); ok {
		r1 = rf(nodeId, subStates, events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStateRepo creates a new instance of StateRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateRepo {
	mock := &StateRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
