// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/node/state/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	ukama "github.com/ukama/ukama/systems/common/ukama"
)

// StateRepo is an autogenerated mock type for the StateRepo type
type StateRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: state, nestedFunc
func (_m *StateRepo) Create(state *db.State, nestedFunc func(*db.State, *gorm.DB) error) error {
	ret := _m.Called(state, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.State, func(*db.State, *gorm.DB) error) error); ok {
		r0 = rf(state, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: nodeId
func (_m *StateRepo) Delete(nodeId ukama.NodeID) error {
	ret := _m.Called(nodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) error); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByNodeId provides a mock function with given fields: nodeId
func (_m *StateRepo) GetByNodeId(nodeId ukama.NodeID) (*db.State, error) {
	ret := _m.Called(nodeId)

	var r0 *db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) (*db.State, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.State); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.State)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateHistory provides a mock function with given fields: nodeId
func (_m *StateRepo) GetStateHistory(nodeId ukama.NodeID) ([]db.StateHistory, error) {
	ret := _m.Called(nodeId)

	var r0 []db.StateHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) ([]db.StateHistory, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(ukama.NodeID) []db.StateHistory); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.StateHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *StateRepo) ListAll() ([]db.State, error) {
	ret := _m.Called()

	var r0 []db.State
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.State, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.State)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: state
func (_m *StateRepo) Update(state *db.State) error {
	ret := _m.Called(state)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.State) error); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConnectivity provides a mock function with given fields: nodeId, connectivity
func (_m *StateRepo) UpdateConnectivity(nodeId ukama.NodeID, connectivity db.Connectivity) error {
	ret := _m.Called(nodeId, connectivity)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, db.Connectivity) error); ok {
		r0 = rf(nodeId, connectivity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCurrentState provides a mock function with given fields: nodeId, currentState
func (_m *StateRepo) UpdateCurrentState(nodeId ukama.NodeID, currentState db.NodeStateEnum) error {
	ret := _m.Called(nodeId, currentState)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, db.NodeStateEnum) error); ok {
		r0 = rf(nodeId, currentState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStateRepo creates a new instance of StateRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateRepo {
	mock := &StateRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
