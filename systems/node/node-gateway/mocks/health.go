// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/node/health/pb/gen"
)

// Health is an autogenerated mock type for the Health type
type Health struct {
	mock.Mock
}

// GetRunningAppsInfo provides a mock function with given fields: nodeId
func (_m *Health) GetRunningAppsInfo(nodeId string) (*gen.GetRunningAppsResponse, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetRunningAppsInfo")
	}

	var r0 *gen.GetRunningAppsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetRunningAppsResponse, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetRunningAppsResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRunningAppsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreRunningAppsInfo provides a mock function with given fields: req
func (_m *Health) StoreRunningAppsInfo(req *gen.StoreRunningAppsInfoRequest) (*gen.StoreRunningAppsInfoResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for StoreRunningAppsInfo")
	}

	var r0 *gen.StoreRunningAppsInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.StoreRunningAppsInfoRequest) (*gen.StoreRunningAppsInfoResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.StoreRunningAppsInfoRequest) *gen.StoreRunningAppsInfoResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.StoreRunningAppsInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.StoreRunningAppsInfoRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHealth creates a new instance of Health. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Health {
	mock := &Health{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
