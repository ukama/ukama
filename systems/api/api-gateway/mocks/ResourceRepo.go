// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/api/api-gateway/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// ResourceRepo is an autogenerated mock type for the ResourceRepo type
type ResourceRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: r
func (_m *ResourceRepo) Add(r *db.Resource) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Resource) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ResourceRepo) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ResourceRepo) Get(id uuid.UUID) (*db.Resource, error) {
	ret := _m.Called(id)

	var r0 *db.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Resource, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Resource); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: r
func (_m *ResourceRepo) Update(r *db.Resource) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Resource) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewResourceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewResourceRepo creates a new instance of ResourceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResourceRepo(t mockConstructorTestingTNewResourceRepo) *ResourceRepo {
	mock := &ResourceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
