// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "github.com/ukama/ukama/systems/api/api-gateway/pkg/client/rest"
)

// Sim is an autogenerated mock type for the Sim type
type Sim struct {
	mock.Mock
}

// ConfigureSim provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14
func (_m *Sim) ConfigureSim(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string, _a5 string, _a6 string, _a7 string, _a8 string, _a9 string, _a10 string, _a11 string, _a12 string, _a13 string, _a14 uint32) (*rest.SimInfo, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14)

	var r0 *rest.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string, string, string, string, string, string, uint32) (*rest.SimInfo, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string, string, string, string, string, string, uint32) *rest.SimInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string, string, string, string, string, string, string, string, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: _a0
func (_m *Sim) GetSim(_a0 string) (*rest.SimInfo, error) {
	ret := _m.Called(_a0)

	var r0 *rest.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*rest.SimInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *rest.SimInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSim interface {
	mock.TestingT
	Cleanup(func())
}

// NewSim creates a new instance of Sim. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSim(t mockConstructorTestingTNewSim) *Sim {
	mock := &Sim{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
