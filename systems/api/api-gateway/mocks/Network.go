// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "github.com/ukama/ukama/systems/api/api-gateway/pkg/client/rest"
)

// Network is an autogenerated mock type for the Network type
type Network struct {
	mock.Mock
}

// CreateNetwork provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7
func (_m *Network) CreateNetwork(_a0 string, _a1 string, _a2 []string, _a3 []string, _a4 float64, _a5 float64, _a6 uint32, _a7 bool) (*rest.NetworkInfo, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)

	var r0 *rest.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, float64, float64, uint32, bool) (*rest.NetworkInfo, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, float64, float64, uint32, bool) *rest.NetworkInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.NetworkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, []string, float64, float64, uint32, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: _a0
func (_m *Network) GetNetwork(_a0 string) (*rest.NetworkInfo, error) {
	ret := _m.Called(_a0)

	var r0 *rest.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*rest.NetworkInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *rest.NetworkInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.NetworkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNetwork interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetwork creates a new instance of Network. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetwork(t mockConstructorTestingTNewNetwork) *Network {
	mock := &Network{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
