// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	client "github.com/ukama/ukama/systems/api/api-gateway/pkg/client"
	db "github.com/ukama/ukama/systems/api/api-gateway/pkg/db"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateNetwork provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateNetwork(_a0 string, _a1 string) (*client.NetworkInfo, *db.ResourceStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.NetworkInfo
	var r1 *db.ResourceStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*client.NetworkInfo, *db.ResourceStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *client.NetworkInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *db.ResourceStatus); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.ResourceStatus)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetwork provides a mock function with given fields: _a0
func (_m *Client) GetNetwork(_a0 string) (*client.NetworkInfo, *db.ResourceStatus, error) {
	ret := _m.Called(_a0)

	var r0 *client.NetworkInfo
	var r1 *db.ResourceStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*client.NetworkInfo, *db.ResourceStatus, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *client.NetworkInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *db.ResourceStatus); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.ResourceStatus)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
