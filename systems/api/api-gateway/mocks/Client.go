// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/ukama/ukama/systems/api/api-gateway/pkg/client"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AddPackage provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20
func (_m *Client) AddPackage(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string, _a5 string, _a6 bool, _a7 bool, _a8 int64, _a9 int64, _a10 int64, _a11 string, _a12 string, _a13 string, _a14 string, _a15 string, _a16 float64, _a17 float64, _a18 float64, _a19 uint, _a20 []string) (*client.PackageInfo, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)

	var r0 *client.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, bool, bool, int64, int64, int64, string, string, string, string, string, float64, float64, float64, uint, []string) (*client.PackageInfo, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, bool, bool, int64, int64, int64, string, string, string, string, string, float64, float64, float64, uint, []string) *client.PackageInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PackageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, bool, bool, int64, int64, int64, string, string, string, string, string, float64, float64, float64, uint, []string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigureSim provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *Client) ConfigureSim(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string, _a5 uint) (*client.SimInfo, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 *client.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, uint) (*client.SimInfo, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, uint) *client.SimInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, uint) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetwork provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7
func (_m *Client) CreateNetwork(_a0 string, _a1 string, _a2 []string, _a3 []string, _a4 float64, _a5 float64, _a6 uint, _a7 bool) (*client.NetworkInfo, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)

	var r0 *client.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, float64, float64, uint, bool) (*client.NetworkInfo, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, float64, float64, uint, bool) *client.NetworkInfo); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, []string, float64, float64, uint, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: _a0
func (_m *Client) GetNetwork(_a0 string) (*client.NetworkInfo, error) {
	ret := _m.Called(_a0)

	var r0 *client.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.NetworkInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *client.NetworkInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: _a0
func (_m *Client) GetPackage(_a0 string) (*client.PackageInfo, error) {
	ret := _m.Called(_a0)

	var r0 *client.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.PackageInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *client.PackageInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PackageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: _a0
func (_m *Client) GetSim(_a0 string) (*client.SimInfo, error) {
	ret := _m.Called(_a0)

	var r0 *client.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.SimInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *client.SimInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
