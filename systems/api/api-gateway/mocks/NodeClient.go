// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "github.com/ukama/ukama/systems/api/api-gateway/pkg/client/rest"
)

// NodeClient is an autogenerated mock type for the NodeClient type
type NodeClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *NodeClient) Add(_a0 rest.AddNodeRequest) (*rest.NodeInfo, error) {
	ret := _m.Called(_a0)

	var r0 *rest.NodeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(rest.AddNodeRequest) (*rest.NodeInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(rest.AddNodeRequest) *rest.NodeInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.NodeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(rest.AddNodeRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddToSite provides a mock function with given fields: _a0, _a1
func (_m *NodeClient) AddToSite(_a0 string, _a1 rest.AddToSiteRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, rest.AddToSiteRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Attach provides a mock function with given fields: _a0, _a1
func (_m *NodeClient) Attach(_a0 string, _a1 rest.AttachNodesRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, rest.AttachNodesRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *NodeClient) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detach provides a mock function with given fields: _a0
func (_m *NodeClient) Detach(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *NodeClient) Get(_a0 string) (*rest.NodeInfo, error) {
	ret := _m.Called(_a0)

	var r0 *rest.NodeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*rest.NodeInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *rest.NodeInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.NodeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromSite provides a mock function with given fields: _a0
func (_m *NodeClient) RemoveFromSite(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNodeClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeClient creates a new instance of NodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeClient(t mockConstructorTestingTNewNodeClient) *NodeClient {
	mock := &NodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
