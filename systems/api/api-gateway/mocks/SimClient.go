// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/ukama/ukama/systems/api/api-gateway/pkg/client"
)

// SimClient is an autogenerated mock type for the SimClient type
type SimClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: req
func (_m *SimClient) Add(req client.AddSimRequest) (*client.SimInfo, error) {
	ret := _m.Called(req)

	var r0 *client.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(client.AddSimRequest) (*client.SimInfo, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(client.AddSimRequest) *client.SimInfo); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(client.AddSimRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: Id
func (_m *SimClient) Get(Id string) (*client.SimInfo, error) {
	ret := _m.Called(Id)

	var r0 *client.SimInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.SimInfo, error)); ok {
		return rf(Id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.SimInfo); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SimInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSimClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimClient creates a new instance of SimClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimClient(t mockConstructorTestingTNewSimClient) *SimClient {
	mock := &SimClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
