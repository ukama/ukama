// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/registry/hss/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ImsiRepo is an autogenerated mock type for the ImsiRepo type
type ImsiRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: orgName, imsi
func (_m *ImsiRepo) Add(orgName string, imsi *db.Imsi) error {
	ret := _m.Called(orgName, imsi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *db.Imsi) error); ok {
		r0 = rf(orgName, imsi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: imsi, nestedFunc
func (_m *ImsiRepo) Delete(imsi string, nestedFunc ...func(*gorm.DB) error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, imsi)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...func(*gorm.DB) error) error); ok {
		r0 = rf(imsi, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserId provides a mock function with given fields: user, nestedFunc
func (_m *ImsiRepo) DeleteByUserId(user uuid.UUID, nestedFunc ...func(*gorm.DB) error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...func(*gorm.DB) error) error); ok {
		r0 = rf(user, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ImsiRepo) Get(id int) (*db.Imsi, error) {
	ret := _m.Called(id)

	var r0 *db.Imsi
	if rf, ok := ret.Get(0).(func(int) *db.Imsi); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Imsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByImsi provides a mock function with given fields: imsi
func (_m *ImsiRepo) GetByImsi(imsi string) (*db.Imsi, error) {
	ret := _m.Called(imsi)

	var r0 *db.Imsi
	if rf, ok := ret.Get(0).(func(string) *db.Imsi); ok {
		r0 = rf(imsi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Imsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImsiByUserUuid provides a mock function with given fields: userUuid
func (_m *ImsiRepo) GetImsiByUserUuid(userUuid uuid.UUID) ([]*db.Imsi, error) {
	ret := _m.Called(userUuid)

	var r0 []*db.Imsi
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*db.Imsi); ok {
		r0 = rf(userUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Imsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: imsi, subscriber
func (_m *ImsiRepo) Update(imsi string, subscriber *db.Imsi) error {
	ret := _m.Called(imsi, subscriber)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *db.Imsi) error); ok {
		r0 = rf(imsi, subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTai provides a mock function with given fields: imis, tai
func (_m *ImsiRepo) UpdateTai(imis string, tai db.Tai) error {
	ret := _m.Called(imis, tai)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.Tai) error); ok {
		r0 = rf(imis, tai)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewImsiRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewImsiRepo creates a new instance of ImsiRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImsiRepo(t mockConstructorTestingTNewImsiRepo) *ImsiRepo {
	mock := &ImsiRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
