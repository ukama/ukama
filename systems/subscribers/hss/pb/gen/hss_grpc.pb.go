// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: hss.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImsiServiceClient is the client API for ImsiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImsiServiceClient interface {
	Get(ctx context.Context, in *GetImsiRequest, opts ...grpc.CallOption) (*GetImsiResponse, error)
	Add(ctx context.Context, in *AddImsiRequest, opts ...grpc.CallOption) (*AddImsiResponse, error)
	Update(ctx context.Context, in *UpdateImsiRequest, opts ...grpc.CallOption) (*UpdateImsiResponse, error)
	Delete(ctx context.Context, in *DeleteImsiRequest, opts ...grpc.CallOption) (*DeleteImsiResponse, error)
	AddGuti(ctx context.Context, in *AddGutiRequest, opts ...grpc.CallOption) (*AddGutiResponse, error)
	UpdateTai(ctx context.Context, in *UpdateTaiRequest, opts ...grpc.CallOption) (*UpdateTaiResponse, error)
}

type imsiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImsiServiceClient(cc grpc.ClientConnInterface) ImsiServiceClient {
	return &imsiServiceClient{cc}
}

func (c *imsiServiceClient) Get(ctx context.Context, in *GetImsiRequest, opts ...grpc.CallOption) (*GetImsiResponse, error) {
	out := new(GetImsiResponse)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.ImsiService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsiServiceClient) Add(ctx context.Context, in *AddImsiRequest, opts ...grpc.CallOption) (*AddImsiResponse, error) {
	out := new(AddImsiResponse)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.ImsiService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsiServiceClient) Update(ctx context.Context, in *UpdateImsiRequest, opts ...grpc.CallOption) (*UpdateImsiResponse, error) {
	out := new(UpdateImsiResponse)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.ImsiService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsiServiceClient) Delete(ctx context.Context, in *DeleteImsiRequest, opts ...grpc.CallOption) (*DeleteImsiResponse, error) {
	out := new(DeleteImsiResponse)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.ImsiService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsiServiceClient) AddGuti(ctx context.Context, in *AddGutiRequest, opts ...grpc.CallOption) (*AddGutiResponse, error) {
	out := new(AddGutiResponse)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.ImsiService/AddGuti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsiServiceClient) UpdateTai(ctx context.Context, in *UpdateTaiRequest, opts ...grpc.CallOption) (*UpdateTaiResponse, error) {
	out := new(UpdateTaiResponse)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.ImsiService/UpdateTai", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImsiServiceServer is the server API for ImsiService service.
// All implementations must embed UnimplementedImsiServiceServer
// for forward compatibility
type ImsiServiceServer interface {
	Get(context.Context, *GetImsiRequest) (*GetImsiResponse, error)
	Add(context.Context, *AddImsiRequest) (*AddImsiResponse, error)
	Update(context.Context, *UpdateImsiRequest) (*UpdateImsiResponse, error)
	Delete(context.Context, *DeleteImsiRequest) (*DeleteImsiResponse, error)
	AddGuti(context.Context, *AddGutiRequest) (*AddGutiResponse, error)
	UpdateTai(context.Context, *UpdateTaiRequest) (*UpdateTaiResponse, error)
	mustEmbedUnimplementedImsiServiceServer()
}

// UnimplementedImsiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImsiServiceServer struct {
}

func (UnimplementedImsiServiceServer) Get(context.Context, *GetImsiRequest) (*GetImsiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedImsiServiceServer) Add(context.Context, *AddImsiRequest) (*AddImsiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedImsiServiceServer) Update(context.Context, *UpdateImsiRequest) (*UpdateImsiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedImsiServiceServer) Delete(context.Context, *DeleteImsiRequest) (*DeleteImsiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedImsiServiceServer) AddGuti(context.Context, *AddGutiRequest) (*AddGutiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuti not implemented")
}
func (UnimplementedImsiServiceServer) UpdateTai(context.Context, *UpdateTaiRequest) (*UpdateTaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTai not implemented")
}
func (UnimplementedImsiServiceServer) mustEmbedUnimplementedImsiServiceServer() {}

// UnsafeImsiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImsiServiceServer will
// result in compilation errors.
type UnsafeImsiServiceServer interface {
	mustEmbedUnimplementedImsiServiceServer()
}

func RegisterImsiServiceServer(s grpc.ServiceRegistrar, srv ImsiServiceServer) {
	s.RegisterService(&ImsiService_ServiceDesc, srv)
}

func _ImsiService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImsiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsiServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.ImsiService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsiServiceServer).Get(ctx, req.(*GetImsiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImsiService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImsiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsiServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.ImsiService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsiServiceServer).Add(ctx, req.(*AddImsiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImsiService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImsiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsiServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.ImsiService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsiServiceServer).Update(ctx, req.(*UpdateImsiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImsiService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImsiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsiServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.ImsiService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsiServiceServer).Delete(ctx, req.(*DeleteImsiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImsiService_AddGuti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGutiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsiServiceServer).AddGuti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.ImsiService/AddGuti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsiServiceServer).AddGuti(ctx, req.(*AddGutiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImsiService_UpdateTai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsiServiceServer).UpdateTai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.ImsiService/UpdateTai",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsiServiceServer).UpdateTai(ctx, req.(*UpdateTaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImsiService_ServiceDesc is the grpc.ServiceDesc for ImsiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImsiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.hss.v1.ImsiService",
	HandlerType: (*ImsiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ImsiService_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ImsiService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ImsiService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImsiService_Delete_Handler,
		},
		{
			MethodName: "AddGuti",
			Handler:    _ImsiService_AddGuti_Handler,
		},
		{
			MethodName: "UpdateTai",
			Handler:    _ImsiService_UpdateTai_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hss.proto",
}
