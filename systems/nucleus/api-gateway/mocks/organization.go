// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/nucleus/org/pb/gen"
)

// organization is an autogenerated mock type for the organization type
type organization struct {
	mock.Mock
}

// AddOrg provides a mock function with given fields: orgName, owner, certificate
func (_m *organization) AddOrg(orgName string, owner string, certificate string) (*gen.AddResponse, error) {
	ret := _m.Called(orgName, owner, certificate)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*gen.AddResponse, error)); ok {
		return rf(orgName, owner, certificate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *gen.AddResponse); ok {
		r0 = rf(orgName, owner, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(orgName, owner, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: orgName
func (_m *organization) GetOrg(orgName string) (*gen.GetByNameResponse, error) {
	ret := _m.Called(orgName)

	var r0 *gen.GetByNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByNameResponse, error)); ok {
		return rf(orgName)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByNameResponse); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgs provides a mock function with given fields: ownerUUID
func (_m *organization) GetOrgs(ownerUUID string) (*gen.GetByUserResponse, error) {
	ret := _m.Called(ownerUUID)

	var r0 *gen.GetByUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.GetByUserResponse, error)); ok {
		return rf(ownerUUID)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.GetByUserResponse); ok {
		r0 = rf(ownerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOrgForUser provides a mock function with given fields: orgId, userId
func (_m *organization) RemoveOrgForUser(orgId string, userId string) (*gen.RemoveOrgForUserResponse, error) {
	ret := _m.Called(orgId, userId)

	var r0 *gen.RemoveOrgForUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.RemoveOrgForUserResponse, error)); ok {
		return rf(orgId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.RemoveOrgForUserResponse); ok {
		r0 = rf(orgId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveOrgForUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrgToUser provides a mock function with given fields: orgId, userId
func (_m *organization) UpdateOrgToUser(orgId string, userId string) (*gen.UpdateOrgForUserResponse, error) {
	ret := _m.Called(orgId, userId)

	var r0 *gen.UpdateOrgForUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.UpdateOrgForUserResponse, error)); ok {
		return rf(orgId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.UpdateOrgForUserResponse); ok {
		r0 = rf(orgId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateOrgForUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewOrganization interface {
	mock.TestingT
	Cleanup(func())
}

// newOrganization creates a new instance of organization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newOrganization(t mockConstructorTestingTnewOrganization) *organization {
	mock := &organization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
