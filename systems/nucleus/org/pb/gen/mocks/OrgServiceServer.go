// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/nucleus/org/pb/gen"
)

// OrgServiceServer is an autogenerated mock type for the OrgServiceServer type
type OrgServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) Add(_a0 context.Context, _a1 *gen.AddRequest) (*gen.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) (*gen.AddResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) *gen.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) Get(_a0 context.Context, _a1 *gen.GetRequest) (*gen.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) (*gen.GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) *gen.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) GetByName(_a0 context.Context, _a1 *gen.GetByNameRequest) (*gen.GetByNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNameRequest) (*gen.GetByNameResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByNameRequest) *gen.GetByNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwner provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) GetByOwner(_a0 context.Context, _a1 *gen.GetByOwnerRequest) (*gen.GetByOwnerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOwnerRequest) (*gen.GetByOwnerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOwnerRequest) *gen.GetByOwnerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByOwnerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) GetByUser(_a0 context.Context, _a1 *gen.GetByOwnerRequest) (*gen.GetByUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetByUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOwnerRequest) (*gen.GetByUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetByOwnerRequest) *gen.GetByUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetByUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetByOwnerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) RegisterUser(_a0 context.Context, _a1 *gen.RegisterUserRequest) (*gen.RegisterUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RegisterUserRequest) (*gen.RegisterUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RegisterUserRequest) *gen.RegisterUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RegisterUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RegisterUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOrgForUser provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) RemoveOrgForUser(_a0 context.Context, _a1 *gen.RemoveOrgForUserRequest) (*gen.RemoveOrgForUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemoveOrgForUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveOrgForUserRequest) (*gen.RemoveOrgForUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveOrgForUserRequest) *gen.RemoveOrgForUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveOrgForUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveOrgForUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrgForUser provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) UpdateOrgForUser(_a0 context.Context, _a1 *gen.UpdateOrgForUserRequest) (*gen.UpdateOrgForUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateOrgForUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateOrgForUserRequest) (*gen.UpdateOrgForUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateOrgForUserRequest) *gen.UpdateOrgForUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateOrgForUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateOrgForUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *OrgServiceServer) UpdateUser(_a0 context.Context, _a1 *gen.UpdateUserRequest) (*gen.UpdateUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateUserRequest) (*gen.UpdateUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateUserRequest) *gen.UpdateUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedOrgServiceServer provides a mock function with given fields:
func (_m *OrgServiceServer) mustEmbedUnimplementedOrgServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewOrgServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrgServiceServer creates a new instance of OrgServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrgServiceServer(t mockConstructorTestingTNewOrgServiceServer) *OrgServiceServer {
	mock := &OrgServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
