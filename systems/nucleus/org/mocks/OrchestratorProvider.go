// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	providers "github.com/ukama/ukama/systems/nucleus/org/pkg/providers"
)

// OrchestratorProvider is an autogenerated mock type for the OrchestratorProvider type
type OrchestratorProvider struct {
	mock.Mock
}

// DeployOrg provides a mock function with given fields: req
func (_m *OrchestratorProvider) DeployOrg(req providers.DeployOrgRequest) (*providers.DeployOrgResponse, error) {
	ret := _m.Called(req)

	var r0 *providers.DeployOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(providers.DeployOrgRequest) (*providers.DeployOrgResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(providers.DeployOrgRequest) *providers.DeployOrgResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providers.DeployOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(providers.DeployOrgRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DestroyOrg provides a mock function with given fields: req
func (_m *OrchestratorProvider) DestroyOrg(req providers.DestroyOrgRequest) (*providers.DestroyOrgResponse, error) {
	ret := _m.Called(req)

	var r0 *providers.DestroyOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(providers.DestroyOrgRequest) (*providers.DestroyOrgResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(providers.DestroyOrgRequest) *providers.DestroyOrgResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providers.DestroyOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(providers.DestroyOrgRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrchestratorProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrchestratorProvider creates a new instance of OrchestratorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrchestratorProvider(t mockConstructorTestingTNewOrchestratorProvider) *OrchestratorProvider {
	mock := &OrchestratorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
