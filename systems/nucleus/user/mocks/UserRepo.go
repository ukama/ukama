// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/nucleus/user/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: user, nestedFunc
func (_m *UserRepo) Add(user *db.User, nestedFunc func(*db.User, *gorm.DB) error) error {
	ret := _m.Called(user, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.User, func(*db.User, *gorm.DB) error) error); ok {
		r0 = rf(user, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, nestedFunc
func (_m *UserRepo) Delete(id uuid.UUID, nestedFunc func(uuid.UUID, *gorm.DB) error) error {
	ret := _m.Called(id, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(uuid.UUID, *gorm.DB) error) error); ok {
		r0 = rf(id, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *UserRepo) Get(id uuid.UUID) (*db.User, error) {
	ret := _m.Called(id)

	var r0 *db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAuthId provides a mock function with given fields: id
func (_m *UserRepo) GetByAuthId(id uuid.UUID) (*db.User, error) {
	ret := _m.Called(id)

	var r0 *db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepo) GetByEmail(email string) (*db.User, error) {
	ret := _m.Called(email)

	var r0 *db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *db.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCount provides a mock function with given fields:
func (_m *UserRepo) GetUserCount() (int64, int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() (int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: user, nestedFunc
func (_m *UserRepo) Update(user *db.User, nestedFunc func(*db.User, *gorm.DB) error) error {
	ret := _m.Called(user, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.User, func(*db.User, *gorm.DB) error) error); ok {
		r0 = rf(user, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
