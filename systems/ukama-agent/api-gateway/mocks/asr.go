// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/ukama-agent/asr/pb/gen"
)

// asr is an autogenerated mock type for the asr type
type asr struct {
	mock.Mock
}

// Activate provides a mock function with given fields: req
func (_m *asr) Activate(req *gen.ActivateReq) (*gen.ActivateResp, error) {
	ret := _m.Called(req)

	var r0 *gen.ActivateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.ActivateReq) (*gen.ActivateResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.ActivateReq) *gen.ActivateResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.ActivateReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inactivate provides a mock function with given fields: req
func (_m *asr) Inactivate(req *gen.InactivateReq) (*gen.InactivateResp, error) {
	ret := _m.Called(req)

	var r0 *gen.InactivateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.InactivateReq) (*gen.InactivateResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.InactivateReq) *gen.InactivateResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.InactivateResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.InactivateReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: req
func (_m *asr) Read(req *gen.ReadReq) (*gen.ReadResp, error) {
	ret := _m.Called(req)

	var r0 *gen.ReadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.ReadReq) (*gen.ReadResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.ReadReq) *gen.ReadResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.ReadReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: req
func (_m *asr) UpdatePackage(req *gen.UpdatePackageReq) (*gen.UpdatePackageResp, error) {
	ret := _m.Called(req)

	var r0 *gen.UpdatePackageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.UpdatePackageReq) (*gen.UpdatePackageResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.UpdatePackageReq) *gen.UpdatePackageResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.UpdatePackageReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewAsr interface {
	mock.TestingT
	Cleanup(func())
}

// newAsr creates a new instance of asr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newAsr(t mockConstructorTestingTnewAsr) *asr {
	mock := &asr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
