// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/ukama-agent/cdr/pb/gen"
)

// cdr is an autogenerated mock type for the cdr type
type cdr struct {
	mock.Mock
}

// GetCDR provides a mock function with given fields: req
func (_m *cdr) GetCDR(req *gen.RecordReq) (*gen.RecordResp, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetCDR")
	}

	var r0 *gen.RecordResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.RecordReq) (*gen.RecordResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.RecordReq) *gen.RecordResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RecordResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.RecordReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: req
func (_m *cdr) GetUsage(req *gen.UsageReq) (*gen.UsageResp, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage")
	}

	var r0 *gen.UsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.UsageReq) (*gen.UsageResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.UsageReq) *gen.UsageResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.UsageReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCDR provides a mock function with given fields: req
func (_m *cdr) PostCDR(req *gen.CDR) (*gen.CDRResp, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for PostCDR")
	}

	var r0 *gen.CDRResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*gen.CDR) (*gen.CDRResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*gen.CDR) *gen.CDRResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.CDRResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*gen.CDR) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newCdr creates a new instance of cdr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newCdr(t interface {
	mock.TestingT
	Cleanup(func())
}) *cdr {
	mock := &cdr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
