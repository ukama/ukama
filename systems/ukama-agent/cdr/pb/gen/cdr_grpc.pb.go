// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: cdr.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CDRService_PostCDR_FullMethodName           = "/ukama.ukamaagent.cdr.v1.CDRService/PostCDR"
	CDRService_GetCDR_FullMethodName            = "/ukama.ukamaagent.cdr.v1.CDRService/GetCDR"
	CDRService_GetUsage_FullMethodName          = "/ukama.ukamaagent.cdr.v1.CDRService/GetUsage"
	CDRService_GetUsageForPeriod_FullMethodName = "/ukama.ukamaagent.cdr.v1.CDRService/GetUsageForPeriod"
	CDRService_GetUsageDetails_FullMethodName   = "/ukama.ukamaagent.cdr.v1.CDRService/GetUsageDetails"
)

// CDRServiceClient is the client API for CDRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CDRServiceClient interface {
	// / Add new CDR to the database
	PostCDR(ctx context.Context, in *CDR, opts ...grpc.CallOption) (*CDRResp, error)
	// / Get CDR from the database
	GetCDR(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*RecordResp, error)
	// / Get Usage for the subscriber current package
	GetUsage(ctx context.Context, in *UsageReq, opts ...grpc.CallOption) (*UsageResp, error)
	// / Get Usage for the subscriber current package
	GetUsageForPeriod(ctx context.Context, in *UsageForPeriodReq, opts ...grpc.CallOption) (*UsageForPeriodResp, error)
	// / Get Usage detsilsfor the subscriber current cycle
	GetUsageDetails(ctx context.Context, in *CycleUsageReq, opts ...grpc.CallOption) (*CycleUsageResp, error)
}

type cDRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCDRServiceClient(cc grpc.ClientConnInterface) CDRServiceClient {
	return &cDRServiceClient{cc}
}

func (c *cDRServiceClient) PostCDR(ctx context.Context, in *CDR, opts ...grpc.CallOption) (*CDRResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CDRResp)
	err := c.cc.Invoke(ctx, CDRService_PostCDR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDRServiceClient) GetCDR(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*RecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResp)
	err := c.cc.Invoke(ctx, CDRService_GetCDR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDRServiceClient) GetUsage(ctx context.Context, in *UsageReq, opts ...grpc.CallOption) (*UsageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsageResp)
	err := c.cc.Invoke(ctx, CDRService_GetUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDRServiceClient) GetUsageForPeriod(ctx context.Context, in *UsageForPeriodReq, opts ...grpc.CallOption) (*UsageForPeriodResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsageForPeriodResp)
	err := c.cc.Invoke(ctx, CDRService_GetUsageForPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDRServiceClient) GetUsageDetails(ctx context.Context, in *CycleUsageReq, opts ...grpc.CallOption) (*CycleUsageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CycleUsageResp)
	err := c.cc.Invoke(ctx, CDRService_GetUsageDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDRServiceServer is the server API for CDRService service.
// All implementations must embed UnimplementedCDRServiceServer
// for forward compatibility.
type CDRServiceServer interface {
	// / Add new CDR to the database
	PostCDR(context.Context, *CDR) (*CDRResp, error)
	// / Get CDR from the database
	GetCDR(context.Context, *RecordReq) (*RecordResp, error)
	// / Get Usage for the subscriber current package
	GetUsage(context.Context, *UsageReq) (*UsageResp, error)
	// / Get Usage for the subscriber current package
	GetUsageForPeriod(context.Context, *UsageForPeriodReq) (*UsageForPeriodResp, error)
	// / Get Usage detsilsfor the subscriber current cycle
	GetUsageDetails(context.Context, *CycleUsageReq) (*CycleUsageResp, error)
	mustEmbedUnimplementedCDRServiceServer()
}

// UnimplementedCDRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCDRServiceServer struct{}

func (UnimplementedCDRServiceServer) PostCDR(context.Context, *CDR) (*CDRResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCDR not implemented")
}
func (UnimplementedCDRServiceServer) GetCDR(context.Context, *RecordReq) (*RecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDR not implemented")
}
func (UnimplementedCDRServiceServer) GetUsage(context.Context, *UsageReq) (*UsageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsage not implemented")
}
func (UnimplementedCDRServiceServer) GetUsageForPeriod(context.Context, *UsageForPeriodReq) (*UsageForPeriodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageForPeriod not implemented")
}
func (UnimplementedCDRServiceServer) GetUsageDetails(context.Context, *CycleUsageReq) (*CycleUsageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageDetails not implemented")
}
func (UnimplementedCDRServiceServer) mustEmbedUnimplementedCDRServiceServer() {}
func (UnimplementedCDRServiceServer) testEmbeddedByValue()                    {}

// UnsafeCDRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDRServiceServer will
// result in compilation errors.
type UnsafeCDRServiceServer interface {
	mustEmbedUnimplementedCDRServiceServer()
}

func RegisterCDRServiceServer(s grpc.ServiceRegistrar, srv CDRServiceServer) {
	// If the following call pancis, it indicates UnimplementedCDRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CDRService_ServiceDesc, srv)
}

func _CDRService_PostCDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDRServiceServer).PostCDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDRService_PostCDR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDRServiceServer).PostCDR(ctx, req.(*CDR))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDRService_GetCDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDRServiceServer).GetCDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDRService_GetCDR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDRServiceServer).GetCDR(ctx, req.(*RecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDRService_GetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDRServiceServer).GetUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDRService_GetUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDRServiceServer).GetUsage(ctx, req.(*UsageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDRService_GetUsageForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageForPeriodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDRServiceServer).GetUsageForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDRService_GetUsageForPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDRServiceServer).GetUsageForPeriod(ctx, req.(*UsageForPeriodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDRService_GetUsageDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CycleUsageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDRServiceServer).GetUsageDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDRService_GetUsageDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDRServiceServer).GetUsageDetails(ctx, req.(*CycleUsageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CDRService_ServiceDesc is the grpc.ServiceDesc for CDRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.ukamaagent.cdr.v1.CDRService",
	HandlerType: (*CDRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCDR",
			Handler:    _CDRService_PostCDR_Handler,
		},
		{
			MethodName: "GetCDR",
			Handler:    _CDRService_GetCDR_Handler,
		},
		{
			MethodName: "GetUsage",
			Handler:    _CDRService_GetUsage_Handler,
		},
		{
			MethodName: "GetUsageForPeriod",
			Handler:    _CDRService_GetUsageForPeriod_Handler,
		},
		{
			MethodName: "GetUsageDetails",
			Handler:    _CDRService_GetUsageDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdr.proto",
}
