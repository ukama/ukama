// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/ukama-agent/cdr/pb/gen"
)

// CDRServiceServer is an autogenerated mock type for the CDRServiceServer type
type CDRServiceServer struct {
	mock.Mock
}

// GetCDR provides a mock function with given fields: _a0, _a1
func (_m *CDRServiceServer) GetCDR(_a0 context.Context, _a1 *gen.RecordReq) (*gen.RecordResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RecordResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RecordReq) (*gen.RecordResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RecordReq) *gen.RecordResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RecordResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RecordReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: _a0, _a1
func (_m *CDRServiceServer) GetUsage(_a0 context.Context, _a1 *gen.UsageReq) (*gen.UsageResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageReq) (*gen.UsageResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageReq) *gen.UsageResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UsageReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageDetails provides a mock function with given fields: _a0, _a1
func (_m *CDRServiceServer) GetUsageDetails(_a0 context.Context, _a1 *gen.CycleUsageReq) (*gen.CycleUsageResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.CycleUsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CycleUsageReq) (*gen.CycleUsageResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CycleUsageReq) *gen.CycleUsageResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.CycleUsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.CycleUsageReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForPeriod provides a mock function with given fields: _a0, _a1
func (_m *CDRServiceServer) GetUsageForPeriod(_a0 context.Context, _a1 *gen.UsageForPeriodReq) (*gen.UsageForPeriodResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UsageForPeriodResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageForPeriodReq) (*gen.UsageForPeriodResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageForPeriodReq) *gen.UsageForPeriodResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageForPeriodResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UsageForPeriodReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCDR provides a mock function with given fields: _a0, _a1
func (_m *CDRServiceServer) PostCDR(_a0 context.Context, _a1 *gen.CDR) (*gen.CDRResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.CDRResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CDR) (*gen.CDRResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CDR) *gen.CDRResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.CDRResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.CDR) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedCDRServiceServer provides a mock function with given fields:
func (_m *CDRServiceServer) mustEmbedUnimplementedCDRServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewCDRServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCDRServiceServer creates a new instance of CDRServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCDRServiceServer(t mockConstructorTestingTNewCDRServiceServer) *CDRServiceServer {
	mock := &CDRServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
