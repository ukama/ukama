// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/ukama-agent/cdr/pkg/db"
)

// CDRRepo is an autogenerated mock type for the CDRRepo type
type CDRRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: cdr
func (_m *CDRRepo) Add(cdr *db.CDR) error {
	ret := _m.Called(cdr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.CDR) error); ok {
		r0 = rf(cdr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByFilters provides a mock function with given fields: imsi, session, policy, startTime, endTime
func (_m *CDRRepo) GetByFilters(imsi string, session uint64, policy string, startTime uint64, endTime uint64) (*[]db.CDR, error) {
	ret := _m.Called(imsi, session, policy, startTime, endTime)

	var r0 *[]db.CDR
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64, string, uint64, uint64) (*[]db.CDR, error)); ok {
		return rf(imsi, session, policy, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(string, uint64, string, uint64, uint64) *[]db.CDR); ok {
		r0 = rf(imsi, session, policy, startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.CDR)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint64, string, uint64, uint64) error); ok {
		r1 = rf(imsi, session, policy, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByImsi provides a mock function with given fields: imsi
func (_m *CDRRepo) GetByImsi(imsi string) (*[]db.CDR, error) {
	ret := _m.Called(imsi)

	var r0 *[]db.CDR
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]db.CDR, error)); ok {
		return rf(imsi)
	}
	if rf, ok := ret.Get(0).(func(string) *[]db.CDR); ok {
		r0 = rf(imsi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.CDR)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPolicy provides a mock function with given fields: imsi, policy
func (_m *CDRRepo) GetByPolicy(imsi string, policy string) (*[]db.CDR, error) {
	ret := _m.Called(imsi, policy)

	var r0 *[]db.CDR
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]db.CDR, error)); ok {
		return rf(imsi, policy)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]db.CDR); ok {
		r0 = rf(imsi, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.CDR)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(imsi, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySession provides a mock function with given fields: imsi, session
func (_m *CDRRepo) GetBySession(imsi string, session uint64) (*[]db.CDR, error) {
	ret := _m.Called(imsi, session)

	var r0 *[]db.CDR
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64) (*[]db.CDR, error)); ok {
		return rf(imsi, session)
	}
	if rf, ok := ret.Get(0).(func(string, uint64) *[]db.CDR); ok {
		r0 = rf(imsi, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.CDR)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(imsi, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTime provides a mock function with given fields: imsi, startTime, endTime
func (_m *CDRRepo) GetByTime(imsi string, startTime uint64, endTime uint64) (*[]db.CDR, error) {
	ret := _m.Called(imsi, startTime, endTime)

	var r0 *[]db.CDR
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) (*[]db.CDR, error)); ok {
		return rf(imsi, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) *[]db.CDR); ok {
		r0 = rf(imsi, startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.CDR)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint64, uint64) error); ok {
		r1 = rf(imsi, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCDRRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCDRRepo creates a new instance of CDRRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCDRRepo(t mockConstructorTestingTNewCDRRepo) *CDRRepo {
	mock := &CDRRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
