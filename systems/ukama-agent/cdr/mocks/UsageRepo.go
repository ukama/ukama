// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/ukama-agent/cdr/pkg/db"
)

// UsageRepo is an autogenerated mock type for the UsageRepo type
type UsageRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: usage
func (_m *UsageRepo) Add(usage *db.Usage) error {
	ret := _m.Called(usage)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Usage) error); ok {
		r0 = rf(usage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: imsi
func (_m *UsageRepo) Get(imsi string) (*db.Usage, error) {
	ret := _m.Called(imsi)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Usage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Usage, error)); ok {
		return rf(imsi)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Usage); ok {
		r0 = rf(imsi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Usage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsageRepo creates a new instance of UsageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsageRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsageRepo {
	mock := &UsageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
