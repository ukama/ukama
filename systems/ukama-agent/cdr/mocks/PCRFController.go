// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/ukama-agent/cdr/pkg/db"

	pcrf "github.com/ukama/ukama/systems/ukama-agent/cdr/pkg/pcrf"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// PCRFController is an autogenerated mock type for the PCRFController type
type PCRFController struct {
	mock.Mock
}

// AddPolicy provides a mock function with given fields: s, policy
func (_m *PCRFController) AddPolicy(s *pcrf.SimInfo, policy *db.Policy) error {
	ret := _m.Called(s, policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pcrf.SimInfo, *db.Policy) error); ok {
		r0 = rf(s, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePolicy provides a mock function with given fields: s
func (_m *PCRFController) DeletePolicy(s *pcrf.SimInfo) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pcrf.SimInfo) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPolicy provides a mock function with given fields: packageId
func (_m *PCRFController) NewPolicy(packageId uuid.UUID) (*db.Policy, error) {
	ret := _m.Called(packageId)

	var r0 *db.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Policy, error)); ok {
		return rf(packageId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Policy); ok {
		r0 = rf(packageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(packageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: s, policy
func (_m *PCRFController) UpdatePolicy(s *pcrf.SimInfo, policy *db.Policy) error {
	ret := _m.Called(s, policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pcrf.SimInfo, *db.Policy) error); ok {
		r0 = rf(s, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPCRFController interface {
	mock.TestingT
	Cleanup(func())
}

// NewPCRFController creates a new instance of PCRFController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPCRFController(t mockConstructorTestingTNewPCRFController) *PCRFController {
	mock := &PCRFController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
