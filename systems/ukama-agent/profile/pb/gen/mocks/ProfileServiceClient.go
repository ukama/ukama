// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/ukama-agent/profile/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ProfileServiceClient is an autogenerated mock type for the ProfileServiceClient type
type ProfileServiceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) Add(ctx context.Context, in *gen.AddReq, opts ...grpc.CallOption) (*gen.AddResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddReq, ...grpc.CallOption) *gen.AddResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) Read(ctx context.Context, in *gen.ReadReq, opts ...grpc.CallOption) (*gen.ReadResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ReadResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReadReq, ...grpc.CallOption) *gen.ReadResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReadResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReadReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) Remove(ctx context.Context, in *gen.RemoveReq, opts ...grpc.CallOption) (*gen.RemoveResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RemoveResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveReq, ...grpc.CallOption) *gen.RemoveResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) Sync(ctx context.Context, in *gen.SyncReq, opts ...grpc.CallOption) (*gen.SyncResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.SyncResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncReq, ...grpc.CallOption) *gen.SyncResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.SyncReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdatePackage(ctx context.Context, in *gen.UpdatePackageReq, opts ...grpc.CallOption) (*gen.UpdatePackageResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdatePackageResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageReq, ...grpc.CallOption) *gen.UpdatePackageResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdatePackageReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProfileServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewProfileServiceClient creates a new instance of ProfileServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProfileServiceClient(t mockConstructorTestingTNewProfileServiceClient) *ProfileServiceClient {
	mock := &ProfileServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
