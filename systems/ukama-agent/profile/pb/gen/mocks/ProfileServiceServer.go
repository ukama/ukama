// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/ukama-agent/profile/pb/gen"
)

// ProfileServiceServer is an autogenerated mock type for the ProfileServiceServer type
type ProfileServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *ProfileServiceServer) Add(_a0 context.Context, _a1 *gen.AddReq) (*gen.AddResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddReq) (*gen.AddResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddReq) *gen.AddResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: _a0, _a1
func (_m *ProfileServiceServer) Read(_a0 context.Context, _a1 *gen.ReadReq) (*gen.ReadResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ReadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReadReq) (*gen.ReadResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReadReq) *gen.ReadResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReadReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *ProfileServiceServer) Remove(_a0 context.Context, _a1 *gen.RemoveReq) (*gen.RemoveResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemoveResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveReq) (*gen.RemoveResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveReq) *gen.RemoveResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields: _a0, _a1
func (_m *ProfileServiceServer) Sync(_a0 context.Context, _a1 *gen.SyncReq) (*gen.SyncResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.SyncResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncReq) (*gen.SyncResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SyncReq) *gen.SyncResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SyncResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SyncReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: _a0, _a1
func (_m *ProfileServiceServer) UpdatePackage(_a0 context.Context, _a1 *gen.UpdatePackageReq) (*gen.UpdatePackageResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdatePackageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageReq) (*gen.UpdatePackageResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageReq) *gen.UpdatePackageResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdatePackageReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsage provides a mock function with given fields: _a0, _a1
func (_m *ProfileServiceServer) UpdateUsage(_a0 context.Context, _a1 *gen.UpdateUsageReq) (*gen.UpdateUsageResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateUsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateUsageReq) (*gen.UpdateUsageResp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateUsageReq) *gen.UpdateUsageResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateUsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateUsageReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedProfileServiceServer provides a mock function with given fields:
func (_m *ProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewProfileServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewProfileServiceServer creates a new instance of ProfileServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProfileServiceServer(t mockConstructorTestingTNewProfileServiceServer) *ProfileServiceServer {
	mock := &ProfileServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
