// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/ukama-agent/profile/pkg/db"
)

// ProfileRepo is an autogenerated mock type for the ProfileRepo type
type ProfileRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: record
func (_m *ProfileRepo) Add(record *db.Profile) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Profile) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: imsi
func (_m *ProfileRepo) Delete(imsi string) error {
	ret := _m.Called(imsi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(imsi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIccid provides a mock function with given fields: iccid
func (_m *ProfileRepo) GetByIccid(iccid string) (*db.Profile, error) {
	ret := _m.Called(iccid)

	var r0 *db.Profile
	if rf, ok := ret.Get(0).(func(string) *db.Profile); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByImsi provides a mock function with given fields: imsi
func (_m *ProfileRepo) GetByImsi(imsi string) (*db.Profile, error) {
	ret := _m.Called(imsi)

	var r0 *db.Profile
	if rf, ok := ret.Get(0).(func(string) *db.Profile); ok {
		r0 = rf(imsi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: imsi, pkg
func (_m *ProfileRepo) UpdatePackage(imsi string, pkg db.PackageDetails) error {
	ret := _m.Called(imsi, pkg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.PackageDetails) error); ok {
		r0 = rf(imsi, pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProfileRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewProfileRepo creates a new instance of ProfileRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProfileRepo(t mockConstructorTestingTNewProfileRepo) *ProfileRepo {
	mock := &ProfileRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
