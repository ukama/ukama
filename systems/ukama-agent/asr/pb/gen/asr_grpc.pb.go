// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: asr.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AsrRecordService_Activate_FullMethodName          = "/ukama.subscriber.asr.v1.AsrRecordService/Activate"
	AsrRecordService_Inactivate_FullMethodName        = "/ukama.subscriber.asr.v1.AsrRecordService/Inactivate"
	AsrRecordService_UpdatePackage_FullMethodName     = "/ukama.subscriber.asr.v1.AsrRecordService/UpdatePackage"
	AsrRecordService_UpdateGuti_FullMethodName        = "/ukama.subscriber.asr.v1.AsrRecordService/UpdateGuti"
	AsrRecordService_UpdateTai_FullMethodName         = "/ukama.subscriber.asr.v1.AsrRecordService/UpdateTai"
	AsrRecordService_Read_FullMethodName              = "/ukama.subscriber.asr.v1.AsrRecordService/Read"
	AsrRecordService_GetUsage_FullMethodName          = "/ukama.subscriber.asr.v1.AsrRecordService/GetUsage"
	AsrRecordService_GetUsageForPeriod_FullMethodName = "/ukama.subscriber.asr.v1.AsrRecordService/GetUsageForPeriod"
)

// AsrRecordServiceClient is the client API for AsrRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ASR aka Active Subscriber Registry
// ASR maintains the record of all the active subscribers of a organization. All the network within the organization share same ASR.
// Subscriber is added to ASr as soon as it is activated and removed from ASR as soon as its deactivated.
//
// ASR has REST interfaces to services like
// -  Factory, for reading sim data
// -  PCRF, for setting policies for subscriber
// -  Organization registry for validating network.enum
// -  Organization dataplan for getting packages inforamtion
//
// For now subscriber can only be a part on one network under organization. If he needs to join other network a new sim needs to be allocated.
//
// RPC exposed by ASR
// - Activate
// - Inactivate
// - UpdatePackage
// - UpdateGuti
// - UpdateTai
// - Read
type AsrRecordServiceClient interface {
	// / Use this RPC to activate or add a new subscriber to ASR
	Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*ActivateResp, error)
	// / Use this RPC to inactivate or remove a subscriber to ASR
	Inactivate(ctx context.Context, in *InactivateReq, opts ...grpc.CallOption) (*InactivateResp, error)
	// / Use this RPC to update a subscriber package in ASR
	UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*UpdatePackageResp, error)
	// / This RPC is called when a Update GUTI message is sent by node
	UpdateGuti(ctx context.Context, in *UpdateGutiReq, opts ...grpc.CallOption) (*UpdateGutiResp, error)
	// / This RPC is called when a Update TAI message is sent by node
	UpdateTai(ctx context.Context, in *UpdateTaiReq, opts ...grpc.CallOption) (*UpdateTaiResp, error)
	// / This RPC is used to read the subscriber data from ASR based on IMSI or ICCID
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error)
	// / This RPC provides you with the usage for current package
	GetUsage(ctx context.Context, in *UsageReq, opts ...grpc.CallOption) (*UsageResp, error)
	// / This RPC provides you with the usage for period
	GetUsageForPeriod(ctx context.Context, in *UsageForPeriodReq, opts ...grpc.CallOption) (*UsageResp, error)
}

type asrRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsrRecordServiceClient(cc grpc.ClientConnInterface) AsrRecordServiceClient {
	return &asrRecordServiceClient{cc}
}

func (c *asrRecordServiceClient) Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*ActivateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateResp)
	err := c.cc.Invoke(ctx, AsrRecordService_Activate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) Inactivate(ctx context.Context, in *InactivateReq, opts ...grpc.CallOption) (*InactivateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InactivateResp)
	err := c.cc.Invoke(ctx, AsrRecordService_Inactivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*UpdatePackageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePackageResp)
	err := c.cc.Invoke(ctx, AsrRecordService_UpdatePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) UpdateGuti(ctx context.Context, in *UpdateGutiReq, opts ...grpc.CallOption) (*UpdateGutiResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGutiResp)
	err := c.cc.Invoke(ctx, AsrRecordService_UpdateGuti_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) UpdateTai(ctx context.Context, in *UpdateTaiReq, opts ...grpc.CallOption) (*UpdateTaiResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaiResp)
	err := c.cc.Invoke(ctx, AsrRecordService_UpdateTai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResp)
	err := c.cc.Invoke(ctx, AsrRecordService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) GetUsage(ctx context.Context, in *UsageReq, opts ...grpc.CallOption) (*UsageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsageResp)
	err := c.cc.Invoke(ctx, AsrRecordService_GetUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) GetUsageForPeriod(ctx context.Context, in *UsageForPeriodReq, opts ...grpc.CallOption) (*UsageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsageResp)
	err := c.cc.Invoke(ctx, AsrRecordService_GetUsageForPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsrRecordServiceServer is the server API for AsrRecordService service.
// All implementations must embed UnimplementedAsrRecordServiceServer
// for forward compatibility.
//
// ASR aka Active Subscriber Registry
// ASR maintains the record of all the active subscribers of a organization. All the network within the organization share same ASR.
// Subscriber is added to ASr as soon as it is activated and removed from ASR as soon as its deactivated.
//
// ASR has REST interfaces to services like
// -  Factory, for reading sim data
// -  PCRF, for setting policies for subscriber
// -  Organization registry for validating network.enum
// -  Organization dataplan for getting packages inforamtion
//
// For now subscriber can only be a part on one network under organization. If he needs to join other network a new sim needs to be allocated.
//
// RPC exposed by ASR
// - Activate
// - Inactivate
// - UpdatePackage
// - UpdateGuti
// - UpdateTai
// - Read
type AsrRecordServiceServer interface {
	// / Use this RPC to activate or add a new subscriber to ASR
	Activate(context.Context, *ActivateReq) (*ActivateResp, error)
	// / Use this RPC to inactivate or remove a subscriber to ASR
	Inactivate(context.Context, *InactivateReq) (*InactivateResp, error)
	// / Use this RPC to update a subscriber package in ASR
	UpdatePackage(context.Context, *UpdatePackageReq) (*UpdatePackageResp, error)
	// / This RPC is called when a Update GUTI message is sent by node
	UpdateGuti(context.Context, *UpdateGutiReq) (*UpdateGutiResp, error)
	// / This RPC is called when a Update TAI message is sent by node
	UpdateTai(context.Context, *UpdateTaiReq) (*UpdateTaiResp, error)
	// / This RPC is used to read the subscriber data from ASR based on IMSI or ICCID
	Read(context.Context, *ReadReq) (*ReadResp, error)
	// / This RPC provides you with the usage for current package
	GetUsage(context.Context, *UsageReq) (*UsageResp, error)
	// / This RPC provides you with the usage for period
	GetUsageForPeriod(context.Context, *UsageForPeriodReq) (*UsageResp, error)
	mustEmbedUnimplementedAsrRecordServiceServer()
}

// UnimplementedAsrRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAsrRecordServiceServer struct{}

func (UnimplementedAsrRecordServiceServer) Activate(context.Context, *ActivateReq) (*ActivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedAsrRecordServiceServer) Inactivate(context.Context, *InactivateReq) (*InactivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inactivate not implemented")
}
func (UnimplementedAsrRecordServiceServer) UpdatePackage(context.Context, *UpdatePackageReq) (*UpdatePackageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedAsrRecordServiceServer) UpdateGuti(context.Context, *UpdateGutiReq) (*UpdateGutiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuti not implemented")
}
func (UnimplementedAsrRecordServiceServer) UpdateTai(context.Context, *UpdateTaiReq) (*UpdateTaiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTai not implemented")
}
func (UnimplementedAsrRecordServiceServer) Read(context.Context, *ReadReq) (*ReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedAsrRecordServiceServer) GetUsage(context.Context, *UsageReq) (*UsageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsage not implemented")
}
func (UnimplementedAsrRecordServiceServer) GetUsageForPeriod(context.Context, *UsageForPeriodReq) (*UsageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageForPeriod not implemented")
}
func (UnimplementedAsrRecordServiceServer) mustEmbedUnimplementedAsrRecordServiceServer() {}
func (UnimplementedAsrRecordServiceServer) testEmbeddedByValue()                          {}

// UnsafeAsrRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsrRecordServiceServer will
// result in compilation errors.
type UnsafeAsrRecordServiceServer interface {
	mustEmbedUnimplementedAsrRecordServiceServer()
}

func RegisterAsrRecordServiceServer(s grpc.ServiceRegistrar, srv AsrRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedAsrRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AsrRecordService_ServiceDesc, srv)
}

func _AsrRecordService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).Activate(ctx, req.(*ActivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_Inactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).Inactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_Inactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).Inactivate(ctx, req.(*InactivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_UpdatePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).UpdatePackage(ctx, req.(*UpdatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_UpdateGuti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGutiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).UpdateGuti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_UpdateGuti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).UpdateGuti(ctx, req.(*UpdateGutiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_UpdateTai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).UpdateTai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_UpdateTai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).UpdateTai(ctx, req.(*UpdateTaiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_GetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).GetUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_GetUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).GetUsage(ctx, req.(*UsageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_GetUsageForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageForPeriodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).GetUsageForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsrRecordService_GetUsageForPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).GetUsageForPeriod(ctx, req.(*UsageForPeriodReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AsrRecordService_ServiceDesc is the grpc.ServiceDesc for AsrRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsrRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.subscriber.asr.v1.AsrRecordService",
	HandlerType: (*AsrRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _AsrRecordService_Activate_Handler,
		},
		{
			MethodName: "Inactivate",
			Handler:    _AsrRecordService_Inactivate_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _AsrRecordService_UpdatePackage_Handler,
		},
		{
			MethodName: "UpdateGuti",
			Handler:    _AsrRecordService_UpdateGuti_Handler,
		},
		{
			MethodName: "UpdateTai",
			Handler:    _AsrRecordService_UpdateTai_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AsrRecordService_Read_Handler,
		},
		{
			MethodName: "GetUsage",
			Handler:    _AsrRecordService_GetUsage_Handler,
		},
		{
			MethodName: "GetUsageForPeriod",
			Handler:    _AsrRecordService_GetUsageForPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asr.proto",
}
