// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: asr.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsrRecordServiceClient is the client API for AsrRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsrRecordServiceClient interface {
	/// Use this RPC to activate or add a new subscriber to ASR
	Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*ActivateResp, error)
	/// Use this RPC to inactivate or remove a subscriber to ASR
	Inactivate(ctx context.Context, in *InactivateReq, opts ...grpc.CallOption) (*InactivateResp, error)
	/// Use this RPC to update a subscriber package in ASR
	UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*UpdatePackageResp, error)
	/// This RPC is called when a Update GUTI message is sent by node
	UpdateGuti(ctx context.Context, in *UpdateGutiReq, opts ...grpc.CallOption) (*UpdateGutiResp, error)
	/// This RPC is called when a Update TAI message is sent by node
	UpdateTai(ctx context.Context, in *UpdateTaiReq, opts ...grpc.CallOption) (*UpdateTaiResp, error)
	/// This RPC is used to read the subscriber data from ASR based on IMSI or ICCID
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error)
}

type asrRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsrRecordServiceClient(cc grpc.ClientConnInterface) AsrRecordServiceClient {
	return &asrRecordServiceClient{cc}
}

func (c *asrRecordServiceClient) Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*ActivateResp, error) {
	out := new(ActivateResp)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.asr.v1.AsrRecordService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) Inactivate(ctx context.Context, in *InactivateReq, opts ...grpc.CallOption) (*InactivateResp, error) {
	out := new(InactivateResp)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.asr.v1.AsrRecordService/Inactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*UpdatePackageResp, error) {
	out := new(UpdatePackageResp)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.asr.v1.AsrRecordService/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) UpdateGuti(ctx context.Context, in *UpdateGutiReq, opts ...grpc.CallOption) (*UpdateGutiResp, error) {
	out := new(UpdateGutiResp)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.asr.v1.AsrRecordService/UpdateGuti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) UpdateTai(ctx context.Context, in *UpdateTaiReq, opts ...grpc.CallOption) (*UpdateTaiResp, error) {
	out := new(UpdateTaiResp)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.asr.v1.AsrRecordService/UpdateTai", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrRecordServiceClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error) {
	out := new(ReadResp)
	err := c.cc.Invoke(ctx, "/ukama.subscriber.asr.v1.AsrRecordService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsrRecordServiceServer is the server API for AsrRecordService service.
// All implementations must embed UnimplementedAsrRecordServiceServer
// for forward compatibility
type AsrRecordServiceServer interface {
	/// Use this RPC to activate or add a new subscriber to ASR
	Activate(context.Context, *ActivateReq) (*ActivateResp, error)
	/// Use this RPC to inactivate or remove a subscriber to ASR
	Inactivate(context.Context, *InactivateReq) (*InactivateResp, error)
	/// Use this RPC to update a subscriber package in ASR
	UpdatePackage(context.Context, *UpdatePackageReq) (*UpdatePackageResp, error)
	/// This RPC is called when a Update GUTI message is sent by node
	UpdateGuti(context.Context, *UpdateGutiReq) (*UpdateGutiResp, error)
	/// This RPC is called when a Update TAI message is sent by node
	UpdateTai(context.Context, *UpdateTaiReq) (*UpdateTaiResp, error)
	/// This RPC is used to read the subscriber data from ASR based on IMSI or ICCID
	Read(context.Context, *ReadReq) (*ReadResp, error)
	mustEmbedUnimplementedAsrRecordServiceServer()
}

// UnimplementedAsrRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAsrRecordServiceServer struct {
}

func (UnimplementedAsrRecordServiceServer) Activate(context.Context, *ActivateReq) (*ActivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedAsrRecordServiceServer) Inactivate(context.Context, *InactivateReq) (*InactivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inactivate not implemented")
}
func (UnimplementedAsrRecordServiceServer) UpdatePackage(context.Context, *UpdatePackageReq) (*UpdatePackageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedAsrRecordServiceServer) UpdateGuti(context.Context, *UpdateGutiReq) (*UpdateGutiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuti not implemented")
}
func (UnimplementedAsrRecordServiceServer) UpdateTai(context.Context, *UpdateTaiReq) (*UpdateTaiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTai not implemented")
}
func (UnimplementedAsrRecordServiceServer) Read(context.Context, *ReadReq) (*ReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedAsrRecordServiceServer) mustEmbedUnimplementedAsrRecordServiceServer() {}

// UnsafeAsrRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsrRecordServiceServer will
// result in compilation errors.
type UnsafeAsrRecordServiceServer interface {
	mustEmbedUnimplementedAsrRecordServiceServer()
}

func RegisterAsrRecordServiceServer(s grpc.ServiceRegistrar, srv AsrRecordServiceServer) {
	s.RegisterService(&AsrRecordService_ServiceDesc, srv)
}

func _AsrRecordService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.asr.v1.AsrRecordService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).Activate(ctx, req.(*ActivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_Inactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).Inactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.asr.v1.AsrRecordService/Inactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).Inactivate(ctx, req.(*InactivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.asr.v1.AsrRecordService/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).UpdatePackage(ctx, req.(*UpdatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_UpdateGuti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGutiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).UpdateGuti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.asr.v1.AsrRecordService/UpdateGuti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).UpdateGuti(ctx, req.(*UpdateGutiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_UpdateTai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).UpdateTai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.asr.v1.AsrRecordService/UpdateTai",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).UpdateTai(ctx, req.(*UpdateTaiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrRecordService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrRecordServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.subscriber.asr.v1.AsrRecordService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrRecordServiceServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AsrRecordService_ServiceDesc is the grpc.ServiceDesc for AsrRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsrRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.subscriber.asr.v1.AsrRecordService",
	HandlerType: (*AsrRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _AsrRecordService_Activate_Handler,
		},
		{
			MethodName: "Inactivate",
			Handler:    _AsrRecordService_Inactivate_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _AsrRecordService_UpdatePackage_Handler,
		},
		{
			MethodName: "UpdateGuti",
			Handler:    _AsrRecordService_UpdateGuti_Handler,
		},
		{
			MethodName: "UpdateTai",
			Handler:    _AsrRecordService_UpdateTai_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AsrRecordService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asr.proto",
}
