// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: asr.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UsageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage uint64 `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *UsageResp) Reset() {
	*x = UsageResp{}
	mi := &file_asr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResp) ProtoMessage() {}

func (x *UsageResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResp.ProtoReflect.Descriptor instead.
func (*UsageResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{0}
}

func (x *UsageResp) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type UsageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*UsageReq_Imsi
	//	*UsageReq_Iccid
	Id isUsageReq_Id `protobuf_oneof:"id"`
}

func (x *UsageReq) Reset() {
	*x = UsageReq{}
	mi := &file_asr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageReq) ProtoMessage() {}

func (x *UsageReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageReq.ProtoReflect.Descriptor instead.
func (*UsageReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{1}
}

func (m *UsageReq) GetId() isUsageReq_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *UsageReq) GetImsi() string {
	if x, ok := x.GetId().(*UsageReq_Imsi); ok {
		return x.Imsi
	}
	return ""
}

func (x *UsageReq) GetIccid() string {
	if x, ok := x.GetId().(*UsageReq_Iccid); ok {
		return x.Iccid
	}
	return ""
}

type isUsageReq_Id interface {
	isUsageReq_Id()
}

type UsageReq_Imsi struct {
	Imsi string `protobuf:"bytes,1,opt,name=Imsi,proto3,oneof"`
}

type UsageReq_Iccid struct {
	Iccid string `protobuf:"bytes,2,opt,name=Iccid,proto3,oneof"`
}

func (*UsageReq_Imsi) isUsageReq_Id() {}

func (*UsageReq_Iccid) isUsageReq_Id() {}

type UsageForPeriodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*UsageForPeriodReq_Imsi
	//	*UsageForPeriodReq_Iccid
	Id        isUsageForPeriodReq_Id `protobuf_oneof:"id"`
	StartTime uint64                 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   uint64                 `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *UsageForPeriodReq) Reset() {
	*x = UsageForPeriodReq{}
	mi := &file_asr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageForPeriodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageForPeriodReq) ProtoMessage() {}

func (x *UsageForPeriodReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageForPeriodReq.ProtoReflect.Descriptor instead.
func (*UsageForPeriodReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{2}
}

func (m *UsageForPeriodReq) GetId() isUsageForPeriodReq_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *UsageForPeriodReq) GetImsi() string {
	if x, ok := x.GetId().(*UsageForPeriodReq_Imsi); ok {
		return x.Imsi
	}
	return ""
}

func (x *UsageForPeriodReq) GetIccid() string {
	if x, ok := x.GetId().(*UsageForPeriodReq_Iccid); ok {
		return x.Iccid
	}
	return ""
}

func (x *UsageForPeriodReq) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UsageForPeriodReq) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type isUsageForPeriodReq_Id interface {
	isUsageForPeriodReq_Id()
}

type UsageForPeriodReq_Imsi struct {
	Imsi string `protobuf:"bytes,1,opt,name=Imsi,proto3,oneof"`
}

type UsageForPeriodReq_Iccid struct {
	Iccid string `protobuf:"bytes,2,opt,name=Iccid,proto3,oneof"`
}

func (*UsageForPeriodReq_Imsi) isUsageForPeriodReq_Id() {}

func (*UsageForPeriodReq_Iccid) isUsageForPeriodReq_Id() {}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi         string  `protobuf:"bytes,1,opt,name=Imsi,json=imsi,proto3" json:"Imsi,omitempty"`
	Iccid        string  `protobuf:"bytes,2,opt,name=Iccid,json=iccid,proto3" json:"Iccid,omitempty"`
	Key          []byte  `protobuf:"bytes,3,opt,name=Key,json=k,proto3" json:"Key,omitempty"`
	Op           []byte  `protobuf:"bytes,4,opt,name=Op,json=op,proto3" json:"Op,omitempty"`
	Amf          []byte  `protobuf:"bytes,5,opt,name=Amf,json=amf,proto3" json:"Amf,omitempty"`
	Apn          *Apn    `protobuf:"bytes,6,opt,name=Apn,json=apn,proto3" json:"Apn,omitempty"`
	AlgoType     uint32  `protobuf:"varint,7,opt,name=AlgoType,json=algo_type,proto3" json:"AlgoType,omitempty"`
	UeDlAmbrBps  uint32  `protobuf:"varint,8,opt,name=UeDlAmbrBps,json=ue_dl_ambr_bps,proto3" json:"UeDlAmbrBps,omitempty"`
	UeUlAmbrBps  uint32  `protobuf:"varint,9,opt,name=UeUlAmbrBps,json=ue_ul_ambr_bps,proto3" json:"UeUlAmbrBps,omitempty"`
	Sqn          uint64  `protobuf:"varint,10,opt,name=Sqn,json=sqn,proto3" json:"Sqn,omitempty"`
	CsgIdPrsent  bool    `protobuf:"varint,11,opt,name=CsgIdPrsent,json=csg_id_prsent,proto3" json:"CsgIdPrsent,omitempty"`
	CsgId        uint32  `protobuf:"varint,12,opt,name=CsgId,json=csg_id,proto3" json:"CsgId,omitempty"`
	PackageId    string  `protobuf:"bytes,13,opt,name=PackageId,json=package_id,proto3" json:"PackageId,omitempty"`
	SimPackageId string  `protobuf:"bytes,14,opt,name=SimPackageId,json=sim_package_id,proto3" json:"SimPackageId,omitempty"`
	NetworkId    string  `protobuf:"bytes,15,opt,name=NetworkId,json=network_id,proto3" json:"NetworkId,omitempty"`
	Policy       *Policy `protobuf:"bytes,16,opt,name=Policy,json=policy,proto3" json:"Policy,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_asr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{3}
}

func (x *Record) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *Record) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Record) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Record) GetOp() []byte {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *Record) GetAmf() []byte {
	if x != nil {
		return x.Amf
	}
	return nil
}

func (x *Record) GetApn() *Apn {
	if x != nil {
		return x.Apn
	}
	return nil
}

func (x *Record) GetAlgoType() uint32 {
	if x != nil {
		return x.AlgoType
	}
	return 0
}

func (x *Record) GetUeDlAmbrBps() uint32 {
	if x != nil {
		return x.UeDlAmbrBps
	}
	return 0
}

func (x *Record) GetUeUlAmbrBps() uint32 {
	if x != nil {
		return x.UeUlAmbrBps
	}
	return 0
}

func (x *Record) GetSqn() uint64 {
	if x != nil {
		return x.Sqn
	}
	return 0
}

func (x *Record) GetCsgIdPrsent() bool {
	if x != nil {
		return x.CsgIdPrsent
	}
	return false
}

func (x *Record) GetCsgId() uint32 {
	if x != nil {
		return x.CsgId
	}
	return 0
}

func (x *Record) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *Record) GetSimPackageId() string {
	if x != nil {
		return x.SimPackageId
	}
	return ""
}

func (x *Record) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Record) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Apn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Apn) Reset() {
	*x = Apn{}
	mi := &file_asr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Apn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Apn) ProtoMessage() {}

func (x *Apn) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Apn.ProtoReflect.Descriptor instead.
func (*Apn) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{4}
}

func (x *Apn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*ReadReq_Imsi
	//	*ReadReq_Iccid
	Id isReadReq_Id `protobuf_oneof:"id"`
}

func (x *ReadReq) Reset() {
	*x = ReadReq{}
	mi := &file_asr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq) ProtoMessage() {}

func (x *ReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq.ProtoReflect.Descriptor instead.
func (*ReadReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{5}
}

func (m *ReadReq) GetId() isReadReq_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ReadReq) GetImsi() string {
	if x, ok := x.GetId().(*ReadReq_Imsi); ok {
		return x.Imsi
	}
	return ""
}

func (x *ReadReq) GetIccid() string {
	if x, ok := x.GetId().(*ReadReq_Iccid); ok {
		return x.Iccid
	}
	return ""
}

type isReadReq_Id interface {
	isReadReq_Id()
}

type ReadReq_Imsi struct {
	Imsi string `protobuf:"bytes,1,opt,name=Imsi,proto3,oneof"`
}

type ReadReq_Iccid struct {
	Iccid string `protobuf:"bytes,2,opt,name=Iccid,proto3,oneof"`
}

func (*ReadReq_Imsi) isReadReq_Id() {}

func (*ReadReq_Iccid) isReadReq_Id() {}

type ReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=Record,proto3" json:"Record,omitempty"`
}

func (x *ReadResp) Reset() {
	*x = ReadResp{}
	mi := &file_asr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResp) ProtoMessage() {}

func (x *ReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResp.ProtoReflect.Descriptor instead.
func (*ReadResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{6}
}

func (x *ReadResp) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type ActivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid        string `protobuf:"bytes,1,opt,name=Iccid,json=iccid,proto3" json:"Iccid,omitempty"`
	Imsi         string `protobuf:"bytes,2,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	SimPackageId string `protobuf:"bytes,3,opt,name=SimPackageId,proto3" json:"SimPackageId,omitempty"`
	PackageId    string `protobuf:"bytes,4,opt,name=PackageId,proto3" json:"PackageId,omitempty"`
	NetworkId    string `protobuf:"bytes,5,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
}

func (x *ActivateReq) Reset() {
	*x = ActivateReq{}
	mi := &file_asr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateReq) ProtoMessage() {}

func (x *ActivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateReq.ProtoReflect.Descriptor instead.
func (*ActivateReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{7}
}

func (x *ActivateReq) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *ActivateReq) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *ActivateReq) GetSimPackageId() string {
	if x != nil {
		return x.SimPackageId
	}
	return ""
}

func (x *ActivateReq) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *ActivateReq) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type ActivateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateResp) Reset() {
	*x = ActivateResp{}
	mi := &file_asr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateResp) ProtoMessage() {}

func (x *ActivateResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateResp.ProtoReflect.Descriptor instead.
func (*ActivateResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{8}
}

// Could be called by subscriber manager with ICCID and by billing service with imsi
type InactivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid     string `protobuf:"bytes,1,opt,name=Iccid,json=iccid,proto3" json:"Iccid,omitempty"`
	Imsi      string `protobuf:"bytes,2,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	PackageId string `protobuf:"bytes,3,opt,name=PackageId,proto3" json:"PackageId,omitempty"`
	NetworkId string `protobuf:"bytes,4,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
}

func (x *InactivateReq) Reset() {
	*x = InactivateReq{}
	mi := &file_asr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InactivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactivateReq) ProtoMessage() {}

func (x *InactivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactivateReq.ProtoReflect.Descriptor instead.
func (*InactivateReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{9}
}

func (x *InactivateReq) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *InactivateReq) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *InactivateReq) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *InactivateReq) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type InactivateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InactivateResp) Reset() {
	*x = InactivateResp{}
	mi := &file_asr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InactivateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactivateResp) ProtoMessage() {}

func (x *InactivateResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactivateResp.ProtoReflect.Descriptor instead.
func (*InactivateResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{10}
}

type UpdatePackageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid        string `protobuf:"bytes,1,opt,name=Iccid,json=iccid,proto3" json:"Iccid,omitempty"`
	Imsi         string `protobuf:"bytes,2,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	SimPackageId string `protobuf:"bytes,3,opt,name=SimPackageId,proto3" json:"SimPackageId,omitempty"`
	PackageId    string `protobuf:"bytes,4,opt,name=PackageId,proto3" json:"PackageId,omitempty"`
	NetworkId    string `protobuf:"bytes,5,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
}

func (x *UpdatePackageReq) Reset() {
	*x = UpdatePackageReq{}
	mi := &file_asr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePackageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePackageReq) ProtoMessage() {}

func (x *UpdatePackageReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePackageReq.ProtoReflect.Descriptor instead.
func (*UpdatePackageReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePackageReq) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *UpdatePackageReq) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *UpdatePackageReq) GetSimPackageId() string {
	if x != nil {
		return x.SimPackageId
	}
	return ""
}

func (x *UpdatePackageReq) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *UpdatePackageReq) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type UpdatePackageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePackageResp) Reset() {
	*x = UpdatePackageResp{}
	mi := &file_asr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePackageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePackageResp) ProtoMessage() {}

func (x *UpdatePackageResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePackageResp.ProtoReflect.Descriptor instead.
func (*UpdatePackageResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{12}
}

type UpdateGutiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi      string `protobuf:"bytes,1,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	Guti      *Guti  `protobuf:"bytes,2,opt,name=Guti,proto3" json:"Guti,omitempty"`
	UpdatedAt uint32 `protobuf:"varint,4,opt,name=UpdatedAt,json=updated_at,proto3" json:"UpdatedAt,omitempty"` // unix timestamp
}

func (x *UpdateGutiReq) Reset() {
	*x = UpdateGutiReq{}
	mi := &file_asr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGutiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGutiReq) ProtoMessage() {}

func (x *UpdateGutiReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGutiReq.ProtoReflect.Descriptor instead.
func (*UpdateGutiReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateGutiReq) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *UpdateGutiReq) GetGuti() *Guti {
	if x != nil {
		return x.Guti
	}
	return nil
}

func (x *UpdateGutiReq) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Guti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlmnId string `protobuf:"bytes,1,opt,name=PlmnId,json=plmn_id,proto3" json:"PlmnId,omitempty"`
	Mmegi  uint32 `protobuf:"varint,2,opt,name=Mmegi,proto3" json:"Mmegi,omitempty"`
	Mmec   uint32 `protobuf:"varint,3,opt,name=Mmec,proto3" json:"Mmec,omitempty"`
	Mtmsi  uint32 `protobuf:"varint,4,opt,name=Mtmsi,proto3" json:"Mtmsi,omitempty"`
}

func (x *Guti) Reset() {
	*x = Guti{}
	mi := &file_asr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Guti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guti) ProtoMessage() {}

func (x *Guti) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guti.ProtoReflect.Descriptor instead.
func (*Guti) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{14}
}

func (x *Guti) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *Guti) GetMmegi() uint32 {
	if x != nil {
		return x.Mmegi
	}
	return 0
}

func (x *Guti) GetMmec() uint32 {
	if x != nil {
		return x.Mmec
	}
	return 0
}

func (x *Guti) GetMtmsi() uint32 {
	if x != nil {
		return x.Mtmsi
	}
	return 0
}

type UpdateGutiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGutiResp) Reset() {
	*x = UpdateGutiResp{}
	mi := &file_asr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGutiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGutiResp) ProtoMessage() {}

func (x *UpdateGutiResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGutiResp.ProtoReflect.Descriptor instead.
func (*UpdateGutiResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{15}
}

type UpdateTaiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi      string `protobuf:"bytes,1,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	PlmnId    string `protobuf:"bytes,2,opt,name=PlmnId,json=plmn_id,proto3" json:"PlmnId,omitempty"`
	Tac       uint32 `protobuf:"varint,3,opt,name=Tac,proto3" json:"Tac,omitempty"`                             // 16 bit max
	UpdatedAt uint32 `protobuf:"varint,4,opt,name=UpdatedAt,json=updated_at,proto3" json:"UpdatedAt,omitempty"` // unix timestamp
}

func (x *UpdateTaiReq) Reset() {
	*x = UpdateTaiReq{}
	mi := &file_asr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaiReq) ProtoMessage() {}

func (x *UpdateTaiReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaiReq.ProtoReflect.Descriptor instead.
func (*UpdateTaiReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateTaiReq) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *UpdateTaiReq) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *UpdateTaiReq) GetTac() uint32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *UpdateTaiReq) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UpdateTaiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaiResp) Reset() {
	*x = UpdateTaiResp{}
	mi := &file_asr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaiResp) ProtoMessage() {}

func (x *UpdateTaiResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaiResp.ProtoReflect.Descriptor instead.
func (*UpdateTaiResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{17}
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=Uuid,json=uuid,proto3" json:"Uuid,omitempty"`
	Burst        uint64 `protobuf:"varint,2,opt,name=Burst,json=burst,proto3" json:"Burst,omitempty"`
	TotalData    uint64 `protobuf:"varint,3,opt,name=TotalData,json=total_data,proto3" json:"TotalData,omitempty"`
	ConsumedData uint64 `protobuf:"varint,4,opt,name=ConsumedData,json=consumed_data,proto3" json:"ConsumedData,omitempty"`
	Ulbr         uint64 `protobuf:"varint,5,opt,name=Ulbr,json=ulbr,proto3" json:"Ulbr,omitempty"`
	Dlbr         uint64 `protobuf:"varint,6,opt,name=Dlbr,json=dlbr,proto3" json:"Dlbr,omitempty"`
	StartTime    uint64 `protobuf:"varint,7,opt,name=StartTime,json=start_time,proto3" json:"StartTime,omitempty"`
	EndTime      uint64 `protobuf:"varint,8,opt,name=EndTime,json=end_time,proto3" json:"EndTime,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_asr_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{18}
}

func (x *Policy) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Policy) GetBurst() uint64 {
	if x != nil {
		return x.Burst
	}
	return 0
}

func (x *Policy) GetTotalData() uint64 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *Policy) GetConsumedData() uint64 {
	if x != nil {
		return x.ConsumedData
	}
	return 0
}

func (x *Policy) GetUlbr() uint64 {
	if x != nil {
		return x.Ulbr
	}
	return 0
}

func (x *Policy) GetDlbr() uint64 {
	if x != nil {
		return x.Dlbr
	}
	return 0
}

func (x *Policy) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Policy) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type QueryUsageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iccid     string `protobuf:"bytes,1,opt,name=Iccid,proto3" json:"Iccid,omitempty"`
	NodeId    string `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Session   uint64 `protobuf:"varint,3,opt,name=Session,proto3" json:"Session,omitempty"`
	From      uint64 `protobuf:"varint,4,opt,name=From,proto3" json:"From,omitempty"`
	To        uint64 `protobuf:"varint,5,opt,name=To,proto3" json:"To,omitempty"`
	PackageId string `protobuf:"bytes,6,opt,name=packageId,proto3" json:"packageId,omitempty"`
	Count     uint32 `protobuf:"varint,7,opt,name=Count,proto3" json:"Count,omitempty"`
	Sort      bool   `protobuf:"varint,8,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (x *QueryUsageReq) Reset() {
	*x = QueryUsageReq{}
	mi := &file_asr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUsageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsageReq) ProtoMessage() {}

func (x *QueryUsageReq) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsageReq.ProtoReflect.Descriptor instead.
func (*QueryUsageReq) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{19}
}

func (x *QueryUsageReq) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *QueryUsageReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *QueryUsageReq) GetSession() uint64 {
	if x != nil {
		return x.Session
	}
	return 0
}

func (x *QueryUsageReq) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryUsageReq) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *QueryUsageReq) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *QueryUsageReq) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueryUsageReq) GetSort() bool {
	if x != nil {
		return x.Sort
	}
	return false
}

type QueryUsageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage uint64 `protobuf:"varint,1,opt,name=Usage,proto3" json:"Usage,omitempty"`
}

func (x *QueryUsageResp) Reset() {
	*x = QueryUsageResp{}
	mi := &file_asr_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUsageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsageResp) ProtoMessage() {}

func (x *QueryUsageResp) ProtoReflect() protoreflect.Message {
	mi := &file_asr_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsageResp.ProtoReflect.Descriptor instead.
func (*QueryUsageResp) Descriptor() ([]byte, []int) {
	return file_asr_proto_rawDescGZIP(), []int{20}
}

func (x *QueryUsageResp) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

var File_asr_proto protoreflect.FileDescriptor

var file_asr_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x73, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x08, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x16, 0x0a, 0x05, 0x49, 0x63,
	0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x49, 0x63, 0x63,
	0x69, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x11, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x04, 0x49, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x49,
	0x6d, 0x73, 0x69, 0x12, 0x16, 0x0a, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xfd, 0x03, 0x0a, 0x06, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70, 0x05, 0x78, 0x10, 0x52, 0x04,
	0x69, 0x6d, 0x73, 0x69, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70, 0x11, 0x78, 0x17, 0x52,
	0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6d, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x6d, 0x66, 0x12, 0x2e, 0x0a, 0x03, 0x41, 0x70, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x6e, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x41, 0x6c, 0x67, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x55, 0x65, 0x44, 0x6c, 0x41, 0x6d, 0x62,
	0x72, 0x42, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x65, 0x5f, 0x64,
	0x6c, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x5f, 0x62, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x55, 0x65,
	0x55, 0x6c, 0x41, 0x6d, 0x62, 0x72, 0x42, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x75, 0x65, 0x5f, 0x75, 0x6c, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x5f, 0x62, 0x70, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x53, 0x71, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x71,
	0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x73, 0x67, 0x49, 0x64, 0x50, 0x72, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x43, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x53,
	0x69, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x19, 0x0a, 0x03, 0x41, 0x70, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x16, 0x0a, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x42, 0x04, 0x0a,
	0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x37, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x63, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70,
	0x11, 0x78, 0x17, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6d,
	0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x69, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x0e,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x81,
	0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70, 0x11, 0x78, 0x17, 0x52, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01,
	0x70, 0x11, 0x78, 0x17, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x69, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22,
	0x13, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x74, 0x69, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70, 0x05, 0x78, 0x10,
	0x52, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x39, 0x0a, 0x04, 0x47, 0x75, 0x74, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x75, 0x74, 0x69, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x47, 0x75, 0x74,
	0x69, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x10, 0xf5, 0xb4, 0xcd, 0x8d, 0x06,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x6b, 0x0a, 0x04,
	0x47, 0x75, 0x74, 0x69, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70, 0x04, 0x78, 0x07,
	0x52, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6d, 0x65,
	0x67, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x6d, 0x65, 0x67, 0x69, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6d, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d,
	0x6d, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x74, 0x6d, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4d, 0x74, 0x6d, 0x73, 0x69, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x75, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x73, 0x69,
	0x12, 0x23, 0x0a, 0x06, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x70, 0x04, 0x78, 0x07, 0x52, 0x07, 0x70, 0x6c,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x54, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x58, 0x01, 0x78, 0x81, 0x80, 0x04, 0x52, 0x03,
	0x54, 0x61, 0x63, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x10, 0xf5, 0xb4, 0xcd,
	0x8d, 0x06, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x0f,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xe0, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x6c, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x75, 0x6c, 0x62, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6c, 0x62, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x64, 0x6c, 0x62, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x63, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x54, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x32, 0xd1, 0x06, 0x0a, 0x10, 0x41, 0x73, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d,
	0x0a, 0x0a, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x74, 0x69, 0x12, 0x26, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x74, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61,
	0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x69, 0x12, 0x25, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4b, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e,
	0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x61,
	0x73, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_asr_proto_rawDescOnce sync.Once
	file_asr_proto_rawDescData = file_asr_proto_rawDesc
)

func file_asr_proto_rawDescGZIP() []byte {
	file_asr_proto_rawDescOnce.Do(func() {
		file_asr_proto_rawDescData = protoimpl.X.CompressGZIP(file_asr_proto_rawDescData)
	})
	return file_asr_proto_rawDescData
}

var file_asr_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_asr_proto_goTypes = []any{
	(*UsageResp)(nil),         // 0: ukama.subscriber.asr.v1.UsageResp
	(*UsageReq)(nil),          // 1: ukama.subscriber.asr.v1.UsageReq
	(*UsageForPeriodReq)(nil), // 2: ukama.subscriber.asr.v1.UsageForPeriodReq
	(*Record)(nil),            // 3: ukama.subscriber.asr.v1.Record
	(*Apn)(nil),               // 4: ukama.subscriber.asr.v1.Apn
	(*ReadReq)(nil),           // 5: ukama.subscriber.asr.v1.ReadReq
	(*ReadResp)(nil),          // 6: ukama.subscriber.asr.v1.ReadResp
	(*ActivateReq)(nil),       // 7: ukama.subscriber.asr.v1.ActivateReq
	(*ActivateResp)(nil),      // 8: ukama.subscriber.asr.v1.ActivateResp
	(*InactivateReq)(nil),     // 9: ukama.subscriber.asr.v1.InactivateReq
	(*InactivateResp)(nil),    // 10: ukama.subscriber.asr.v1.InactivateResp
	(*UpdatePackageReq)(nil),  // 11: ukama.subscriber.asr.v1.UpdatePackageReq
	(*UpdatePackageResp)(nil), // 12: ukama.subscriber.asr.v1.UpdatePackageResp
	(*UpdateGutiReq)(nil),     // 13: ukama.subscriber.asr.v1.UpdateGutiReq
	(*Guti)(nil),              // 14: ukama.subscriber.asr.v1.Guti
	(*UpdateGutiResp)(nil),    // 15: ukama.subscriber.asr.v1.UpdateGutiResp
	(*UpdateTaiReq)(nil),      // 16: ukama.subscriber.asr.v1.UpdateTaiReq
	(*UpdateTaiResp)(nil),     // 17: ukama.subscriber.asr.v1.UpdateTaiResp
	(*Policy)(nil),            // 18: ukama.subscriber.asr.v1.Policy
	(*QueryUsageReq)(nil),     // 19: ukama.subscriber.asr.v1.QueryUsageReq
	(*QueryUsageResp)(nil),    // 20: ukama.subscriber.asr.v1.QueryUsageResp
}
var file_asr_proto_depIdxs = []int32{
	4,  // 0: ukama.subscriber.asr.v1.Record.Apn:type_name -> ukama.subscriber.asr.v1.Apn
	18, // 1: ukama.subscriber.asr.v1.Record.Policy:type_name -> ukama.subscriber.asr.v1.Policy
	3,  // 2: ukama.subscriber.asr.v1.ReadResp.Record:type_name -> ukama.subscriber.asr.v1.Record
	14, // 3: ukama.subscriber.asr.v1.UpdateGutiReq.Guti:type_name -> ukama.subscriber.asr.v1.Guti
	7,  // 4: ukama.subscriber.asr.v1.AsrRecordService.Activate:input_type -> ukama.subscriber.asr.v1.ActivateReq
	9,  // 5: ukama.subscriber.asr.v1.AsrRecordService.Inactivate:input_type -> ukama.subscriber.asr.v1.InactivateReq
	11, // 6: ukama.subscriber.asr.v1.AsrRecordService.UpdatePackage:input_type -> ukama.subscriber.asr.v1.UpdatePackageReq
	13, // 7: ukama.subscriber.asr.v1.AsrRecordService.UpdateGuti:input_type -> ukama.subscriber.asr.v1.UpdateGutiReq
	16, // 8: ukama.subscriber.asr.v1.AsrRecordService.UpdateTai:input_type -> ukama.subscriber.asr.v1.UpdateTaiReq
	5,  // 9: ukama.subscriber.asr.v1.AsrRecordService.Read:input_type -> ukama.subscriber.asr.v1.ReadReq
	1,  // 10: ukama.subscriber.asr.v1.AsrRecordService.GetUsage:input_type -> ukama.subscriber.asr.v1.UsageReq
	2,  // 11: ukama.subscriber.asr.v1.AsrRecordService.GetUsageForPeriod:input_type -> ukama.subscriber.asr.v1.UsageForPeriodReq
	19, // 12: ukama.subscriber.asr.v1.AsrRecordService.QueryUsage:input_type -> ukama.subscriber.asr.v1.QueryUsageReq
	8,  // 13: ukama.subscriber.asr.v1.AsrRecordService.Activate:output_type -> ukama.subscriber.asr.v1.ActivateResp
	10, // 14: ukama.subscriber.asr.v1.AsrRecordService.Inactivate:output_type -> ukama.subscriber.asr.v1.InactivateResp
	12, // 15: ukama.subscriber.asr.v1.AsrRecordService.UpdatePackage:output_type -> ukama.subscriber.asr.v1.UpdatePackageResp
	15, // 16: ukama.subscriber.asr.v1.AsrRecordService.UpdateGuti:output_type -> ukama.subscriber.asr.v1.UpdateGutiResp
	17, // 17: ukama.subscriber.asr.v1.AsrRecordService.UpdateTai:output_type -> ukama.subscriber.asr.v1.UpdateTaiResp
	6,  // 18: ukama.subscriber.asr.v1.AsrRecordService.Read:output_type -> ukama.subscriber.asr.v1.ReadResp
	0,  // 19: ukama.subscriber.asr.v1.AsrRecordService.GetUsage:output_type -> ukama.subscriber.asr.v1.UsageResp
	0,  // 20: ukama.subscriber.asr.v1.AsrRecordService.GetUsageForPeriod:output_type -> ukama.subscriber.asr.v1.UsageResp
	20, // 21: ukama.subscriber.asr.v1.AsrRecordService.QueryUsage:output_type -> ukama.subscriber.asr.v1.QueryUsageResp
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_asr_proto_init() }
func file_asr_proto_init() {
	if File_asr_proto != nil {
		return
	}
	file_asr_proto_msgTypes[1].OneofWrappers = []any{
		(*UsageReq_Imsi)(nil),
		(*UsageReq_Iccid)(nil),
	}
	file_asr_proto_msgTypes[2].OneofWrappers = []any{
		(*UsageForPeriodReq_Imsi)(nil),
		(*UsageForPeriodReq_Iccid)(nil),
	}
	file_asr_proto_msgTypes[5].OneofWrappers = []any{
		(*ReadReq_Imsi)(nil),
		(*ReadReq_Iccid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_asr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_asr_proto_goTypes,
		DependencyIndexes: file_asr_proto_depIdxs,
		MessageInfos:      file_asr_proto_msgTypes,
	}.Build()
	File_asr_proto = out.File
	file_asr_proto_rawDesc = nil
	file_asr_proto_goTypes = nil
	file_asr_proto_depIdxs = nil
}
