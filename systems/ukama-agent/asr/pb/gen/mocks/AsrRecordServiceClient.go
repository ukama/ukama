// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/ukama-agent/asr/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AsrRecordServiceClient is an autogenerated mock type for the AsrRecordServiceClient type
type AsrRecordServiceClient struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) Activate(ctx context.Context, in *gen.ActivateReq, opts ...grpc.CallOption) (*gen.ActivateResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 *gen.ActivateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateReq, ...grpc.CallOption) (*gen.ActivateResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateReq, ...grpc.CallOption) *gen.ActivateResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ActivateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) GetUsage(ctx context.Context, in *gen.UsageReq, opts ...grpc.CallOption) (*gen.UsageResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage")
	}

	var r0 *gen.UsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageReq, ...grpc.CallOption) (*gen.UsageResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageReq, ...grpc.CallOption) *gen.UsageResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UsageReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForPeriod provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) GetUsageForPeriod(ctx context.Context, in *gen.UsageForPeriodReq, opts ...grpc.CallOption) (*gen.UsageResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageForPeriod")
	}

	var r0 *gen.UsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageForPeriodReq, ...grpc.CallOption) (*gen.UsageResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UsageForPeriodReq, ...grpc.CallOption) *gen.UsageResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UsageForPeriodReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inactivate provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) Inactivate(ctx context.Context, in *gen.InactivateReq, opts ...grpc.CallOption) (*gen.InactivateResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Inactivate")
	}

	var r0 *gen.InactivateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.InactivateReq, ...grpc.CallOption) (*gen.InactivateResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.InactivateReq, ...grpc.CallOption) *gen.InactivateResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.InactivateResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.InactivateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryUsage provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) QueryUsage(ctx context.Context, in *gen.QueryUsageReq, opts ...grpc.CallOption) (*gen.QueryUsageResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryUsage")
	}

	var r0 *gen.QueryUsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.QueryUsageReq, ...grpc.CallOption) (*gen.QueryUsageResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.QueryUsageReq, ...grpc.CallOption) *gen.QueryUsageResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.QueryUsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.QueryUsageReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) Read(ctx context.Context, in *gen.ReadReq, opts ...grpc.CallOption) (*gen.ReadResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *gen.ReadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReadReq, ...grpc.CallOption) (*gen.ReadResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReadReq, ...grpc.CallOption) *gen.ReadResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReadReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGuti provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) UpdateGuti(ctx context.Context, in *gen.UpdateGutiReq, opts ...grpc.CallOption) (*gen.UpdateGutiResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGuti")
	}

	var r0 *gen.UpdateGutiResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateGutiReq, ...grpc.CallOption) (*gen.UpdateGutiResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateGutiReq, ...grpc.CallOption) *gen.UpdateGutiResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateGutiResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateGutiReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) UpdatePackage(ctx context.Context, in *gen.UpdatePackageReq, opts ...grpc.CallOption) (*gen.UpdatePackageResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackage")
	}

	var r0 *gen.UpdatePackageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageReq, ...grpc.CallOption) (*gen.UpdatePackageResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageReq, ...grpc.CallOption) *gen.UpdatePackageResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdatePackageReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTai provides a mock function with given fields: ctx, in, opts
func (_m *AsrRecordServiceClient) UpdateTai(ctx context.Context, in *gen.UpdateTaiReq, opts ...grpc.CallOption) (*gen.UpdateTaiResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTai")
	}

	var r0 *gen.UpdateTaiResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateTaiReq, ...grpc.CallOption) (*gen.UpdateTaiResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateTaiReq, ...grpc.CallOption) *gen.UpdateTaiResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateTaiResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateTaiReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAsrRecordServiceClient creates a new instance of AsrRecordServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsrRecordServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsrRecordServiceClient {
	mock := &AsrRecordServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
