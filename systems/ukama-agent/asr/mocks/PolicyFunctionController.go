// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/ukama-agent/asr/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// PolicyFunctionController is an autogenerated mock type for the PolicyFunctionController type
type PolicyFunctionController struct {
	mock.Mock
}

// ApplyPolicy provides a mock function with given fields: method, imsi, network, p
func (_m *PolicyFunctionController) ApplyPolicy(method string, imsi string, network string, p *db.Policy) error {
	ret := _m.Called(method, imsi, network, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, *db.Policy) error); ok {
		r0 = rf(method, imsi, network, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePolicy provides a mock function with given fields: p
func (_m *PolicyFunctionController) CreatePolicy(p *db.Policy) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Policy) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePolicy provides a mock function with given fields: id
func (_m *PolicyFunctionController) DeletePolicy(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePolicyByAsrID provides a mock function with given fields: id
func (_m *PolicyFunctionController) DeletePolicyByAsrID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicy provides a mock function with given fields: id
func (_m *PolicyFunctionController) GetPolicy(id uuid.UUID) (*db.Policy, error) {
	ret := _m.Called(id)

	var r0 *db.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Policy, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: id, p
func (_m *PolicyFunctionController) UpdatePolicy(id uint, p *db.Policy) error {
	ret := _m.Called(id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *db.Policy) error); ok {
		r0 = rf(id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPolicyFunctionController interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolicyFunctionController creates a new instance of PolicyFunctionController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolicyFunctionController(t mockConstructorTestingTNewPolicyFunctionController) *PolicyFunctionController {
	mock := &PolicyFunctionController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
