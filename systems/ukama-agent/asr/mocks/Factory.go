// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/ukama/ukama/systems/ukama-agent/asr/pkg/client"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// ReadSimCardInfo provides a mock function with given fields: Iccid
func (_m *Factory) ReadSimCardInfo(Iccid string) (*client.SimCardInfo, error) {
	ret := _m.Called(Iccid)

	if len(ret) == 0 {
		panic("no return value specified for ReadSimCardInfo")
	}

	var r0 *client.SimCardInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.SimCardInfo, error)); ok {
		return rf(Iccid)
	}
	if rf, ok := ret.Get(0).(func(string) *client.SimCardInfo); ok {
		r0 = rf(Iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SimCardInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
