// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/ukama/ukama/systems/ukama-agent/asr/pkg/client"
)

// PolicyControl is an autogenerated mock type for the PolicyControl type
type PolicyControl struct {
	mock.Mock
}

// AddSim provides a mock function with given fields: pcrf
func (_m *PolicyControl) AddSim(pcrf client.PolicyControlSimInfo) error {
	ret := _m.Called(pcrf)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.PolicyControlSimInfo) error); ok {
		r0 = rf(pcrf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSim provides a mock function with given fields: imsi
func (_m *PolicyControl) DeleteSim(imsi string) error {
	ret := _m.Called(imsi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(imsi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSim provides a mock function with given fields: pcrf
func (_m *PolicyControl) UpdateSim(pcrf client.PolicyControlSimPackageUpdate) error {
	ret := _m.Called(pcrf)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.PolicyControlSimPackageUpdate) error); ok {
		r0 = rf(pcrf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPolicyControl interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolicyControl creates a new instance of PolicyControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolicyControl(t mockConstructorTestingTNewPolicyControl) *PolicyControl {
	mock := &PolicyControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
