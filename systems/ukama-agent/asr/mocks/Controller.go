// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/ukama-agent/asr/pkg/db"

	policy "github.com/ukama/ukama/systems/ukama-agent/asr/pkg/policy"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// InitPolicyController provides a mock function with no fields
func (_m *Controller) InitPolicyController() {
	_m.Called()
}

// NewPolicy provides a mock function with given fields: packageId
func (_m *Controller) NewPolicy(packageId uuid.UUID) (*db.Policy, error) {
	ret := _m.Called(packageId)

	if len(ret) == 0 {
		panic("no return value specified for NewPolicy")
	}

	var r0 *db.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Policy, error)); ok {
		return rf(packageId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Policy); ok {
		r0 = rf(packageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(packageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunPolicyControl provides a mock function with given fields: imsi
func (_m *Controller) RunPolicyControl(imsi string) (error, bool) {
	ret := _m.Called(imsi)

	if len(ret) == 0 {
		panic("no return value specified for RunPolicyControl")
	}

	var r0 error
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (error, bool)); ok {
		return rf(imsi)
	}
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(imsi)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SyncProfile provides a mock function with given fields: s, as, action, object, event
func (_m *Controller) SyncProfile(s *policy.SimInfo, as *db.Asr, action string, object string, event bool) error {
	ret := _m.Called(s, as, action, object, event)

	if len(ret) == 0 {
		panic("no return value specified for SyncProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*policy.SimInfo, *db.Asr, string, string, bool) error); ok {
		r0 = rf(s, as, action, object, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
