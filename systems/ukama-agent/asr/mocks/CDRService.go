// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/ukama-agent/cdr/pb/gen"
)

// CDRService is an autogenerated mock type for the CDRService type
type CDRService struct {
	mock.Mock
}

// GetUsage provides a mock function with given fields: req
func (_m *CDRService) GetUsage(req string) (*gen.UsageResp, error) {
	ret := _m.Called(req)

	var r0 *gen.UsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.UsageResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.UsageResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCDRService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCDRService creates a new instance of CDRService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCDRService(t mockConstructorTestingTNewCDRService) *CDRService {
	mock := &CDRService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
