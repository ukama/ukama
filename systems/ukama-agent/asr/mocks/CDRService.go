// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/ukama-agent/cdr/pb/gen"
)

// CDRService is an autogenerated mock type for the CDRService type
type CDRService struct {
	mock.Mock
}

// GetUsage provides a mock function with given fields: req
func (_m *CDRService) GetUsage(req string) (*gen.UsageResp, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage")
	}

	var r0 *gen.UsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.UsageResp, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.UsageResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForPeriod provides a mock function with given fields: imsi, startTime, endTime
func (_m *CDRService) GetUsageForPeriod(imsi string, startTime uint64, endTime uint64) (*gen.UsageForPeriodResp, error) {
	ret := _m.Called(imsi, startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageForPeriod")
	}

	var r0 *gen.UsageForPeriodResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) (*gen.UsageForPeriodResp, error)); ok {
		return rf(imsi, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) *gen.UsageForPeriodResp); ok {
		r0 = rf(imsi, startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UsageForPeriodResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint64, uint64) error); ok {
		r1 = rf(imsi, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryUsage provides a mock function with given fields: imsi, nodeId, session, from, to, policies, count, sort
func (_m *CDRService) QueryUsage(imsi string, nodeId string, session uint64, from uint64, to uint64, policies []string, count uint32, sort bool) (*gen.QueryUsageResp, error) {
	ret := _m.Called(imsi, nodeId, session, from, to, policies, count, sort)

	if len(ret) == 0 {
		panic("no return value specified for QueryUsage")
	}

	var r0 *gen.QueryUsageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, uint64, uint64, uint64, []string, uint32, bool) (*gen.QueryUsageResp, error)); ok {
		return rf(imsi, nodeId, session, from, to, policies, count, sort)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint64, uint64, uint64, []string, uint32, bool) *gen.QueryUsageResp); ok {
		r0 = rf(imsi, nodeId, session, from, to, policies, count, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.QueryUsageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, uint64, uint64, uint64, []string, uint32, bool) error); ok {
		r1 = rf(imsi, nodeId, session, from, to, policies, count, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCDRService creates a new instance of CDRService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCDRService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CDRService {
	mock := &CDRService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
