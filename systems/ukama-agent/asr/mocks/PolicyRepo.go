// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/ukama-agent/asr/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// PolicyRepo is an autogenerated mock type for the PolicyRepo type
type PolicyRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: policy
func (_m *PolicyRepo) Add(policy *db.Policy) error {
	ret := _m.Called(policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Policy) error); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, nestedFunc
func (_m *PolicyRepo) Delete(id uuid.UUID, nestedFunc ...func(*gorm.DB) error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...func(*gorm.DB) error) error); ok {
		r0 = rf(id, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *PolicyRepo) Get(id uuid.UUID) (*db.Policy, error) {
	ret := _m.Called(id)

	var r0 *db.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Policy, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAsrId provides a mock function with given fields: id
func (_m *PolicyRepo) GetByAsrId(id uint) (*db.Policy, error) {
	ret := _m.Called(id)

	var r0 *db.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*db.Policy, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *db.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, newPolicy
func (_m *PolicyRepo) Update(id uint, newPolicy *db.Policy) error {
	ret := _m.Called(id, newPolicy)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *db.Policy) error); ok {
		r0 = rf(id, newPolicy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPolicyRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolicyRepo creates a new instance of PolicyRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolicyRepo(t mockConstructorTestingTNewPolicyRepo) *PolicyRepo {
	mock := &PolicyRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
