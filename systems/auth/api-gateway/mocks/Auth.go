// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	"time"
	client "github.com/ory/client-go"
	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: email, password
func (_m *Auth) LoginUser(email string, password string) (*client.SuccessfulNativeLogin, error) {
	ret := _m.Called(email, password)

	var r0 *client.SuccessfulNativeLogin
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*client.SuccessfulNativeLogin, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *client.SuccessfulNativeLogin); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SuccessfulNativeLogin)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	r0.Session.Id = "123"
	userTraits := make(map[string]interface{})
	userTraits["email"] = "test@ukama.com"
	userTraits["name"] = "Ukama Test"
	userTraits["role"] = "user"
	userTraits["firstVisit"] = true

	r0.Session.Identity.Traits = userTraits


	return r0, r1
}

// ValidateSession provides a mock function with given fields: ss, t
func (_m *Auth) ValidateSession(ss string, t string) (*client.Session, error) {
	ret := _m.Called(ss, t)

	var r0 *client.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*client.Session, error)); ok {
		return rf(ss, t)
	}
	if rf, ok := ret.Get(0).(func(string, string) *client.Session); ok {
		r0 = rf(ss, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ss, t)
	} else {
		r1 = ret.Error(1)
	}

	tm := time.Now()
	e := tm.Add(time.Hour * 24 * 7)
	r0.ExpiresAt = &e
	r0.AuthenticatedAt = &tm

	return r0, r1
}

type mockConstructorTestingTNewAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuth(t mockConstructorTestingTNewAuth) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
