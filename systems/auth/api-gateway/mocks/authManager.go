// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	client "github.com/ory/client-go"
	mock "github.com/stretchr/testify/mock"

	pkg "github.com/ukama/ukama/systems/auth/api-gateway/pkg"
)

// AuthManager is an autogenerated mock type for the AuthManager type
type AuthManager struct {
	mock.Mock
}

// AuthorizeUser provides a mock function with given fields: ss, t, orgId, role, relation, object
func (_m *AuthManager) AuthorizeUser(ss string, t string, orgId string, role string, relation string, object string) (*client.Session, error) {
	ret := _m.Called(ss, t, orgId, role, relation, object)

	var r0 *client.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (*client.Session, error)); ok {
		return rf(ss, t, orgId, role, relation, object)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) *client.Session); ok {
		r0 = rf(ss, t, orgId, role, relation, object)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(ss, t, orgId, role, relation, object)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: email, password
func (_m *AuthManager) LoginUser(email string, password string) (*client.SuccessfulNativeLogin, error) {
	ret := _m.Called(email, password)

	var r0 *client.SuccessfulNativeLogin
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*client.SuccessfulNativeLogin, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *client.SuccessfulNativeLogin); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SuccessfulNativeLogin)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: ss, t, orgId, role, user
func (_m *AuthManager) UpdateRole(ss string, t string, orgId string, role string, user *pkg.UserTraits) error {
	ret := _m.Called(ss, t, orgId, role, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, *pkg.UserTraits) error); ok {
		r0 = rf(ss, t, orgId, role, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSession provides a mock function with given fields: ss, t
func (_m *AuthManager) ValidateSession(ss string, t string) (*client.Session, error) {
	ret := _m.Called(ss, t)

	var r0 *client.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*client.Session, error)); ok {
		return rf(ss, t)
	}
	if rf, ok := ret.Get(0).(func(string, string) *client.Session); ok {
		r0 = rf(ss, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ss, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthManager creates a new instance of AuthManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthManager(t mockConstructorTestingTNewAuthManager) *AuthManager {
	mock := &AuthManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
