// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: constructor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConstructorServiceClient is the client API for ConstructorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConstructorServiceClient interface {
	// System
	ConstructOrg(ctx context.Context, in *ConstructOrgRequest, opts ...grpc.CallOption) (*ConstructOrgResponse, error)
	DistructOrg(ctx context.Context, in *DistructOrgRequest, opts ...grpc.CallOption) (*DistructOrgResponse, error)
	Deployment(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*DeploymentResponse, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequests, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*RemoveDeploymentResponse, error)
	AddConfig(ctx context.Context, in *AddConfigRequest, opts ...grpc.CallOption) (*AddConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetDeploymentHistory(ctx context.Context, in *GetDeploymentRequests, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
}

type constructorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConstructorServiceClient(cc grpc.ClientConnInterface) ConstructorServiceClient {
	return &constructorServiceClient{cc}
}

func (c *constructorServiceClient) ConstructOrg(ctx context.Context, in *ConstructOrgRequest, opts ...grpc.CallOption) (*ConstructOrgResponse, error) {
	out := new(ConstructOrgResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/ConstructOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) DistructOrg(ctx context.Context, in *DistructOrgRequest, opts ...grpc.CallOption) (*DistructOrgResponse, error) {
	out := new(DistructOrgResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/DistructOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) Deployment(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*DeploymentResponse, error) {
	out := new(DeploymentResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/Deployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequests, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*RemoveDeploymentResponse, error) {
	out := new(RemoveDeploymentResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/RemoveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) AddConfig(ctx context.Context, in *AddConfigRequest, opts ...grpc.CallOption) (*AddConfigResponse, error) {
	out := new(AddConfigResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/AddConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructorServiceClient) GetDeploymentHistory(ctx context.Context, in *GetDeploymentRequests, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/ukama.ochestrator.constructor.v1.ConstructorService/GetDeploymentHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConstructorServiceServer is the server API for ConstructorService service.
// All implementations must embed UnimplementedConstructorServiceServer
// for forward compatibility
type ConstructorServiceServer interface {
	// System
	ConstructOrg(context.Context, *ConstructOrgRequest) (*ConstructOrgResponse, error)
	DistructOrg(context.Context, *DistructOrgRequest) (*DistructOrgResponse, error)
	Deployment(context.Context, *DeploymentRequest) (*DeploymentResponse, error)
	GetDeployment(context.Context, *GetDeploymentRequests) (*GetDeploymentResponse, error)
	RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*RemoveDeploymentResponse, error)
	AddConfig(context.Context, *AddConfigRequest) (*AddConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetDeploymentHistory(context.Context, *GetDeploymentRequests) (*GetDeploymentResponse, error)
	mustEmbedUnimplementedConstructorServiceServer()
}

// UnimplementedConstructorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConstructorServiceServer struct {
}

func (UnimplementedConstructorServiceServer) ConstructOrg(context.Context, *ConstructOrgRequest) (*ConstructOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstructOrg not implemented")
}
func (UnimplementedConstructorServiceServer) DistructOrg(context.Context, *DistructOrgRequest) (*DistructOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistructOrg not implemented")
}
func (UnimplementedConstructorServiceServer) Deployment(context.Context, *DeploymentRequest) (*DeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deployment not implemented")
}
func (UnimplementedConstructorServiceServer) GetDeployment(context.Context, *GetDeploymentRequests) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedConstructorServiceServer) RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*RemoveDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeployment not implemented")
}
func (UnimplementedConstructorServiceServer) AddConfig(context.Context, *AddConfigRequest) (*AddConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedConstructorServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConstructorServiceServer) GetDeploymentHistory(context.Context, *GetDeploymentRequests) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentHistory not implemented")
}
func (UnimplementedConstructorServiceServer) mustEmbedUnimplementedConstructorServiceServer() {}

// UnsafeConstructorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConstructorServiceServer will
// result in compilation errors.
type UnsafeConstructorServiceServer interface {
	mustEmbedUnimplementedConstructorServiceServer()
}

func RegisterConstructorServiceServer(s grpc.ServiceRegistrar, srv ConstructorServiceServer) {
	s.RegisterService(&ConstructorService_ServiceDesc, srv)
}

func _ConstructorService_ConstructOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstructOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).ConstructOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/ConstructOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).ConstructOrg(ctx, req.(*ConstructOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_DistructOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistructOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).DistructOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/DistructOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).DistructOrg(ctx, req.(*DistructOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_Deployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).Deployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/Deployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).Deployment(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_RemoveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).RemoveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/RemoveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).RemoveDeployment(ctx, req.(*RemoveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/AddConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).AddConfig(ctx, req.(*AddConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructorService_GetDeploymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructorServiceServer).GetDeploymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.ochestrator.constructor.v1.ConstructorService/GetDeploymentHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructorServiceServer).GetDeploymentHistory(ctx, req.(*GetDeploymentRequests))
	}
	return interceptor(ctx, in, info, handler)
}

// ConstructorService_ServiceDesc is the grpc.ServiceDesc for ConstructorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConstructorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.ochestrator.constructor.v1.ConstructorService",
	HandlerType: (*ConstructorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConstructOrg",
			Handler:    _ConstructorService_ConstructOrg_Handler,
		},
		{
			MethodName: "DistructOrg",
			Handler:    _ConstructorService_DistructOrg_Handler,
		},
		{
			MethodName: "Deployment",
			Handler:    _ConstructorService_Deployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _ConstructorService_GetDeployment_Handler,
		},
		{
			MethodName: "RemoveDeployment",
			Handler:    _ConstructorService_RemoveDeployment_Handler,
		},
		{
			MethodName: "AddConfig",
			Handler:    _ConstructorService_AddConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ConstructorService_GetConfig_Handler,
		},
		{
			MethodName: "GetDeploymentHistory",
			Handler:    _ConstructorService_GetDeploymentHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "constructor.proto",
}
