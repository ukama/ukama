// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/orchestrator/constructor/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ConstructorServiceClient is an autogenerated mock type for the ConstructorServiceClient type
type ConstructorServiceClient struct {
	mock.Mock
}

// AddConfig provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) AddConfig(ctx context.Context, in *gen.AddConfigRequest, opts ...grpc.CallOption) (*gen.AddConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddConfigRequest, ...grpc.CallOption) (*gen.AddConfigResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddConfigRequest, ...grpc.CallOption) *gen.AddConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConstructOrg provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) ConstructOrg(ctx context.Context, in *gen.ConstructOrgRequest, opts ...grpc.CallOption) (*gen.ConstructOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ConstructOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructOrgRequest, ...grpc.CallOption) (*gen.ConstructOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructOrgRequest, ...grpc.CallOption) *gen.ConstructOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ConstructOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ConstructOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deployment provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) Deployment(ctx context.Context, in *gen.DeploymentRequest, opts ...grpc.CallOption) (*gen.DeploymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeploymentRequest, ...grpc.CallOption) (*gen.DeploymentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeploymentRequest, ...grpc.CallOption) *gen.DeploymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeploymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistructOrg provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) DistructOrg(ctx context.Context, in *gen.DistructOrgRequest, opts ...grpc.CallOption) (*gen.DistructOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DistructOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DistructOrgRequest, ...grpc.CallOption) (*gen.DistructOrgResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DistructOrgRequest, ...grpc.CallOption) *gen.DistructOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DistructOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DistructOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) GetConfig(ctx context.Context, in *gen.GetConfigRequest, opts ...grpc.CallOption) (*gen.GetConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetConfigRequest, ...grpc.CallOption) (*gen.GetConfigResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetConfigRequest, ...grpc.CallOption) *gen.GetConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) GetDeployment(ctx context.Context, in *gen.GetDeploymentRequests, opts ...grpc.CallOption) (*gen.GetDeploymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests, ...grpc.CallOption) (*gen.GetDeploymentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests, ...grpc.CallOption) *gen.GetDeploymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetDeploymentRequests, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentHistory provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) GetDeploymentHistory(ctx context.Context, in *gen.GetDeploymentRequests, opts ...grpc.CallOption) (*gen.GetDeploymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests, ...grpc.CallOption) (*gen.GetDeploymentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests, ...grpc.CallOption) *gen.GetDeploymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetDeploymentRequests, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDeployment provides a mock function with given fields: ctx, in, opts
func (_m *ConstructorServiceClient) RemoveDeployment(ctx context.Context, in *gen.RemoveDeploymentRequest, opts ...grpc.CallOption) (*gen.RemoveDeploymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RemoveDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveDeploymentRequest, ...grpc.CallOption) (*gen.RemoveDeploymentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveDeploymentRequest, ...grpc.CallOption) *gen.RemoveDeploymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveDeploymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConstructorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewConstructorServiceClient creates a new instance of ConstructorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConstructorServiceClient(t mockConstructorTestingTNewConstructorServiceClient) *ConstructorServiceClient {
	mock := &ConstructorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
