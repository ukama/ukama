// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/orchestrator/constructor/pb/gen"
)

// ConstructorServiceServer is an autogenerated mock type for the ConstructorServiceServer type
type ConstructorServiceServer struct {
	mock.Mock
}

// AddConfig provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) AddConfig(_a0 context.Context, _a1 *gen.AddConfigRequest) (*gen.AddConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddConfigRequest) (*gen.AddConfigResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddConfigRequest) *gen.AddConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConstructOrg provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) ConstructOrg(_a0 context.Context, _a1 *gen.ConstructOrgRequest) (*gen.ConstructOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ConstructOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructOrgRequest) (*gen.ConstructOrgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ConstructOrgRequest) *gen.ConstructOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ConstructOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ConstructOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deployment provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) Deployment(_a0 context.Context, _a1 *gen.DeploymentRequest) (*gen.DeploymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeploymentRequest) (*gen.DeploymentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeploymentRequest) *gen.DeploymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeploymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistructOrg provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) DistructOrg(_a0 context.Context, _a1 *gen.DistructOrgRequest) (*gen.DistructOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DistructOrgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DistructOrgRequest) (*gen.DistructOrgResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DistructOrgRequest) *gen.DistructOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DistructOrgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.DistructOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) GetConfig(_a0 context.Context, _a1 *gen.GetConfigRequest) (*gen.GetConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetConfigRequest) (*gen.GetConfigResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetConfigRequest) *gen.GetConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) GetDeployment(_a0 context.Context, _a1 *gen.GetDeploymentRequests) (*gen.GetDeploymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests) (*gen.GetDeploymentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests) *gen.GetDeploymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetDeploymentRequests) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentHistory provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) GetDeploymentHistory(_a0 context.Context, _a1 *gen.GetDeploymentRequests) (*gen.GetDeploymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests) (*gen.GetDeploymentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetDeploymentRequests) *gen.GetDeploymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetDeploymentRequests) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDeployment provides a mock function with given fields: _a0, _a1
func (_m *ConstructorServiceServer) RemoveDeployment(_a0 context.Context, _a1 *gen.RemoveDeploymentRequest) (*gen.RemoveDeploymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.RemoveDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveDeploymentRequest) (*gen.RemoveDeploymentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemoveDeploymentRequest) *gen.RemoveDeploymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemoveDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemoveDeploymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedConstructorServiceServer provides a mock function with given fields:
func (_m *ConstructorServiceServer) mustEmbedUnimplementedConstructorServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewConstructorServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConstructorServiceServer creates a new instance of ConstructorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConstructorServiceServer(t mockConstructorTestingTNewConstructorServiceServer) *ConstructorServiceServer {
	mock := &ConstructorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
