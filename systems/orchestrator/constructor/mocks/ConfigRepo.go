// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/orchestrator/constructor/pkg/db"
)

// ConfigRepo is an autogenerated mock type for the ConfigRepo type
type ConfigRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: c
func (_m *ConfigRepo) Create(c *db.Config) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Config) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: name
func (_m *ConfigRepo) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *ConfigRepo) Get(name string) (*db.Config, error) {
	ret := _m.Called(name)

	var r0 *db.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Config, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Config); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: name
func (_m *ConfigRepo) GetHistory(name string) (*[]db.Config, error) {
	ret := _m.Called(name)

	var r0 *[]db.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]db.Config, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *[]db.Config); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: n
func (_m *ConfigRepo) Update(n *db.Config) error {
	ret := _m.Called(n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Config) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConfigRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfigRepo creates a new instance of ConfigRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfigRepo(t mockConstructorTestingTNewConfigRepo) *ConfigRepo {
	mock := &ConfigRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
