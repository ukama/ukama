// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/orchestrator/constructor/pkg/db"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// DeploymentRepo is an autogenerated mock type for the DeploymentRepo type
type DeploymentRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: d
func (_m *DeploymentRepo) Add(d *db.Deployment) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Deployment) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *DeploymentRepo) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *DeploymentRepo) GetAll() ([]db.Deployment, error) {
	ret := _m.Called()

	var r0 []db.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Deployment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Deployment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *DeploymentRepo) GetById(id uuid.UUID) (*db.Deployment, error) {
	ret := _m.Called(id)

	var r0 *db.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Deployment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Deployment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *DeploymentRepo) GetByName(name string) (*db.Deployment, error) {
	ret := _m.Called(name)

	var r0 *db.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Deployment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Deployment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCount provides a mock function with given fields: name
func (_m *DeploymentRepo) GetCount(name string) (int64, error) {
	ret := _m.Called(name)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryByName provides a mock function with given fields: name
func (_m *DeploymentRepo) GetHistoryByName(name string) (*db.Deployment, error) {
	ret := _m.Called(name)

	var r0 *db.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Deployment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Deployment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: name, status
func (_m *DeploymentRepo) UpdateStatus(name string, status db.DeploymentStatus) error {
	ret := _m.Called(name, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.DeploymentStatus) error); ok {
		r0 = rf(name, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDeploymentRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeploymentRepo creates a new instance of DeploymentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeploymentRepo(t mockConstructorTestingTNewDeploymentRepo) *DeploymentRepo {
	mock := &DeploymentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
