// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/billing/invoice/pb/gen"
)

// Invoice is an autogenerated mock type for the Invoice type
type Invoice struct {
	mock.Mock
}

// Add provides a mock function with given fields: rawInvoice
func (_m *Invoice) Add(rawInvoice string) (*gen.AddResponse, error) {
	ret := _m.Called(rawInvoice)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.AddResponse, error)); ok {
		return rf(rawInvoice)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.AddResponse); ok {
		r0 = rf(rawInvoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rawInvoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: invoiceId, asPDF
func (_m *Invoice) Get(invoiceId string, asPDF bool) (*gen.GetResponse, error) {
	ret := _m.Called(invoiceId, asPDF)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.GetResponse, error)); ok {
		return rf(invoiceId, asPDF)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.GetResponse); ok {
		r0 = rf(invoiceId, asPDF)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(invoiceId, asPDF)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: invoiceeId, invoiceeType, networkId, isPaid, count, sort
func (_m *Invoice) List(invoiceeId string, invoiceeType string, networkId string, isPaid bool, count uint32, sort bool) (*gen.ListResponse, error) {
	ret := _m.Called(invoiceeId, invoiceeType, networkId, isPaid, count, sort)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *gen.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, uint32, bool) (*gen.ListResponse, error)); ok {
		return rf(invoiceeId, invoiceeType, networkId, isPaid, count, sort)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, bool, uint32, bool) *gen.ListResponse); ok {
		r0 = rf(invoiceeId, invoiceeType, networkId, isPaid, count, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, bool, uint32, bool) error); ok {
		r1 = rf(invoiceeId, invoiceeType, networkId, isPaid, count, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: invoiceId
func (_m *Invoice) Remove(invoiceId string) error {
	ret := _m.Called(invoiceId)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(invoiceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInvoice creates a new instance of Invoice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoice(t interface {
	mock.TestingT
	Cleanup(func())
}) *Invoice {
	mock := &Invoice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
