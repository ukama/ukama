// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/billing/invoice/pb/gen"
)

// billing is an autogenerated mock type for the billing type
type billing struct {
	mock.Mock
}

// AddInvoice provides a mock function with given fields: subscriberId, rawInvoice
func (_m *billing) AddInvoice(subscriberId string, rawInvoice string) (*gen.AddResponse, error) {
	ret := _m.Called(subscriberId, rawInvoice)

	var r0 *gen.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gen.AddResponse, error)); ok {
		return rf(subscriberId, rawInvoice)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gen.AddResponse); ok {
		r0 = rf(subscriberId, rawInvoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subscriberId, rawInvoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoice provides a mock function with given fields: invoiceId, asPDF
func (_m *billing) GetInvoice(invoiceId string, asPDF bool) (*gen.GetResponse, error) {
	ret := _m.Called(invoiceId, asPDF)

	var r0 *gen.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.GetResponse, error)); ok {
		return rf(invoiceId, asPDF)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.GetResponse); ok {
		r0 = rf(invoiceId, asPDF)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(invoiceId, asPDF)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoicePDF provides a mock function with given fields: invoiceId
func (_m *billing) GetInvoicePDF(invoiceId string) ([]byte, error) {
	ret := _m.Called(invoiceId)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(invoiceId)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(invoiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoices provides a mock function with given fields: subscriber, asPDF
func (_m *billing) GetInvoices(subscriber string, asPDF bool) (*gen.GetBySubscriberResponse, error) {
	ret := _m.Called(subscriber, asPDF)

	var r0 *gen.GetBySubscriberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.GetBySubscriberResponse, error)); ok {
		return rf(subscriber, asPDF)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.GetBySubscriberResponse); ok {
		r0 = rf(subscriber, asPDF)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetBySubscriberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(subscriber, asPDF)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInvoice provides a mock function with given fields: invoiceId
func (_m *billing) RemoveInvoice(invoiceId string) error {
	ret := _m.Called(invoiceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(invoiceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewBilling interface {
	mock.TestingT
	Cleanup(func())
}

// newBilling creates a new instance of billing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newBilling(t mockConstructorTestingTnewBilling) *billing {
	mock := &billing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
