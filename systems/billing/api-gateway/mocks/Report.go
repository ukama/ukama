// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/billing/report/pb/gen"
)

// Report is an autogenerated mock type for the Report type
type Report struct {
	mock.Mock
}

// Add provides a mock function with given fields: rawReport
func (_m *Report) Add(rawReport string) (*gen.ReportResponse, error) {
	ret := _m.Called(rawReport)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *gen.ReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.ReportResponse, error)); ok {
		return rf(rawReport)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.ReportResponse); ok {
		r0 = rf(rawReport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rawReport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: reportId
func (_m *Report) Get(reportId string) (*gen.ReportResponse, error) {
	ret := _m.Called(reportId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gen.ReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.ReportResponse, error)); ok {
		return rf(reportId)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.ReportResponse); ok {
		r0 = rf(reportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ownerId, ownerType, networkId, reportType, isPaid, count, sort
func (_m *Report) List(ownerId string, ownerType string, networkId string, reportType string, isPaid bool, count uint32, sort bool) (*gen.ListResponse, error) {
	ret := _m.Called(ownerId, ownerType, networkId, reportType, isPaid, count, sort)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *gen.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool, uint32, bool) (*gen.ListResponse, error)); ok {
		return rf(ownerId, ownerType, networkId, reportType, isPaid, count, sort)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool, uint32, bool) *gen.ListResponse); ok {
		r0 = rf(ownerId, ownerType, networkId, reportType, isPaid, count, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, bool, uint32, bool) error); ok {
		r1 = rf(ownerId, ownerType, networkId, reportType, isPaid, count, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: reportId
func (_m *Report) Remove(reportId string) error {
	ret := _m.Called(reportId)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(reportId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: reportId, isPaid
func (_m *Report) Update(reportId string, isPaid bool) (*gen.ReportResponse, error) {
	ret := _m.Called(reportId, isPaid)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *gen.ReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*gen.ReportResponse, error)); ok {
		return rf(reportId, isPaid)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *gen.ReportResponse); ok {
		r0 = rf(reportId, isPaid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(reportId, isPaid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReport creates a new instance of Report. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Report {
	mock := &Report{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
