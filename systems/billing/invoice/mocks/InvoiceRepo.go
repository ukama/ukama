// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/billing/invoice/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// InvoiceRepo is an autogenerated mock type for the InvoiceRepo type
type InvoiceRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: invoice, nestedFunc
func (_m *InvoiceRepo) Add(invoice *db.Invoice, nestedFunc func(*db.Invoice, *gorm.DB) error) error {
	ret := _m.Called(invoice, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Invoice, func(*db.Invoice, *gorm.DB) error) error); ok {
		r0 = rf(invoice, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: invoiceId, nestedFunc
func (_m *InvoiceRepo) Delete(invoiceId uuid.UUID, nestedFunc func(uuid.UUID, *gorm.DB) error) error {
	ret := _m.Called(invoiceId, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(uuid.UUID, *gorm.DB) error) error); ok {
		r0 = rf(invoiceId, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *InvoiceRepo) Get(id uuid.UUID) (*db.Invoice, error) {
	ret := _m.Called(id)

	var r0 *db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Invoice, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Invoice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySubscriber provides a mock function with given fields: subscriberId
func (_m *InvoiceRepo) GetBySubscriber(subscriberId uuid.UUID) ([]db.Invoice, error) {
	ret := _m.Called(subscriberId)

	var r0 []db.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Invoice, error)); ok {
		return rf(subscriberId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Invoice); ok {
		r0 = rf(subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInvoiceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceRepo creates a new instance of InvoiceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceRepo(t mockConstructorTestingTNewInvoiceRepo) *InvoiceRepo {
	mock := &InvoiceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
