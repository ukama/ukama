// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	lago "github.com/getlago/lago-go-client"
	mock "github.com/stretchr/testify/mock"
)

// LagoEvent is an autogenerated mock type for the LagoEvent type
type LagoEvent struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *LagoEvent) Create(_a0 context.Context, _a1 *lago.EventInput) (*lago.Event, *lago.Error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *lago.Event
	var r1 *lago.Error
	if rf, ok := ret.Get(0).(func(context.Context, *lago.EventInput) (*lago.Event, *lago.Error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lago.EventInput) *lago.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lago.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lago.EventInput) *lago.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lago.Error)
		}
	}

	return r0, r1
}

// NewLagoEvent creates a new instance of LagoEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLagoEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *LagoEvent {
	mock := &LagoEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
