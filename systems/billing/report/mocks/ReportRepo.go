// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/billing/report/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	ukama "github.com/ukama/ukama/systems/common/ukama"

	uuid "github.com/ukama/ukama/systems/common/uuid"
)

// ReportRepo is an autogenerated mock type for the ReportRepo type
type ReportRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: report, nestedFunc
func (_m *ReportRepo) Add(report *db.Report, nestedFunc func(*db.Report, *gorm.DB) error) error {
	ret := _m.Called(report, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Report, func(*db.Report, *gorm.DB) error) error); ok {
		r0 = rf(report, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: reportId, nestedFunc
func (_m *ReportRepo) Delete(reportId uuid.UUID, nestedFunc func(uuid.UUID, *gorm.DB) error) error {
	ret := _m.Called(reportId, nestedFunc)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(uuid.UUID, *gorm.DB) error) error); ok {
		r0 = rf(reportId, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ReportRepo) Get(id uuid.UUID) (*db.Report, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Report, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Report); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ownerId, ownerType, networkId, reportType, isPaid, count, sort
func (_m *ReportRepo) List(ownerId string, ownerType ukama.OwnerType, networkId string, reportType ukama.ReportType, isPaid bool, count uint32, sort bool) ([]db.Report, error) {
	ret := _m.Called(ownerId, ownerType, networkId, reportType, isPaid, count, sort)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []db.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ukama.OwnerType, string, ukama.ReportType, bool, uint32, bool) ([]db.Report, error)); ok {
		return rf(ownerId, ownerType, networkId, reportType, isPaid, count, sort)
	}
	if rf, ok := ret.Get(0).(func(string, ukama.OwnerType, string, ukama.ReportType, bool, uint32, bool) []db.Report); ok {
		r0 = rf(ownerId, ownerType, networkId, reportType, isPaid, count, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ukama.OwnerType, string, ukama.ReportType, bool, uint32, bool) error); ok {
		r1 = rf(ownerId, ownerType, networkId, reportType, isPaid, count, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ReportRepo) Update(_a0 *db.Report, _a1 func(*db.Report, *gorm.DB) error) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Report, func(*db.Report, *gorm.DB) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReportRepo creates a new instance of ReportRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportRepo {
	mock := &ReportRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
