// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	generated "ukamaX/registry/pb/generated"

	mock "github.com/stretchr/testify/mock"
)

// RegistryServiceClient is an autogenerated mock type for the RegistryServiceClient type
type RegistryServiceClient struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) AddNode(ctx context.Context, in *generated.AddNodeRequest, opts ...grpc.CallOption) (*generated.AddNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.AddNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.AddNodeRequest, ...grpc.CallOption) *generated.AddNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.AddNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.AddNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) AddOrg(ctx context.Context, in *generated.AddOrgRequest, opts ...grpc.CallOption) (*generated.AddOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.AddOrgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.AddOrgRequest, ...grpc.CallOption) *generated.AddOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.AddOrgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.AddOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNode provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) DeleteNode(ctx context.Context, in *generated.DeleteNodeRequest, opts ...grpc.CallOption) (*generated.DeleteNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.DeleteNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.DeleteNodeRequest, ...grpc.CallOption) *generated.DeleteNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.DeleteNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.DeleteNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) GetNode(ctx context.Context, in *generated.GetNodeRequest, opts ...grpc.CallOption) (*generated.GetNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.GetNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.GetNodeRequest, ...grpc.CallOption) *generated.GetNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.GetNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.GetNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) GetNodes(ctx context.Context, in *generated.GetNodesRequest, opts ...grpc.CallOption) (*generated.GetNodesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.GetNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.GetNodesRequest, ...grpc.CallOption) *generated.GetNodesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.GetNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.GetNodesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) GetOrg(ctx context.Context, in *generated.GetOrgRequest, opts ...grpc.CallOption) (*generated.Organization, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.Organization
	if rf, ok := ret.Get(0).(func(context.Context, *generated.GetOrgRequest, ...grpc.CallOption) *generated.Organization); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.GetOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: ctx, in, opts
func (_m *RegistryServiceClient) UpdateNode(ctx context.Context, in *generated.UpdateNodeRequest, opts ...grpc.CallOption) (*generated.UpdateNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *generated.UpdateNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.UpdateNodeRequest, ...grpc.CallOption) *generated.UpdateNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.UpdateNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.UpdateNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
