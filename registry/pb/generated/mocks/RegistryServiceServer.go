// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	generated "ukamaX/registry/pb/generated"
)

// RegistryServiceServer is an autogenerated mock type for the RegistryServiceServer type
type RegistryServiceServer struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) AddNode(_a0 context.Context, _a1 *generated.AddNodeRequest) (*generated.AddNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.AddNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.AddNodeRequest) *generated.AddNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.AddNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.AddNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) AddOrg(_a0 context.Context, _a1 *generated.AddOrgRequest) (*generated.AddOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.AddOrgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.AddOrgRequest) *generated.AddOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.AddOrgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.AddOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) DeleteNode(_a0 context.Context, _a1 *generated.DeleteNodeRequest) (*generated.DeleteNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.DeleteNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.DeleteNodeRequest) *generated.DeleteNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.DeleteNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.DeleteNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) GetNode(_a0 context.Context, _a1 *generated.GetNodeRequest) (*generated.GetNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.GetNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.GetNodeRequest) *generated.GetNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.GetNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.GetNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) GetNodes(_a0 context.Context, _a1 *generated.GetNodesRequest) (*generated.GetNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.GetNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.GetNodesRequest) *generated.GetNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.GetNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.GetNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) GetOrg(_a0 context.Context, _a1 *generated.GetOrgRequest) (*generated.Organization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.Organization
	if rf, ok := ret.Get(0).(func(context.Context, *generated.GetOrgRequest) *generated.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.GetOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) UpdateNode(_a0 context.Context, _a1 *generated.UpdateNodeRequest) (*generated.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *generated.UpdateNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *generated.UpdateNodeRequest) *generated.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.UpdateNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *generated.UpdateNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
