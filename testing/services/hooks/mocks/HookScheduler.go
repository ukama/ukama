// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	gocron "github.com/go-co-op/gocron"
	mock "github.com/stretchr/testify/mock"
)

// HookScheduler is an autogenerated mock type for the HookScheduler type
type HookScheduler struct {
	mock.Mock
}

// SetNewJob provides a mock function with given fields: _a0, _a1, _a2
func (_m *HookScheduler) SetNewJob(_a0 string, _a1 interface{}, _a2 ...interface{}) (*gocron.Job, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetNewJob")
	}

	var r0 *gocron.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) (*gocron.Job, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) *gocron.Job); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocron.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, ...interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0, _a1, _a2
func (_m *HookScheduler) Start(_a0 string, _a1 interface{}, _a2 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *HookScheduler) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHookScheduler creates a new instance of HookScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHookScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *HookScheduler {
	mock := &HookScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
