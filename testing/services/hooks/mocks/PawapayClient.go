// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	clients "github.com/ukama/ukama/testing/services/hooks/internal/clients"

	payments "github.com/ukama/ukama/systems/common/util/payments"
)

// PawapayClient is an autogenerated mock type for the PawapayClient type
type PawapayClient struct {
	mock.Mock
}

// AddDeposit provides a mock function with given fields: _a0
func (_m *PawapayClient) AddDeposit(_a0 clients.AddDepositRequest) (*payments.Deposit, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddDeposit")
	}

	var r0 *payments.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(clients.AddDepositRequest) (*payments.Deposit, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(clients.AddDepositRequest) *payments.Deposit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payments.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(clients.AddDepositRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeposit provides a mock function with given fields: _a0
func (_m *PawapayClient) GetDeposit(_a0 string) (*payments.Deposit, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDeposit")
	}

	var r0 *payments.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*payments.Deposit, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *payments.Deposit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payments.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMnosAvailability provides a mock function with given fields:
func (_m *PawapayClient) GetMnosAvailability() ([]clients.CountryOperators, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMnosAvailability")
	}

	var r0 []clients.CountryOperators
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]clients.CountryOperators, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []clients.CountryOperators); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.CountryOperators)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PredictMno provides a mock function with given fields: _a0
func (_m *PawapayClient) PredictMno(_a0 clients.MsisdnRequest) (*clients.Operator, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PredictMno")
	}

	var r0 *clients.Operator
	var r1 error
	if rf, ok := ret.Get(0).(func(clients.MsisdnRequest) (*clients.Operator, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(clients.MsisdnRequest) *clients.Operator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients.Operator)
		}
	}

	if rf, ok := ret.Get(1).(func(clients.MsisdnRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendDepositCallback provides a mock function with given fields: _a0
func (_m *PawapayClient) ResendDepositCallback(_a0 clients.CallbackRequest) (*payments.Deposit, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ResendDepositCallback")
	}

	var r0 *payments.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(clients.CallbackRequest) (*payments.Deposit, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(clients.CallbackRequest) *payments.Deposit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payments.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(clients.CallbackRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPawapayClient creates a new instance of PawapayClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPawapayClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PawapayClient {
	mock := &PawapayClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
