// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	clients "github.com/ukama/ukama/testing/services/hooks/internal/clients"

	payments "github.com/ukama/ukama/systems/common/util/payments"

	stripe "github.com/stripe/stripe-go/v78"
)

// WebhooksClient is an autogenerated mock type for the WebhooksClient type
type WebhooksClient struct {
	mock.Mock
}

// PostDepositHook provides a mock function with given fields: _a0
func (_m *WebhooksClient) PostDepositHook(_a0 *payments.Deposit) (*clients.WebhookInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PostDepositHook")
	}

	var r0 *clients.WebhookInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*payments.Deposit) (*clients.WebhookInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*payments.Deposit) *clients.WebhookInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients.WebhookInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*payments.Deposit) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostPaymentIntentHook provides a mock function with given fields: _a0
func (_m *WebhooksClient) PostPaymentIntentHook(_a0 *stripe.PaymentIntent) (*clients.WebhookInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PostPaymentIntentHook")
	}

	var r0 *clients.WebhookInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*stripe.PaymentIntent) (*clients.WebhookInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*stripe.PaymentIntent) *clients.WebhookInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients.WebhookInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*stripe.PaymentIntent) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhooksClient creates a new instance of WebhooksClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhooksClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhooksClient {
	mock := &WebhooksClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
