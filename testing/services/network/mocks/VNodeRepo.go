// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/testing/services/network/internal/db"
)

// VNodeRepo is an autogenerated mock type for the VNodeRepo type
type VNodeRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: nodeId
func (_m *VNodeRepo) Delete(nodeId string) error {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInfo provides a mock function with given fields: nodeId
func (_m *VNodeRepo) GetInfo(nodeId string) (*db.VNode, error) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 *db.VNode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.VNode, error)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *db.VNode); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.VNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: nodeId, status
func (_m *VNodeRepo) Insert(nodeId string, status string) error {
	ret := _m.Called(nodeId, status)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *VNodeRepo) List() (*[]db.VNode, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *[]db.VNode
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]db.VNode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]db.VNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.VNode)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PowerOff provides a mock function with given fields: nodeId
func (_m *VNodeRepo) PowerOff(nodeId string) error {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for PowerOff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PowerOn provides a mock function with given fields: nodeId
func (_m *VNodeRepo) PowerOn(nodeId string) error {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for PowerOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: nodeId, status
func (_m *VNodeRepo) Update(nodeId string, status string) error {
	ret := _m.Called(nodeId, status)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVNodeRepo creates a new instance of VNodeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVNodeRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *VNodeRepo {
	mock := &VNodeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
