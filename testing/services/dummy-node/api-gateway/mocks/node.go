// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/testing/services/dummy-node/dnode/pb/gen"
)

// node is an autogenerated mock type for the node type
type node struct {
	mock.Mock
}

// ResetNode provides a mock function with given fields: id
func (_m *node) ResetNode(id string) (*gen.Response, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ResetNode")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnNodeOff provides a mock function with given fields: id
func (_m *node) TurnNodeOff(id string) (*gen.Response, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TurnNodeOff")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnNodeOnline provides a mock function with given fields: id
func (_m *node) TurnNodeOnline(id string) (*gen.Response, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TurnNodeOnline")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnRFOff provides a mock function with given fields: id
func (_m *node) TurnRFOff(id string) (*gen.Response, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TurnRFOff")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnRFOn provides a mock function with given fields: id
func (_m *node) TurnRFOn(id string) (*gen.Response, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TurnRFOn")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gen.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gen.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newNode creates a new instance of node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *node {
	mock := &node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
