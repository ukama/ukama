//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: node.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeService_ResetNode_FullMethodName   = "/ukama.dummynode.node.v1.NodeService/ResetNode"
	NodeService_NodeRFOn_FullMethodName    = "/ukama.dummynode.node.v1.NodeService/NodeRFOn"
	NodeService_TurnNodeOff_FullMethodName = "/ukama.dummynode.node.v1.NodeService/TurnNodeOff"
	NodeService_NodeRFOff_FullMethodName   = "/ukama.dummynode.node.v1.NodeService/NodeRFOff"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	ResetNode(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	NodeRFOn(ctx context.Context, in *NodeRFOnRequest, opts ...grpc.CallOption) (*NodeRFOnResponse, error)
	TurnNodeOff(ctx context.Context, in *TurnNodeOffRequest, opts ...grpc.CallOption) (*TurnNodeOffResponse, error)
	NodeRFOff(ctx context.Context, in *NodeRFOffRequest, opts ...grpc.CallOption) (*NodeRFOffResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) ResetNode(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, NodeService_ResetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) NodeRFOn(ctx context.Context, in *NodeRFOnRequest, opts ...grpc.CallOption) (*NodeRFOnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeRFOnResponse)
	err := c.cc.Invoke(ctx, NodeService_NodeRFOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) TurnNodeOff(ctx context.Context, in *TurnNodeOffRequest, opts ...grpc.CallOption) (*TurnNodeOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TurnNodeOffResponse)
	err := c.cc.Invoke(ctx, NodeService_TurnNodeOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) NodeRFOff(ctx context.Context, in *NodeRFOffRequest, opts ...grpc.CallOption) (*NodeRFOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeRFOffResponse)
	err := c.cc.Invoke(ctx, NodeService_NodeRFOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility.
type NodeServiceServer interface {
	ResetNode(context.Context, *ResetRequest) (*ResetResponse, error)
	NodeRFOn(context.Context, *NodeRFOnRequest) (*NodeRFOnResponse, error)
	TurnNodeOff(context.Context, *TurnNodeOffRequest) (*TurnNodeOffResponse, error)
	NodeRFOff(context.Context, *NodeRFOffRequest) (*NodeRFOffResponse, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) ResetNode(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetNode not implemented")
}
func (UnimplementedNodeServiceServer) NodeRFOn(context.Context, *NodeRFOnRequest) (*NodeRFOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRFOn not implemented")
}
func (UnimplementedNodeServiceServer) TurnNodeOff(context.Context, *TurnNodeOffRequest) (*TurnNodeOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnNodeOff not implemented")
}
func (UnimplementedNodeServiceServer) NodeRFOff(context.Context, *NodeRFOffRequest) (*NodeRFOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRFOff not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}
func (UnimplementedNodeServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_ResetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ResetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_ResetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ResetNode(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_NodeRFOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRFOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).NodeRFOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_NodeRFOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).NodeRFOn(ctx, req.(*NodeRFOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_TurnNodeOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnNodeOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).TurnNodeOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_TurnNodeOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).TurnNodeOff(ctx, req.(*TurnNodeOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_NodeRFOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRFOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).NodeRFOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_NodeRFOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).NodeRFOff(ctx, req.(*NodeRFOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.dummynode.node.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetNode",
			Handler:    _NodeService_ResetNode_Handler,
		},
		{
			MethodName: "NodeRFOn",
			Handler:    _NodeService_NodeRFOn_Handler,
		},
		{
			MethodName: "TurnNodeOff",
			Handler:    _NodeService_TurnNodeOff_Handler,
		},
		{
			MethodName: "NodeRFOff",
			Handler:    _NodeService_NodeRFOff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
