// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/testing/services/dummy-node/dnode/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NodeServiceClient is an autogenerated mock type for the NodeServiceClient type
type NodeServiceClient struct {
	mock.Mock
}

// NodeRFOff provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) NodeRFOff(ctx context.Context, in *gen.Request, opts ...grpc.CallOption) (*gen.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NodeRFOff")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) (*gen.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) *gen.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeRFOn provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) NodeRFOn(ctx context.Context, in *gen.Request, opts ...grpc.CallOption) (*gen.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NodeRFOn")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) (*gen.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) *gen.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNode provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) ResetNode(ctx context.Context, in *gen.Request, opts ...grpc.CallOption) (*gen.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetNode")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) (*gen.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) *gen.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnNodeOff provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) TurnNodeOff(ctx context.Context, in *gen.Request, opts ...grpc.CallOption) (*gen.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TurnNodeOff")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) (*gen.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) *gen.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnNodeOnline provides a mock function with given fields: ctx, in, opts
func (_m *NodeServiceClient) TurnNodeOnline(ctx context.Context, in *gen.Request, opts ...grpc.CallOption) (*gen.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TurnNodeOnline")
	}

	var r0 *gen.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) (*gen.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Request, ...grpc.CallOption) *gen.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeServiceClient creates a new instance of NodeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeServiceClient {
	mock := &NodeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
