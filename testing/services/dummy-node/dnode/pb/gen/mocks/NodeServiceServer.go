// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/testing/services/dummy-node/dnode/pb/gen"
)

// NodeServiceServer is an autogenerated mock type for the NodeServiceServer type
type NodeServiceServer struct {
	mock.Mock
}

// NodeRFOff provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) NodeRFOff(_a0 context.Context, _a1 *gen.NodeRFOffRequest) (*gen.NodeRFOffResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NodeRFOff")
	}

	var r0 *gen.NodeRFOffResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeRFOffRequest) (*gen.NodeRFOffResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeRFOffRequest) *gen.NodeRFOffResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NodeRFOffResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NodeRFOffRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeRFOn provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) NodeRFOn(_a0 context.Context, _a1 *gen.NodeRFOnRequest) (*gen.NodeRFOnResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NodeRFOn")
	}

	var r0 *gen.NodeRFOnResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeRFOnRequest) (*gen.NodeRFOnResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.NodeRFOnRequest) *gen.NodeRFOnResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NodeRFOnResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.NodeRFOnRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNode provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) ResetNode(_a0 context.Context, _a1 *gen.ResetRequest) (*gen.ResetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResetNode")
	}

	var r0 *gen.ResetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ResetRequest) (*gen.ResetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ResetRequest) *gen.ResetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ResetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ResetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TurnNodeOff provides a mock function with given fields: _a0, _a1
func (_m *NodeServiceServer) TurnNodeOff(_a0 context.Context, _a1 *gen.TurnNodeOffRequest) (*gen.TurnNodeOffResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TurnNodeOff")
	}

	var r0 *gen.TurnNodeOffResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.TurnNodeOffRequest) (*gen.TurnNodeOffResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.TurnNodeOffRequest) *gen.TurnNodeOffResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.TurnNodeOffResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.TurnNodeOffRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNodeServiceServer provides a mock function with given fields:
func (_m *NodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {
	_m.Called()
}

// NewNodeServiceServer creates a new instance of NodeServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeServiceServer {
	mock := &NodeServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
