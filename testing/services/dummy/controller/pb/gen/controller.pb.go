//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: controller.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Profile types
type Profile int32

const (
	Profile_PROFILE_NORMAL Profile = 0
	Profile_PROFILE_MIN    Profile = 1
	Profile_PROFILE_MAX    Profile = 2
)

// Enum value maps for Profile.
var (
	Profile_name = map[int32]string{
		0: "PROFILE_NORMAL",
		1: "PROFILE_MIN",
		2: "PROFILE_MAX",
	}
	Profile_value = map[string]int32{
		"PROFILE_NORMAL": 0,
		"PROFILE_MIN":    1,
		"PROFILE_MAX":    2,
	}
)

func (x Profile) Enum() *Profile {
	p := new(Profile)
	*p = x
	return p
}

func (x Profile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Profile) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_proto_enumTypes[0].Descriptor()
}

func (Profile) Type() protoreflect.EnumType {
	return &file_controller_proto_enumTypes[0]
}

func (x Profile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Profile.Descriptor instead.
func (Profile) EnumDescriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0}
}

// Scenario types
type Scenario int32

const (
	Scenario_SCENARIO_DEFAULT       Scenario = 0
	Scenario_SCENARIO_POWER_DOWN    Scenario = 1
	Scenario_SCENARIO_SWITCH_OFF    Scenario = 3
	Scenario_SCENARIO_BACKHAUL_DOWN Scenario = 4
)

// Enum value maps for Scenario.
var (
	Scenario_name = map[int32]string{
		0: "SCENARIO_DEFAULT",
		1: "SCENARIO_POWER_DOWN",
		3: "SCENARIO_SWITCH_OFF",
		4: "SCENARIO_BACKHAUL_DOWN",
	}
	Scenario_value = map[string]int32{
		"SCENARIO_DEFAULT":       0,
		"SCENARIO_POWER_DOWN":    1,
		"SCENARIO_SWITCH_OFF":    3,
		"SCENARIO_BACKHAUL_DOWN": 4,
	}
)

func (x Scenario) Enum() *Scenario {
	p := new(Scenario)
	*p = x
	return p
}

func (x Scenario) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scenario) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_proto_enumTypes[1].Descriptor()
}

func (Scenario) Type() protoreflect.EnumType {
	return &file_controller_proto_enumTypes[1]
}

func (x Scenario) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scenario.Descriptor instead.
func (Scenario) EnumDescriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{1}
}

// Solar metrics data
type GetSiteMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId string `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *GetSiteMetricsRequest) Reset() {
	*x = GetSiteMetricsRequest{}
	mi := &file_controller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSiteMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteMetricsRequest) ProtoMessage() {}

func (x *GetSiteMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetSiteMetricsRequest) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0}
}

func (x *GetSiteMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type GetSiteMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Solar metrics
	Solar *SolarMetrics `protobuf:"bytes,1,opt,name=solar,proto3" json:"solar,omitempty"`
	// Battery metrics
	Battery *BatteryMetrics `protobuf:"bytes,2,opt,name=battery,proto3" json:"battery,omitempty"`
	// Network metrics
	Network *NetworkMetrics `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetSiteMetricsResponse) Reset() {
	*x = GetSiteMetricsResponse{}
	mi := &file_controller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSiteMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteMetricsResponse) ProtoMessage() {}

func (x *GetSiteMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetSiteMetricsResponse) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{1}
}

func (x *GetSiteMetricsResponse) GetSolar() *SolarMetrics {
	if x != nil {
		return x.Solar
	}
	return nil
}

func (x *GetSiteMetricsResponse) GetBattery() *BatteryMetrics {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *GetSiteMetricsResponse) GetNetwork() *NetworkMetrics {
	if x != nil {
		return x.Network
	}
	return nil
}

type SolarMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerGeneration float64 `protobuf:"fixed64,1,opt,name=power_generation,json=powerGeneration,proto3" json:"power_generation,omitempty"`
	EnergyTotal     float64 `protobuf:"fixed64,2,opt,name=energy_total,json=energyTotal,proto3" json:"energy_total,omitempty"`
	PanelPower      float64 `protobuf:"fixed64,3,opt,name=panel_power,json=panelPower,proto3" json:"panel_power,omitempty"`
	PanelCurrent    float64 `protobuf:"fixed64,4,opt,name=panel_current,json=panelCurrent,proto3" json:"panel_current,omitempty"`
	PanelVoltage    float64 `protobuf:"fixed64,5,opt,name=panel_voltage,json=panelVoltage,proto3" json:"panel_voltage,omitempty"`
	InverterStatus  float64 `protobuf:"fixed64,6,opt,name=inverter_status,json=inverterStatus,proto3" json:"inverter_status,omitempty"`
}

func (x *SolarMetrics) Reset() {
	*x = SolarMetrics{}
	mi := &file_controller_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarMetrics) ProtoMessage() {}

func (x *SolarMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarMetrics.ProtoReflect.Descriptor instead.
func (*SolarMetrics) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{2}
}

func (x *SolarMetrics) GetPowerGeneration() float64 {
	if x != nil {
		return x.PowerGeneration
	}
	return 0
}

func (x *SolarMetrics) GetEnergyTotal() float64 {
	if x != nil {
		return x.EnergyTotal
	}
	return 0
}

func (x *SolarMetrics) GetPanelPower() float64 {
	if x != nil {
		return x.PanelPower
	}
	return 0
}

func (x *SolarMetrics) GetPanelCurrent() float64 {
	if x != nil {
		return x.PanelCurrent
	}
	return 0
}

func (x *SolarMetrics) GetPanelVoltage() float64 {
	if x != nil {
		return x.PanelVoltage
	}
	return 0
}

func (x *SolarMetrics) GetInverterStatus() float64 {
	if x != nil {
		return x.InverterStatus
	}
	return 0
}

type BatteryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeStatus float64 `protobuf:"fixed64,1,opt,name=charge_status,json=chargeStatus,proto3" json:"charge_status,omitempty"`
	Voltage      float64 `protobuf:"fixed64,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Health       float64 `protobuf:"fixed64,3,opt,name=health,proto3" json:"health,omitempty"`
	Current      float64 `protobuf:"fixed64,4,opt,name=current,proto3" json:"current,omitempty"`
	Temperature  float64 `protobuf:"fixed64,5,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *BatteryMetrics) Reset() {
	*x = BatteryMetrics{}
	mi := &file_controller_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryMetrics) ProtoMessage() {}

func (x *BatteryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryMetrics.ProtoReflect.Descriptor instead.
func (*BatteryMetrics) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3}
}

func (x *BatteryMetrics) GetChargeStatus() float64 {
	if x != nil {
		return x.ChargeStatus
	}
	return 0
}

func (x *BatteryMetrics) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryMetrics) GetHealth() float64 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *BatteryMetrics) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BatteryMetrics) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type NetworkMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchPortStatus    float64 `protobuf:"fixed64,1,opt,name=switch_port_status,json=switchPortStatus,proto3" json:"switch_port_status,omitempty"`
	SwitchPortBandwidth float64 `protobuf:"fixed64,2,opt,name=switch_port_bandwidth,json=switchPortBandwidth,proto3" json:"switch_port_bandwidth,omitempty"`
	BackhaulLatency     float64 `protobuf:"fixed64,3,opt,name=backhaul_latency,json=backhaulLatency,proto3" json:"backhaul_latency,omitempty"`
	BackhaulStatus      float64 `protobuf:"fixed64,4,opt,name=backhaul_status,json=backhaulStatus,proto3" json:"backhaul_status,omitempty"`
	BackhaulSpeed       float64 `protobuf:"fixed64,5,opt,name=backhaul_speed,json=backhaulSpeed,proto3" json:"backhaul_speed,omitempty"`
}

func (x *NetworkMetrics) Reset() {
	*x = NetworkMetrics{}
	mi := &file_controller_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMetrics) ProtoMessage() {}

func (x *NetworkMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMetrics.ProtoReflect.Descriptor instead.
func (*NetworkMetrics) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkMetrics) GetSwitchPortStatus() float64 {
	if x != nil {
		return x.SwitchPortStatus
	}
	return 0
}

func (x *NetworkMetrics) GetSwitchPortBandwidth() float64 {
	if x != nil {
		return x.SwitchPortBandwidth
	}
	return 0
}

func (x *NetworkMetrics) GetBackhaulLatency() float64 {
	if x != nil {
		return x.BackhaulLatency
	}
	return 0
}

func (x *NetworkMetrics) GetBackhaulStatus() float64 {
	if x != nil {
		return x.BackhaulStatus
	}
	return 0
}

func (x *NetworkMetrics) GetBackhaulSpeed() float64 {
	if x != nil {
		return x.BackhaulSpeed
	}
	return 0
}

type StartMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId   string   `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	Profile  Profile  `protobuf:"varint,2,opt,name=profile,proto3,enum=ukama.dummy.controller.v1.Profile" json:"profile,omitempty"`
	Scenario Scenario `protobuf:"varint,3,opt,name=scenario,proto3,enum=ukama.dummy.controller.v1.Scenario" json:"scenario,omitempty"`
}

func (x *StartMetricsRequest) Reset() {
	*x = StartMetricsRequest{}
	mi := &file_controller_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMetricsRequest) ProtoMessage() {}

func (x *StartMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMetricsRequest.ProtoReflect.Descriptor instead.
func (*StartMetricsRequest) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{5}
}

func (x *StartMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *StartMetricsRequest) GetProfile() Profile {
	if x != nil {
		return x.Profile
	}
	return Profile_PROFILE_NORMAL
}

func (x *StartMetricsRequest) GetScenario() Scenario {
	if x != nil {
		return x.Scenario
	}
	return Scenario_SCENARIO_DEFAULT
}

type StartMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartMetricsResponse) Reset() {
	*x = StartMetricsResponse{}
	mi := &file_controller_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMetricsResponse) ProtoMessage() {}

func (x *StartMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMetricsResponse.ProtoReflect.Descriptor instead.
func (*StartMetricsResponse) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{6}
}

func (x *StartMetricsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartMetricsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId      string        `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	Profile     Profile       `protobuf:"varint,2,opt,name=profile,proto3,enum=ukama.dummy.controller.v1.Profile" json:"profile,omitempty"`
	Scenario    Scenario      `protobuf:"varint,3,opt,name=scenario,proto3,enum=ukama.dummy.controller.v1.Scenario" json:"scenario,omitempty"`
	PortUpdates []*PortUpdate `protobuf:"bytes,4,rep,name=portUpdates,proto3" json:"portUpdates,omitempty"`
}

func (x *UpdateMetricsRequest) Reset() {
	*x = UpdateMetricsRequest{}
	mi := &file_controller_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricsRequest) ProtoMessage() {}

func (x *UpdateMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricsRequest.ProtoReflect.Descriptor instead.
func (*UpdateMetricsRequest) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *UpdateMetricsRequest) GetProfile() Profile {
	if x != nil {
		return x.Profile
	}
	return Profile_PROFILE_NORMAL
}

func (x *UpdateMetricsRequest) GetScenario() Scenario {
	if x != nil {
		return x.Scenario
	}
	return Scenario_SCENARIO_DEFAULT
}

func (x *UpdateMetricsRequest) GetPortUpdates() []*PortUpdate {
	if x != nil {
		return x.PortUpdates
	}
	return nil
}

type UpdateMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMetricsResponse) Reset() {
	*x = UpdateMetricsResponse{}
	mi := &file_controller_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricsResponse) ProtoMessage() {}

func (x *UpdateMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricsResponse.ProtoReflect.Descriptor instead.
func (*UpdateMetricsResponse) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateMetricsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMetricsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PortUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNumber int32 `protobuf:"varint,1,opt,name=portNumber,proto3" json:"portNumber,omitempty"`
	Status     bool  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PortUpdate) Reset() {
	*x = PortUpdate{}
	mi := &file_controller_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortUpdate) ProtoMessage() {}

func (x *PortUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortUpdate.ProtoReflect.Descriptor instead.
func (*PortUpdate) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{9}
}

func (x *PortUpdate) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *PortUpdate) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_controller_proto protoreflect.FileDescriptor

var file_controller_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x19, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x2f, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xe1,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x68, 0x61, 0x75, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61,
	0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x4b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0a,
	0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2a, 0x3f, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49,
	0x4f, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x45, 0x4e, 0x41,
	0x52, 0x49, 0x4f, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x48, 0x41, 0x55, 0x4c, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x04, 0x32, 0xf5, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x41, 0x5a, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f,
	0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_proto_rawDescOnce sync.Once
	file_controller_proto_rawDescData = file_controller_proto_rawDesc
)

func file_controller_proto_rawDescGZIP() []byte {
	file_controller_proto_rawDescOnce.Do(func() {
		file_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_proto_rawDescData)
	})
	return file_controller_proto_rawDescData
}

var file_controller_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_controller_proto_goTypes = []any{
	(Profile)(0),                   // 0: ukama.dummy.controller.v1.Profile
	(Scenario)(0),                  // 1: ukama.dummy.controller.v1.Scenario
	(*GetSiteMetricsRequest)(nil),  // 2: ukama.dummy.controller.v1.GetSiteMetricsRequest
	(*GetSiteMetricsResponse)(nil), // 3: ukama.dummy.controller.v1.GetSiteMetricsResponse
	(*SolarMetrics)(nil),           // 4: ukama.dummy.controller.v1.SolarMetrics
	(*BatteryMetrics)(nil),         // 5: ukama.dummy.controller.v1.BatteryMetrics
	(*NetworkMetrics)(nil),         // 6: ukama.dummy.controller.v1.NetworkMetrics
	(*StartMetricsRequest)(nil),    // 7: ukama.dummy.controller.v1.StartMetricsRequest
	(*StartMetricsResponse)(nil),   // 8: ukama.dummy.controller.v1.StartMetricsResponse
	(*UpdateMetricsRequest)(nil),   // 9: ukama.dummy.controller.v1.UpdateMetricsRequest
	(*UpdateMetricsResponse)(nil),  // 10: ukama.dummy.controller.v1.UpdateMetricsResponse
	(*PortUpdate)(nil),             // 11: ukama.dummy.controller.v1.PortUpdate
}
var file_controller_proto_depIdxs = []int32{
	4,  // 0: ukama.dummy.controller.v1.GetSiteMetricsResponse.solar:type_name -> ukama.dummy.controller.v1.SolarMetrics
	5,  // 1: ukama.dummy.controller.v1.GetSiteMetricsResponse.battery:type_name -> ukama.dummy.controller.v1.BatteryMetrics
	6,  // 2: ukama.dummy.controller.v1.GetSiteMetricsResponse.network:type_name -> ukama.dummy.controller.v1.NetworkMetrics
	0,  // 3: ukama.dummy.controller.v1.StartMetricsRequest.profile:type_name -> ukama.dummy.controller.v1.Profile
	1,  // 4: ukama.dummy.controller.v1.StartMetricsRequest.scenario:type_name -> ukama.dummy.controller.v1.Scenario
	0,  // 5: ukama.dummy.controller.v1.UpdateMetricsRequest.profile:type_name -> ukama.dummy.controller.v1.Profile
	1,  // 6: ukama.dummy.controller.v1.UpdateMetricsRequest.scenario:type_name -> ukama.dummy.controller.v1.Scenario
	11, // 7: ukama.dummy.controller.v1.UpdateMetricsRequest.portUpdates:type_name -> ukama.dummy.controller.v1.PortUpdate
	2,  // 8: ukama.dummy.controller.v1.MetricsController.GetSiteMetrics:input_type -> ukama.dummy.controller.v1.GetSiteMetricsRequest
	7,  // 9: ukama.dummy.controller.v1.MetricsController.StartMetrics:input_type -> ukama.dummy.controller.v1.StartMetricsRequest
	9,  // 10: ukama.dummy.controller.v1.MetricsController.UpdateMetrics:input_type -> ukama.dummy.controller.v1.UpdateMetricsRequest
	3,  // 11: ukama.dummy.controller.v1.MetricsController.GetSiteMetrics:output_type -> ukama.dummy.controller.v1.GetSiteMetricsResponse
	8,  // 12: ukama.dummy.controller.v1.MetricsController.StartMetrics:output_type -> ukama.dummy.controller.v1.StartMetricsResponse
	10, // 13: ukama.dummy.controller.v1.MetricsController.UpdateMetrics:output_type -> ukama.dummy.controller.v1.UpdateMetricsResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_controller_proto_init() }
func file_controller_proto_init() {
	if File_controller_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_proto_goTypes,
		DependencyIndexes: file_controller_proto_depIdxs,
		EnumInfos:         file_controller_proto_enumTypes,
		MessageInfos:      file_controller_proto_msgTypes,
	}.Build()
	File_controller_proto = out.File
	file_controller_proto_rawDesc = nil
	file_controller_proto_goTypes = nil
	file_controller_proto_depIdxs = nil
}
