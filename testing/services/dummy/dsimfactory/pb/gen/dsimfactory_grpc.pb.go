//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dsimfactory.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DsimfactoryService_GetByIccid_FullMethodName = "/ukama.dummy.dsimfactory.v1.DsimfactoryService/GetByIccid"
	DsimfactoryService_Upload_FullMethodName     = "/ukama.dummy.dsimfactory.v1.DsimfactoryService/Upload"
	DsimfactoryService_GetSims_FullMethodName    = "/ukama.dummy.dsimfactory.v1.DsimfactoryService/GetSims"
)

// DsimfactoryServiceClient is the client API for DsimfactoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DsimfactoryServiceClient interface {
	GetByIccid(ctx context.Context, in *GetByIccidRequest, opts ...grpc.CallOption) (*GetByIccidResponse, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	GetSims(ctx context.Context, in *GetSimsRequest, opts ...grpc.CallOption) (*GetSimsResponse, error)
}

type dsimfactoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDsimfactoryServiceClient(cc grpc.ClientConnInterface) DsimfactoryServiceClient {
	return &dsimfactoryServiceClient{cc}
}

func (c *dsimfactoryServiceClient) GetByIccid(ctx context.Context, in *GetByIccidRequest, opts ...grpc.CallOption) (*GetByIccidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIccidResponse)
	err := c.cc.Invoke(ctx, DsimfactoryService_GetByIccid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsimfactoryServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, DsimfactoryService_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsimfactoryServiceClient) GetSims(ctx context.Context, in *GetSimsRequest, opts ...grpc.CallOption) (*GetSimsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSimsResponse)
	err := c.cc.Invoke(ctx, DsimfactoryService_GetSims_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DsimfactoryServiceServer is the server API for DsimfactoryService service.
// All implementations must embed UnimplementedDsimfactoryServiceServer
// for forward compatibility.
type DsimfactoryServiceServer interface {
	GetByIccid(context.Context, *GetByIccidRequest) (*GetByIccidResponse, error)
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	GetSims(context.Context, *GetSimsRequest) (*GetSimsResponse, error)
	mustEmbedUnimplementedDsimfactoryServiceServer()
}

// UnimplementedDsimfactoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDsimfactoryServiceServer struct{}

func (UnimplementedDsimfactoryServiceServer) GetByIccid(context.Context, *GetByIccidRequest) (*GetByIccidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIccid not implemented")
}
func (UnimplementedDsimfactoryServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDsimfactoryServiceServer) GetSims(context.Context, *GetSimsRequest) (*GetSimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSims not implemented")
}
func (UnimplementedDsimfactoryServiceServer) mustEmbedUnimplementedDsimfactoryServiceServer() {}
func (UnimplementedDsimfactoryServiceServer) testEmbeddedByValue()                            {}

// UnsafeDsimfactoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DsimfactoryServiceServer will
// result in compilation errors.
type UnsafeDsimfactoryServiceServer interface {
	mustEmbedUnimplementedDsimfactoryServiceServer()
}

func RegisterDsimfactoryServiceServer(s grpc.ServiceRegistrar, srv DsimfactoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDsimfactoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DsimfactoryService_ServiceDesc, srv)
}

func _DsimfactoryService_GetByIccid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIccidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsimfactoryServiceServer).GetByIccid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DsimfactoryService_GetByIccid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsimfactoryServiceServer).GetByIccid(ctx, req.(*GetByIccidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DsimfactoryService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsimfactoryServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DsimfactoryService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsimfactoryServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DsimfactoryService_GetSims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsimfactoryServiceServer).GetSims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DsimfactoryService_GetSims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsimfactoryServiceServer).GetSims(ctx, req.(*GetSimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DsimfactoryService_ServiceDesc is the grpc.ServiceDesc for DsimfactoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DsimfactoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.dummy.dsimfactory.v1.DsimfactoryService",
	HandlerType: (*DsimfactoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByIccid",
			Handler:    _DsimfactoryService_GetByIccid_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _DsimfactoryService_Upload_Handler,
		},
		{
			MethodName: "GetSims",
			Handler:    _DsimfactoryService_GetSims_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsimfactory.proto",
}
