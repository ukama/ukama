//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: dsimfactory.proto

package gen

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSimsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSimsRequest) Reset() {
	*x = GetSimsRequest{}
	mi := &file_dsimfactory_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSimsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimsRequest) ProtoMessage() {}

func (x *GetSimsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimsRequest.ProtoReflect.Descriptor instead.
func (*GetSimsRequest) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{0}
}

type GetSimsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sims          []*Sim                 `protobuf:"bytes,1,rep,name=sims,proto3" json:"sims,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSimsResponse) Reset() {
	*x = GetSimsResponse{}
	mi := &file_dsimfactory_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSimsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimsResponse) ProtoMessage() {}

func (x *GetSimsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimsResponse.ProtoReflect.Descriptor instead.
func (*GetSimsResponse) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{1}
}

func (x *GetSimsResponse) GetSims() []*Sim {
	if x != nil {
		return x.Sims
	}
	return nil
}

type GetByIccidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Iccid         string                 `protobuf:"bytes,1,opt,name=iccid,proto3" json:"iccid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByIccidRequest) Reset() {
	*x = GetByIccidRequest{}
	mi := &file_dsimfactory_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByIccidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIccidRequest) ProtoMessage() {}

func (x *GetByIccidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIccidRequest.ProtoReflect.Descriptor instead.
func (*GetByIccidRequest) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{2}
}

func (x *GetByIccidRequest) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

type GetByIccidResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sim           *Sim                   `protobuf:"bytes,1,opt,name=sim,proto3" json:"sim,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByIccidResponse) Reset() {
	*x = GetByIccidResponse{}
	mi := &file_dsimfactory_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByIccidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIccidResponse) ProtoMessage() {}

func (x *GetByIccidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIccidResponse.ProtoReflect.Descriptor instead.
func (*GetByIccidResponse) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{3}
}

func (x *GetByIccidResponse) GetSim() *Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

type UploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SimData       []byte                 `protobuf:"bytes,1,opt,name=simData,proto3" json:"simData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	mi := &file_dsimfactory_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{4}
}

func (x *UploadRequest) GetSimData() []byte {
	if x != nil {
		return x.SimData
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Iccid         []string               `protobuf:"bytes,1,rep,name=iccid,proto3" json:"iccid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	mi := &file_dsimfactory_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{5}
}

func (x *UploadResponse) GetIccid() []string {
	if x != nil {
		return x.Iccid
	}
	return nil
}

type Sim struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iccid          string                 `protobuf:"bytes,2,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Imsi           string                 `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Msisdn         string                 `protobuf:"bytes,4,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	SmDpAddress    string                 `protobuf:"bytes,5,opt,name=smDpAddress,json=sm_dp_address,proto3" json:"smDpAddress,omitempty"`
	ActivationCode string                 `protobuf:"bytes,6,opt,name=activationCode,json=activation_code,proto3" json:"activationCode,omitempty"`
	IsPhysical     bool                   `protobuf:"varint,7,opt,name=isPhysical,json=is_physical,proto3" json:"isPhysical,omitempty"`
	QrCode         string                 `protobuf:"bytes,8,opt,name=qrCode,json=qr_code,proto3" json:"qrCode,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Sim) Reset() {
	*x = Sim{}
	mi := &file_dsimfactory_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sim) ProtoMessage() {}

func (x *Sim) ProtoReflect() protoreflect.Message {
	mi := &file_dsimfactory_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sim.ProtoReflect.Descriptor instead.
func (*Sim) Descriptor() ([]byte, []int) {
	return file_dsimfactory_proto_rawDescGZIP(), []int{6}
}

func (x *Sim) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sim) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Sim) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *Sim) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *Sim) GetSmDpAddress() string {
	if x != nil {
		return x.SmDpAddress
	}
	return ""
}

func (x *Sim) GetActivationCode() string {
	if x != nil {
		return x.ActivationCode
	}
	return ""
}

func (x *Sim) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

func (x *Sim) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

var File_dsimfactory_proto protoreflect.FileDescriptor

var file_dsimfactory_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x6d, 0x52, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x63, 0x63, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x63, 0x63, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63,
	0x63, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x73,
	0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x22, 0x29,
	0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x73, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69,
	0x64, 0x22, 0x8b, 0x04, 0x0a, 0x03, 0x53, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0xdf, 0x1f, 0x2b, 0x0a, 0x0b,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x39, 0x7d, 0x24, 0x2a, 0x1c, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x43, 0x43,
	0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64,
	0x12, 0x45, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xe2, 0xdf, 0x1f, 0x2d, 0x0a, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x33, 0x2c,
	0x31, 0x35, 0x7d, 0x24, 0x2a, 0x1b, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x4d, 0x53, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0xde, 0x01, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73,
	0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01, 0xe2, 0xdf, 0x1f, 0xc0, 0x01,
	0x0a, 0x9e, 0x01, 0x5e, 0x24, 0x7c, 0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f,
	0x28, 0x3f, 0x3a, 0x30, 0x30, 0x7c, 0x5c, 0x2b, 0x29, 0x28, 0x5b, 0x31, 0x2d, 0x34, 0x5d, 0x5c,
	0x64, 0x5c, 0x64, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x3f, 0x29, 0x5c, 0x29, 0x3f,
	0x29, 0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29,
	0x3f, 0x28, 0x28, 0x3f, 0x3a, 0x5c, 0x28, 0x3f, 0x5c, 0x64, 0x7b, 0x31, 0x2c, 0x7d, 0x5c, 0x29,
	0x3f, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x29, 0x7b,
	0x30, 0x2c, 0x7d, 0x29, 0x28, 0x3f, 0x3a, 0x5b, 0x5c, 0x2d, 0x5c, 0x2e, 0x5c, 0x20, 0x5c, 0x5c,
	0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x3f, 0x3a, 0x23, 0x7c, 0x65, 0x78, 0x74, 0x5c, 0x2e, 0x3f, 0x7c,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x7c, 0x78, 0x29, 0x5b, 0x5c, 0x2d, 0x5c,
	0x2e, 0x5c, 0x20, 0x5c, 0x5c, 0x5c, 0x2f, 0x5d, 0x3f, 0x28, 0x5c, 0x64, 0x2b, 0x29, 0x29, 0x3f,
	0x24, 0x2a, 0x1d, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x6d, 0x44, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6d, 0x5f, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0xcc, 0x02, 0x0a, 0x12, 0x44, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x63, 0x63, 0x69, 0x64, 0x12, 0x2d, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x63, 0x63, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x29, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x73,
	0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x2e, 0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x73,
	0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42,
	0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61,
	0x6d, 0x61, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2f,
	0x64, 0x73, 0x69, 0x6d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x62, 0x2f, 0x67,
	0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_dsimfactory_proto_rawDescOnce sync.Once
	file_dsimfactory_proto_rawDescData []byte
)

func file_dsimfactory_proto_rawDescGZIP() []byte {
	file_dsimfactory_proto_rawDescOnce.Do(func() {
		file_dsimfactory_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dsimfactory_proto_rawDesc), len(file_dsimfactory_proto_rawDesc)))
	})
	return file_dsimfactory_proto_rawDescData
}

var file_dsimfactory_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dsimfactory_proto_goTypes = []any{
	(*GetSimsRequest)(nil),     // 0: ukama.dummy.dsimfactory.v1.GetSimsRequest
	(*GetSimsResponse)(nil),    // 1: ukama.dummy.dsimfactory.v1.GetSimsResponse
	(*GetByIccidRequest)(nil),  // 2: ukama.dummy.dsimfactory.v1.GetByIccidRequest
	(*GetByIccidResponse)(nil), // 3: ukama.dummy.dsimfactory.v1.GetByIccidResponse
	(*UploadRequest)(nil),      // 4: ukama.dummy.dsimfactory.v1.UploadRequest
	(*UploadResponse)(nil),     // 5: ukama.dummy.dsimfactory.v1.UploadResponse
	(*Sim)(nil),                // 6: ukama.dummy.dsimfactory.v1.Sim
}
var file_dsimfactory_proto_depIdxs = []int32{
	6, // 0: ukama.dummy.dsimfactory.v1.GetSimsResponse.sims:type_name -> ukama.dummy.dsimfactory.v1.Sim
	6, // 1: ukama.dummy.dsimfactory.v1.GetByIccidResponse.sim:type_name -> ukama.dummy.dsimfactory.v1.Sim
	2, // 2: ukama.dummy.dsimfactory.v1.DsimfactoryService.GetByIccid:input_type -> ukama.dummy.dsimfactory.v1.GetByIccidRequest
	4, // 3: ukama.dummy.dsimfactory.v1.DsimfactoryService.Upload:input_type -> ukama.dummy.dsimfactory.v1.UploadRequest
	0, // 4: ukama.dummy.dsimfactory.v1.DsimfactoryService.GetSims:input_type -> ukama.dummy.dsimfactory.v1.GetSimsRequest
	3, // 5: ukama.dummy.dsimfactory.v1.DsimfactoryService.GetByIccid:output_type -> ukama.dummy.dsimfactory.v1.GetByIccidResponse
	5, // 6: ukama.dummy.dsimfactory.v1.DsimfactoryService.Upload:output_type -> ukama.dummy.dsimfactory.v1.UploadResponse
	1, // 7: ukama.dummy.dsimfactory.v1.DsimfactoryService.GetSims:output_type -> ukama.dummy.dsimfactory.v1.GetSimsResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dsimfactory_proto_init() }
func file_dsimfactory_proto_init() {
	if File_dsimfactory_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dsimfactory_proto_rawDesc), len(file_dsimfactory_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dsimfactory_proto_goTypes,
		DependencyIndexes: file_dsimfactory_proto_depIdxs,
		MessageInfos:      file_dsimfactory_proto_msgTypes,
	}.Build()
	File_dsimfactory_proto = out.File
	file_dsimfactory_proto_goTypes = nil
	file_dsimfactory_proto_depIdxs = nil
}
