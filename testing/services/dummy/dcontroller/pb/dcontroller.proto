/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2023-present, Ukama Inc.
 */

 syntax = "proto3";

 option go_package = "github.com/ukama/ukama/testing/services/dummy/dcontroller/pb/gen";
  
 package ukama.dummy.dcontroller.v1;
 service MetricsController {
    rpc GetSiteMetrics(GetSiteMetricsRequest) returns (GetSiteMetricsResponse) {}
    rpc StartMetrics(StartMetricsRequest) returns (StartMetricsResponse) {}
    rpc StopMetrics(StopMetricsRequest) returns (StopMetricsResponse) {}
    rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {}
    rpc UpdatePortStatus(UpdatePortStatusRequest) returns (UpdatePortStatusResponse) {}
 }
 
 // Port constants defined as enum
 enum PortType {
     PORT_UNKNOWN = 0;
     PORT_NODE = 1;
     PORT_SOLAR = 2;
     PORT_BACKHAUL = 3;
 }
 
 message SiteConfig {
     double avgBackhaulSpeed = 1; 
     double avgLatency = 2; 
     double solarEfficiency = 3; 
 }
 
 message UpdatePortStatusRequest {
     string siteId = 1;
     int32 portNumber = 2;
     bool enabled = 3;
 }
 
 message UpdatePortStatusResponse {
     bool success = 1;
     string message = 2;
 }
 
 message GetMetricsRequest {
    string siteId = 1;
 }
 message GetMetricsResponse {
    repeated BackhaulMetrics backhaul = 1;
    repeated EthernetMetrics ethernet = 2;
    repeated PowerMetrics power = 3;
 }
 
 message StopMetricsRequest {
     string siteId = 1;
 }
 message StopMetricsResponse {
     bool success = 1;
     string message = 2;
 }
 
 message GetSiteMetricsRequest {
     string siteId = 1;
 }
  
 message GetSiteMetricsResponse {
     BackhaulMetrics backhaul = 1;
     EthernetMetrics ethernet = 2;
     PowerMetrics power = 3;
     double uptimeSeconds = 4;
 }
  
 message BackhaulMetrics {
     double latency = 1;
     double status = 2;
     double speed = 3;
 }
 
 message EthernetMetrics {
     double portStatus = 1;
     double portSpeed = 2;
 }
 
 message PowerMetrics {
     double batteryPower = 1;
     double solarPanelVoltage = 2;
     double solarPanelCurrent = 3;
     double solarPanelPower = 4;
 }
 
 message StartMetricsRequest {
     string siteId = 1;
     SiteConfig siteConfig = 2;
 }
 
 message StartMetricsResponse {
     bool success = 1;
     string message = 2;
 }