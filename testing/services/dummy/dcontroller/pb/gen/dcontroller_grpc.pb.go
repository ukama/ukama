//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: dcontroller.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsController_GetSiteMetrics_FullMethodName = "/ukama.dummy.dcontroller.v1.MetricsController/GetSiteMetrics"
	MetricsController_StartMetrics_FullMethodName   = "/ukama.dummy.dcontroller.v1.MetricsController/StartMetrics"
	MetricsController_UpdateMetrics_FullMethodName  = "/ukama.dummy.dcontroller.v1.MetricsController/UpdateMetrics"
	MetricsController_MonitorSite_FullMethodName    = "/ukama.dummy.dcontroller.v1.MetricsController/MonitorSite"
	MetricsController_StopMonitoring_FullMethodName = "/ukama.dummy.dcontroller.v1.MetricsController/StopMonitoring"
)

// MetricsControllerClient is the client API for MetricsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsControllerClient interface {
	// Get current metrics
	GetSiteMetrics(ctx context.Context, in *GetSiteMetricsRequest, opts ...grpc.CallOption) (*GetSiteMetricsResponse, error)
	StartMetrics(ctx context.Context, in *StartMetricsRequest, opts ...grpc.CallOption) (*StartMetricsResponse, error)
	UpdateMetrics(ctx context.Context, in *UpdateMetricsRequest, opts ...grpc.CallOption) (*UpdateMetricsResponse, error)
	// New monitoring services
	MonitorSite(ctx context.Context, in *MonitorSiteRequest, opts ...grpc.CallOption) (*MonitorSiteResponse, error)
	StopMonitoring(ctx context.Context, in *StopMonitoringRequest, opts ...grpc.CallOption) (*StopMonitoringResponse, error)
}

type metricsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsControllerClient(cc grpc.ClientConnInterface) MetricsControllerClient {
	return &metricsControllerClient{cc}
}

func (c *metricsControllerClient) GetSiteMetrics(ctx context.Context, in *GetSiteMetricsRequest, opts ...grpc.CallOption) (*GetSiteMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSiteMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsController_GetSiteMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsControllerClient) StartMetrics(ctx context.Context, in *StartMetricsRequest, opts ...grpc.CallOption) (*StartMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsController_StartMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsControllerClient) UpdateMetrics(ctx context.Context, in *UpdateMetricsRequest, opts ...grpc.CallOption) (*UpdateMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsController_UpdateMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsControllerClient) MonitorSite(ctx context.Context, in *MonitorSiteRequest, opts ...grpc.CallOption) (*MonitorSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitorSiteResponse)
	err := c.cc.Invoke(ctx, MetricsController_MonitorSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsControllerClient) StopMonitoring(ctx context.Context, in *StopMonitoringRequest, opts ...grpc.CallOption) (*StopMonitoringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopMonitoringResponse)
	err := c.cc.Invoke(ctx, MetricsController_StopMonitoring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsControllerServer is the server API for MetricsController service.
// All implementations must embed UnimplementedMetricsControllerServer
// for forward compatibility.
type MetricsControllerServer interface {
	// Get current metrics
	GetSiteMetrics(context.Context, *GetSiteMetricsRequest) (*GetSiteMetricsResponse, error)
	StartMetrics(context.Context, *StartMetricsRequest) (*StartMetricsResponse, error)
	UpdateMetrics(context.Context, *UpdateMetricsRequest) (*UpdateMetricsResponse, error)
	// New monitoring services
	MonitorSite(context.Context, *MonitorSiteRequest) (*MonitorSiteResponse, error)
	StopMonitoring(context.Context, *StopMonitoringRequest) (*StopMonitoringResponse, error)
	mustEmbedUnimplementedMetricsControllerServer()
}

// UnimplementedMetricsControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsControllerServer struct{}

func (UnimplementedMetricsControllerServer) GetSiteMetrics(context.Context, *GetSiteMetricsRequest) (*GetSiteMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteMetrics not implemented")
}
func (UnimplementedMetricsControllerServer) StartMetrics(context.Context, *StartMetricsRequest) (*StartMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMetrics not implemented")
}
func (UnimplementedMetricsControllerServer) UpdateMetrics(context.Context, *UpdateMetricsRequest) (*UpdateMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (UnimplementedMetricsControllerServer) MonitorSite(context.Context, *MonitorSiteRequest) (*MonitorSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorSite not implemented")
}
func (UnimplementedMetricsControllerServer) StopMonitoring(context.Context, *StopMonitoringRequest) (*StopMonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMonitoring not implemented")
}
func (UnimplementedMetricsControllerServer) mustEmbedUnimplementedMetricsControllerServer() {}
func (UnimplementedMetricsControllerServer) testEmbeddedByValue()                           {}

// UnsafeMetricsControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsControllerServer will
// result in compilation errors.
type UnsafeMetricsControllerServer interface {
	mustEmbedUnimplementedMetricsControllerServer()
}

func RegisterMetricsControllerServer(s grpc.ServiceRegistrar, srv MetricsControllerServer) {
	// If the following call pancis, it indicates UnimplementedMetricsControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsController_ServiceDesc, srv)
}

func _MetricsController_GetSiteMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).GetSiteMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsController_GetSiteMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).GetSiteMetrics(ctx, req.(*GetSiteMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsController_StartMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).StartMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsController_StartMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).StartMetrics(ctx, req.(*StartMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsController_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsController_UpdateMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).UpdateMetrics(ctx, req.(*UpdateMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsController_MonitorSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).MonitorSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsController_MonitorSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).MonitorSite(ctx, req.(*MonitorSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsController_StopMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).StopMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsController_StopMonitoring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).StopMonitoring(ctx, req.(*StopMonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsController_ServiceDesc is the grpc.ServiceDesc for MetricsController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.dummy.dcontroller.v1.MetricsController",
	HandlerType: (*MetricsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSiteMetrics",
			Handler:    _MetricsController_GetSiteMetrics_Handler,
		},
		{
			MethodName: "StartMetrics",
			Handler:    _MetricsController_StartMetrics_Handler,
		},
		{
			MethodName: "UpdateMetrics",
			Handler:    _MetricsController_UpdateMetrics_Handler,
		},
		{
			MethodName: "MonitorSite",
			Handler:    _MetricsController_MonitorSite_Handler,
		},
		{
			MethodName: "StopMonitoring",
			Handler:    _MetricsController_StopMonitoring_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcontroller.proto",
}
