//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2023-present, Ukama Inc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: dcontroller.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Port constants defined as enum
type PortType int32

const (
	PortType_PORT_UNKNOWN  PortType = 0
	PortType_PORT_NODE     PortType = 1
	PortType_PORT_SOLAR    PortType = 2
	PortType_PORT_BACKHAUL PortType = 3
)

// Enum value maps for PortType.
var (
	PortType_name = map[int32]string{
		0: "PORT_UNKNOWN",
		1: "PORT_NODE",
		2: "PORT_SOLAR",
		3: "PORT_BACKHAUL",
	}
	PortType_value = map[string]int32{
		"PORT_UNKNOWN":  0,
		"PORT_NODE":     1,
		"PORT_SOLAR":    2,
		"PORT_BACKHAUL": 3,
	}
)

func (x PortType) Enum() *PortType {
	p := new(PortType)
	*p = x
	return p
}

func (x PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_dcontroller_proto_enumTypes[0].Descriptor()
}

func (PortType) Type() protoreflect.EnumType {
	return &file_dcontroller_proto_enumTypes[0]
}

func (x PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortType.Descriptor instead.
func (PortType) EnumDescriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{0}
}

// New message definitions for updating port status
type UpdatePortStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId     string `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	PortNumber int32  `protobuf:"varint,2,opt,name=portNumber,proto3" json:"portNumber,omitempty"`
	Enabled    bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdatePortStatusRequest) Reset() {
	*x = UpdatePortStatusRequest{}
	mi := &file_dcontroller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortStatusRequest) ProtoMessage() {}

func (x *UpdatePortStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortStatusRequest) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{0}
}

func (x *UpdatePortStatusRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *UpdatePortStatusRequest) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *UpdatePortStatusRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type UpdatePortStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdatePortStatusResponse) Reset() {
	*x = UpdatePortStatusResponse{}
	mi := &file_dcontroller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortStatusResponse) ProtoMessage() {}

func (x *UpdatePortStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdatePortStatusResponse) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePortStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdatePortStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId string `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	mi := &file_dcontroller_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{2}
}

func (x *GetMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type GetMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backhaul []*BackhaulMetrics `protobuf:"bytes,1,rep,name=backhaul,proto3" json:"backhaul,omitempty"`
	Ethernet []*EthernetMetrics `protobuf:"bytes,2,rep,name=ethernet,proto3" json:"ethernet,omitempty"`
	Power    []*PowerMetrics    `protobuf:"bytes,3,rep,name=power,proto3" json:"power,omitempty"`
}

func (x *GetMetricsResponse) Reset() {
	*x = GetMetricsResponse{}
	mi := &file_dcontroller_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponse) ProtoMessage() {}

func (x *GetMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{3}
}

func (x *GetMetricsResponse) GetBackhaul() []*BackhaulMetrics {
	if x != nil {
		return x.Backhaul
	}
	return nil
}

func (x *GetMetricsResponse) GetEthernet() []*EthernetMetrics {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *GetMetricsResponse) GetPower() []*PowerMetrics {
	if x != nil {
		return x.Power
	}
	return nil
}

type StopMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId string `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *StopMetricsRequest) Reset() {
	*x = StopMetricsRequest{}
	mi := &file_dcontroller_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMetricsRequest) ProtoMessage() {}

func (x *StopMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMetricsRequest.ProtoReflect.Descriptor instead.
func (*StopMetricsRequest) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{4}
}

func (x *StopMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type StopMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopMetricsResponse) Reset() {
	*x = StopMetricsResponse{}
	mi := &file_dcontroller_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMetricsResponse) ProtoMessage() {}

func (x *StopMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMetricsResponse.ProtoReflect.Descriptor instead.
func (*StopMetricsResponse) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{5}
}

func (x *StopMetricsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StopMetricsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSiteMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId string `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *GetSiteMetricsRequest) Reset() {
	*x = GetSiteMetricsRequest{}
	mi := &file_dcontroller_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSiteMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteMetricsRequest) ProtoMessage() {}

func (x *GetSiteMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetSiteMetricsRequest) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{6}
}

func (x *GetSiteMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type GetSiteMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backhaul      *BackhaulMetrics `protobuf:"bytes,1,opt,name=backhaul,proto3" json:"backhaul,omitempty"`
	Ethernet      *EthernetMetrics `protobuf:"bytes,2,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Power         *PowerMetrics    `protobuf:"bytes,3,opt,name=power,proto3" json:"power,omitempty"`
	UptimeSeconds float64          `protobuf:"fixed64,4,opt,name=uptimeSeconds,proto3" json:"uptimeSeconds,omitempty"`
}

func (x *GetSiteMetricsResponse) Reset() {
	*x = GetSiteMetricsResponse{}
	mi := &file_dcontroller_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSiteMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteMetricsResponse) ProtoMessage() {}

func (x *GetSiteMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetSiteMetricsResponse) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{7}
}

func (x *GetSiteMetricsResponse) GetBackhaul() *BackhaulMetrics {
	if x != nil {
		return x.Backhaul
	}
	return nil
}

func (x *GetSiteMetricsResponse) GetEthernet() *EthernetMetrics {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *GetSiteMetricsResponse) GetPower() *PowerMetrics {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *GetSiteMetricsResponse) GetUptimeSeconds() float64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

type BackhaulMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latency float64 `protobuf:"fixed64,1,opt,name=latency,proto3" json:"latency,omitempty"`
	Status  float64 `protobuf:"fixed64,2,opt,name=status,proto3" json:"status,omitempty"`
	Speed   float64 `protobuf:"fixed64,3,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *BackhaulMetrics) Reset() {
	*x = BackhaulMetrics{}
	mi := &file_dcontroller_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackhaulMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackhaulMetrics) ProtoMessage() {}

func (x *BackhaulMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackhaulMetrics.ProtoReflect.Descriptor instead.
func (*BackhaulMetrics) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{8}
}

func (x *BackhaulMetrics) GetLatency() float64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *BackhaulMetrics) GetStatus() float64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BackhaulMetrics) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type EthernetMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortStatus float64 `protobuf:"fixed64,1,opt,name=portStatus,proto3" json:"portStatus,omitempty"`
	PortSpeed  float64 `protobuf:"fixed64,2,opt,name=portSpeed,proto3" json:"portSpeed,omitempty"`
}

func (x *EthernetMetrics) Reset() {
	*x = EthernetMetrics{}
	mi := &file_dcontroller_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetMetrics) ProtoMessage() {}

func (x *EthernetMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetMetrics.ProtoReflect.Descriptor instead.
func (*EthernetMetrics) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{9}
}

func (x *EthernetMetrics) GetPortStatus() float64 {
	if x != nil {
		return x.PortStatus
	}
	return 0
}

func (x *EthernetMetrics) GetPortSpeed() float64 {
	if x != nil {
		return x.PortSpeed
	}
	return 0
}

type PowerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryPower      float64 `protobuf:"fixed64,1,opt,name=batteryPower,proto3" json:"batteryPower,omitempty"`
	SolarPanelVoltage float64 `protobuf:"fixed64,2,opt,name=solarPanelVoltage,proto3" json:"solarPanelVoltage,omitempty"`
	SolarPanelCurrent float64 `protobuf:"fixed64,3,opt,name=solarPanelCurrent,proto3" json:"solarPanelCurrent,omitempty"`
	SolarPanelPower   float64 `protobuf:"fixed64,4,opt,name=solarPanelPower,proto3" json:"solarPanelPower,omitempty"`
}

func (x *PowerMetrics) Reset() {
	*x = PowerMetrics{}
	mi := &file_dcontroller_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMetrics) ProtoMessage() {}

func (x *PowerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMetrics.ProtoReflect.Descriptor instead.
func (*PowerMetrics) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{10}
}

func (x *PowerMetrics) GetBatteryPower() float64 {
	if x != nil {
		return x.BatteryPower
	}
	return 0
}

func (x *PowerMetrics) GetSolarPanelVoltage() float64 {
	if x != nil {
		return x.SolarPanelVoltage
	}
	return 0
}

func (x *PowerMetrics) GetSolarPanelCurrent() float64 {
	if x != nil {
		return x.SolarPanelCurrent
	}
	return 0
}

func (x *PowerMetrics) GetSolarPanelPower() float64 {
	if x != nil {
		return x.SolarPanelPower
	}
	return 0
}

type StartMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId string `protobuf:"bytes,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
}

func (x *StartMetricsRequest) Reset() {
	*x = StartMetricsRequest{}
	mi := &file_dcontroller_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMetricsRequest) ProtoMessage() {}

func (x *StartMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMetricsRequest.ProtoReflect.Descriptor instead.
func (*StartMetricsRequest) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{11}
}

func (x *StartMetricsRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type StartMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartMetricsResponse) Reset() {
	*x = StartMetricsResponse{}
	mi := &file_dcontroller_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMetricsResponse) ProtoMessage() {}

func (x *StartMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcontroller_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMetricsResponse.ProtoReflect.Descriptor instead.
func (*StartMetricsResponse) Descriptor() ([]byte, []int) {
	return file_dcontroller_proto_rawDescGZIP(), []int{12}
}

func (x *StartMetricsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartMetricsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_dcontroller_proto protoreflect.FileDescriptor

var file_dcontroller_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22,
	0x6b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x08, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e,
	0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x22, 0x2c, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x49, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x68,
	0x61, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c,
	0x12, 0x47, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x59, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x0f, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x4e, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x48, 0x41, 0x55, 0x4c, 0x10,
	0x03, 0x32, 0xe5, 0x04, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x31, 0x2e, 0x75, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x75,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x64, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e,
	0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x75, 0x6b,
	0x61, 0x6d, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2f, 0x64, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcontroller_proto_rawDescOnce sync.Once
	file_dcontroller_proto_rawDescData = file_dcontroller_proto_rawDesc
)

func file_dcontroller_proto_rawDescGZIP() []byte {
	file_dcontroller_proto_rawDescOnce.Do(func() {
		file_dcontroller_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcontroller_proto_rawDescData)
	})
	return file_dcontroller_proto_rawDescData
}

var file_dcontroller_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dcontroller_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_dcontroller_proto_goTypes = []any{
	(PortType)(0),                    // 0: ukama.dummy.dcontroller.v1.PortType
	(*UpdatePortStatusRequest)(nil),  // 1: ukama.dummy.dcontroller.v1.UpdatePortStatusRequest
	(*UpdatePortStatusResponse)(nil), // 2: ukama.dummy.dcontroller.v1.UpdatePortStatusResponse
	(*GetMetricsRequest)(nil),        // 3: ukama.dummy.dcontroller.v1.GetMetricsRequest
	(*GetMetricsResponse)(nil),       // 4: ukama.dummy.dcontroller.v1.GetMetricsResponse
	(*StopMetricsRequest)(nil),       // 5: ukama.dummy.dcontroller.v1.StopMetricsRequest
	(*StopMetricsResponse)(nil),      // 6: ukama.dummy.dcontroller.v1.StopMetricsResponse
	(*GetSiteMetricsRequest)(nil),    // 7: ukama.dummy.dcontroller.v1.GetSiteMetricsRequest
	(*GetSiteMetricsResponse)(nil),   // 8: ukama.dummy.dcontroller.v1.GetSiteMetricsResponse
	(*BackhaulMetrics)(nil),          // 9: ukama.dummy.dcontroller.v1.BackhaulMetrics
	(*EthernetMetrics)(nil),          // 10: ukama.dummy.dcontroller.v1.EthernetMetrics
	(*PowerMetrics)(nil),             // 11: ukama.dummy.dcontroller.v1.PowerMetrics
	(*StartMetricsRequest)(nil),      // 12: ukama.dummy.dcontroller.v1.StartMetricsRequest
	(*StartMetricsResponse)(nil),     // 13: ukama.dummy.dcontroller.v1.StartMetricsResponse
}
var file_dcontroller_proto_depIdxs = []int32{
	9,  // 0: ukama.dummy.dcontroller.v1.GetMetricsResponse.backhaul:type_name -> ukama.dummy.dcontroller.v1.BackhaulMetrics
	10, // 1: ukama.dummy.dcontroller.v1.GetMetricsResponse.ethernet:type_name -> ukama.dummy.dcontroller.v1.EthernetMetrics
	11, // 2: ukama.dummy.dcontroller.v1.GetMetricsResponse.power:type_name -> ukama.dummy.dcontroller.v1.PowerMetrics
	9,  // 3: ukama.dummy.dcontroller.v1.GetSiteMetricsResponse.backhaul:type_name -> ukama.dummy.dcontroller.v1.BackhaulMetrics
	10, // 4: ukama.dummy.dcontroller.v1.GetSiteMetricsResponse.ethernet:type_name -> ukama.dummy.dcontroller.v1.EthernetMetrics
	11, // 5: ukama.dummy.dcontroller.v1.GetSiteMetricsResponse.power:type_name -> ukama.dummy.dcontroller.v1.PowerMetrics
	7,  // 6: ukama.dummy.dcontroller.v1.MetricsController.GetSiteMetrics:input_type -> ukama.dummy.dcontroller.v1.GetSiteMetricsRequest
	12, // 7: ukama.dummy.dcontroller.v1.MetricsController.StartMetrics:input_type -> ukama.dummy.dcontroller.v1.StartMetricsRequest
	5,  // 8: ukama.dummy.dcontroller.v1.MetricsController.StopMetrics:input_type -> ukama.dummy.dcontroller.v1.StopMetricsRequest
	3,  // 9: ukama.dummy.dcontroller.v1.MetricsController.GetMetrics:input_type -> ukama.dummy.dcontroller.v1.GetMetricsRequest
	1,  // 10: ukama.dummy.dcontroller.v1.MetricsController.UpdatePortStatus:input_type -> ukama.dummy.dcontroller.v1.UpdatePortStatusRequest
	8,  // 11: ukama.dummy.dcontroller.v1.MetricsController.GetSiteMetrics:output_type -> ukama.dummy.dcontroller.v1.GetSiteMetricsResponse
	13, // 12: ukama.dummy.dcontroller.v1.MetricsController.StartMetrics:output_type -> ukama.dummy.dcontroller.v1.StartMetricsResponse
	6,  // 13: ukama.dummy.dcontroller.v1.MetricsController.StopMetrics:output_type -> ukama.dummy.dcontroller.v1.StopMetricsResponse
	4,  // 14: ukama.dummy.dcontroller.v1.MetricsController.GetMetrics:output_type -> ukama.dummy.dcontroller.v1.GetMetricsResponse
	2,  // 15: ukama.dummy.dcontroller.v1.MetricsController.UpdatePortStatus:output_type -> ukama.dummy.dcontroller.v1.UpdatePortStatusResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dcontroller_proto_init() }
func file_dcontroller_proto_init() {
	if File_dcontroller_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcontroller_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcontroller_proto_goTypes,
		DependencyIndexes: file_dcontroller_proto_depIdxs,
		EnumInfos:         file_dcontroller_proto_enumTypes,
		MessageInfos:      file_dcontroller_proto_msgTypes,
	}.Build()
	File_dcontroller_proto = out.File
	file_dcontroller_proto_rawDesc = nil
	file_dcontroller_proto_goTypes = nil
	file_dcontroller_proto_depIdxs = nil
}
