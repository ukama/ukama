# NODE GRAPH

fragment node on Node {
  id
  name
  orgId
  type
  attached {
    id
    name
    orgId
    type
    site {
      nodeId
      siteId
      networkId
      addedAt
    }
    status {
      connectivity
      state
    }
  }
  site {
    nodeId
    siteId
    networkId
    addedAt
  }
  status {
    connectivity
    state
  }
}

query getNode($data: NodeInput!) {
  getNode(data: $data) {
    ...node
  }
}

query getNodes($data: GetNodesInput!) {
  getNodes(data: $data) {
    nodes {
      ...node
    }
  }
}

query getNodesByNetwork($networkId: String!) {
  getNodesByNetwork(networkId: $networkId) {
    nodes {
      ...node
    }
  }
}

mutation deleteNode($data: NodeInput!) {
  deleteNodeFromOrg(data: $data) {
    id
  }
}

mutation attachNode($data: AttachNodeInput!) {
  attachNode(data: $data) {
    success
  }
}

mutation detachhNode($data: NodeInput!) {
  detachhNode(data: $data) {
    success
  }
}

mutation addNode($data: AddNodeInput!) {
  addNode(data: $data) {
    ...node
  }
}

mutation releaseNodeFromSite($data: NodeInput!) {
  releaseNodeFromSite(data: $data) {
    success
  }
}

mutation addNodeToSite($data: AddNodeToSiteInput!) {
  addNodeToSite(data: $data) {
    success
  }
}

mutation updateNodeState($data: UpdateNodeStateInput!) {
  updateNodeState(data: $data) {
    ...node
  }
}

mutation UpdateNode($data: UpdateNodeInput!) {
  updateNode(data: $data) {
    ...node
  }
}

query getNodeApps($data: NodeAppsChangeLogInput!) {
  getNodeApps(data: $data) {
    apps {
      name
      date
      version
      cpu
      memory
      notes
    }
    type
  }
}

query GetNodesLocation($data: NodesInput!) {
  getNodesLocation(data: $data) {
    networkId
    nodes {
      id
      lat
      lng
      state
    }
  }
}

query GetNodeLocation($data: NodeInput!) {
  getNodeLocation(data: $data) {
    id
    lat
    lng
    state
  }
}
### End Node ###

### Member Start ###

fragment member on MemberDto {
  role
  orgId
  userId
  isDeactivated
  memberSince
}

query GetMembers {
  getMembers {
    members {
      ...member
    }
  }
}

query GetMember($memberId: String!) {
  getMember(id: $memberId) {
    ...member
  }
}

mutation addMember($data: AddMemberInputDto!) {
  addMember(data: $data) {
    ...member
  }
}

mutation removeMember($memberId: String!) {
  removeMember(id: $memberId) {
    success
  }
}

mutation updateMember($memberId: String!, $data: UpdateMemberInputDto!) {
  updateMember(memberId: $memberId, data: $data) {
    success
  }
}

### End Member ###

### Org Start ###

fragment Org on OrgDto {
  id
  name
  owner
  certificate
  isDeactivated
  createdAt
}

query getOrgs {
  getOrgs {
    user
    ownerOf {
      ...Org
    }
    memberOf {
      ...Org
    }
  }
}

query getOrg {
  getOrg {
    ...Org
  }
}
### Org End ###

### Package Start ###
fragment PackageRate on PackageDto {
  rate {
    sms_mo
    sms_mt
    data
    amount
  }
}
fragment PackageMarkup on PackageDto {
  markup {
    baserate
    markup
  }
}

fragment SimPackages on SimToPackagesDto {
  id
  package_id
  start_date
  end_date
  is_active
}

fragment Package on PackageDto {
  uuid
  name
  orgId
  active
  duration
  simType
  createdAt
  deletedAt
  updatedAt
  smsVolume
  dataVolume
  voiceVolume
  ulbr
  dlbr
  type
  dataUnit
  voiceUnit
  messageUnit
  flatrate
  currency
  from
  to
  country
  provider
  apn
  ownerId
  amount
  ...PackageRate
  ...PackageMarkup
}
query getPackages {
  getPackages {
    packages {
      ...Package
    }
  }
}
query getPackage($packageId: String!) {
  getPackage(packageId: $packageId) {
    ...Package
  }
}

query getPackages {
  getPackages {
    packages {
      ...Package
    }
  }
}
query getSimsBySubscriber($data: GetSimBySubscriberInputDto!) {
  getSimsBySubscriber(data: $data) {
    sims {
      ...SimPool
    }
  }
}

mutation addPackage($data: AddPackageInputDto!) {
  addPackage(data: $data) {
    ...Package
  }
}

mutation removePackageForSim($data: RemovePackageFormSimInputDto!) {
  removePackageForSim(data: $data) {
    packageId
  }
}

mutation deletePackage($packageId: String!) {
  deletePackage(packageId: $packageId) {
    uuid
  }
}
mutation addPackageToSim($data: AddPackageToSimInputDto!) {
  addPackageToSim(data: $data) {
    packageId
  }
}
mutation setActivePackageForSim($data: SetActivePackageForSimInputDto!) {
  setActivePackageForSim(data: $data) {
    packageId
  }
}
query getSimsBySubscriber($data: GetSimBySubscriberInputDto!) {
  getSimsBySubscriber(data: $data) {
    sims {
      ...SimPool
    }
  }
}
query getPackagesForSim($data: GetPackagesForSimInputDto!) {
  getPackagesForSim(data: $data) {
    sim_id
    packages {
      ...SimPackages
    }
  }
}
mutation deleteSim($data: DeleteSimInputDto!) {
  deleteSim(data: $data) {
    simId
  }
}

mutation updatePacakge($packageId: String!, $data: UpdatePackageInputDto!) {
  updatePackage(packageId: $packageId, data: $data) {
    ...Package
  }
}

### Package End ###

### SimPool Start ###
query getSimpoolStats($type: String!) {
  getSimPoolStats(type: $type) {
    total
    available
    consumed
    failed
    physical
    esim
  }
}
mutation uploadSims($data: UploadSimsInputDto!) {
  uploadSims(data: $data) {
    iccid
  }
}

fragment SimPool on SimDto {
  activationCode
  createdAt
  iccid
  id
  isAllocated
  isPhysical
  msisdn
  qrCode
  simType
  smapAddress
}
fragment SimAllocationPackage on SimAllocatePackageDto {
  id
  packageId
  startDate
  endDate
  isActive
}

fragment SimAllocation on AllocateSimAPIDto {
  id
  subscriber_id
  network_id
  org_id
  package {
    ...SimAllocationPackage
  }
  iccid
  msisdn
  imsi
  type
  status
  is_physical
  traffic_policy
  firstActivatedOn
  lastActivatedOn
  activationsCount
  deactivationsCount
  allocated_at
  sync_status
}
mutation allocateSim($data: AllocateSimInputDto!) {
  allocateSim(data: $data) {
    ...SimAllocation
  }
}

mutation toggleSimStatus($data: ToggleSimStatusInputDto!) {
  toggleSimStatus(data: $data) {
    simId
  }
}

query getSim($data: GetSimInputDto!) {
  getSim(data: $data) {
    ...SimPool
  }
}

query getSims($type: String!) {
  getSims(type: $type) {
    sim {
      ...SimPool
    }
  }
}

### SimPool End ###

### Subscriber Start ###

fragment SubscriberSim on SubscriberDto {
  sim {
    id
    subscriberId
    networkId
    orgId
    iccid
    msisdn
    imsi
    type
    status
    firstActivatedOn
    lastActivatedOn
    activationsCount
    deactivationsCount
    allocatedAt
    isPhysical
    package
  }
}

fragment Subscriber on SubscriberDto {
  uuid
  address
  dob
  email
  firstName
  lastName
  gender
  idSerial
  networkId
  orgId
  phone
  proofOfIdentification
  ...SubscriberSim
}

mutation addSubscriber($data: SubscriberInputDto!) {
  addSubscriber(data: $data) {
    ...Subscriber
  }
}

query getSubscriber($subscriberId: String!) {
  getSubscriber(subscriberId: $subscriberId) {
    ...Subscriber
  }
}

mutation updateSubscriber(
  $subscriberId: String!
  $data: UpdateSubscriberInputDto!
) {
  updateSubscriber(subscriberId: $subscriberId, data: $data) {
    success
  }
}

mutation deleteSubscriber($subscriberId: String!) {
  deleteSubscriber(subscriberId: $subscriberId) {
    success
  }
}

query getSubscribersByNetwork($networkId: String!) {
  getSubscribersByNetwork(networkId: $networkId) {
    subscribers {
      ...Subscriber
    }
  }
}

query getSubscriberMetricsByNetwork($networkId: String!) {
  getSubscriberMetricsByNetwork(networkId: $networkId) {
    total
    active
    inactive
    terminated
  }
}

### Subscriber End ###

### User Start ###

fragment User on UserResDto {
  name
  uuid
  email
  phone
  authId
  isDeactivated
  registeredSince
}

query Whoami {
  whoami {
    user {
      ...User
    }
    ownerOf {
      ...Org
    }
    memberOf {
      ...Org
    }
  }
}

query GetUser($userId: String!) {
  getUser(userId: $userId) {
    ...User
  }
}

### User End ###

### Networks Start ###

fragment UNetwork on NetworkDto {
  id
  name
  orgId
  isDeactivated
  createdAt
  countries
  networks
}

query getNetworks {
  getNetworks {
    orgId
    networks {
      ...UNetwork
    }
  }
}

query getSites($networkId: String!) {
  getSites(networkId: $networkId) {
    networkId
    sites {
      id
      name
      networkId
      isDeactivated
      createdAt
    }
  }
}

mutation AddNetwork($data: AddNetworkInputDto!) {
  addNetwork(data: $data) {
    ...UNetwork
  }
}



### Networks End ###

# PLANNING TOOL GRAPH
fragment location on Location {
  id
  lat
  lng
  address
}
fragment link on Link {
  id
  siteA
  siteB
}
fragment site on Site {
  id
  url
  east
  name
  west
  north
  south
  status
  height
  apOption
  isSetlite
  solarUptime
  populationUrl
  populationCovered
  totalBoxesCovered
  location {
    ...location
  }
}
fragment event on Event {
  id
  value
  operation
  createdAt
}
fragment draft on Draft {
  id
  name
  userId
  lastSaved
  links {
    ...link
  }
  sites {
    ...site
  }
  events {
    ...event
  }
}

mutation AddDraft($data: AddDraftInput!) {
  addDraft(data: $data) {
    ...draft
  }
}

mutation UpdateDraftName($draftId: String!, $name: String!) {
  updateDraftName(id: $draftId, name: $name) {
    ...draft
  }
}

query GetDrafts($userId: String!) {
  getDrafts(userId: $userId) {
    ...draft
  }
}

query GetDraft($draftId: String!) {
  getDraft(id: $draftId) {
    ...draft
  }
}

mutation addSite($draftId: String!, $data: SiteInput!) {
  addSite(draftId: $draftId, data: $data) {
    ...draft
  }
}

mutation UpdateSite($draftId: String!, $siteId: String!, $data: SiteInput!) {
  updateSite(draftId: $draftId, siteId: $siteId, data: $data) {
    ...draft
  }
}

mutation UpdateLocation(
  $draftId: String!
  $locationId: String!
  $data: LocationInput!
) {
  updateLocation(draftId: $draftId, locationId: $locationId, data: $data) {
    ...location
  }
}

mutation DeleteDraft($draftId: String!) {
  deleteDraft(id: $draftId) {
    id
  }
}

mutation DeleteSite($siteId: String!) {
  deleteSite(id: $siteId) {
    id
  }
}

mutation DeleteLink($lastSaved: Float!, $draftId: String!, $linkId: String!) {
  deleteLink(lastSaved: $lastSaved, draftId: $draftId, linkId: $linkId) {
    id
  }
}

mutation AddLink($data: LinkInput!, $draftId: String!) {
  addLink(data: $data, draftId: $draftId) {
    ...draft
  }
}

mutation Coverage($siteId: String!, $data: CoverageInput!) {
  coverage(data: $data, siteId: $siteId) {
    ...site
  }
}
