# NODE GRAPH

fragment node on Node {
  id
  name
  latitude
  longitude
  type
  attached {
    id
    name
    latitude
    longitude
    type
    site {
      nodeId
      siteId
      networkId
      addedAt
    }
    status {
      connectivity
      state
    }
  }
  site {
    nodeId
    siteId
    networkId
    addedAt
  }
  status {
    connectivity
    state
  }
}

query GetNode($data: NodeInput!) {
  getNode(data: $data) {
    ...node
  }
}

query GetNodes($data: NodesFilterInput!) {
  getNodes(data: $data) {
    nodes {
      ...node
    }
  }
}

mutation deleteNode($data: NodeInput!) {
  deleteNodeFromOrg(data: $data) {
    id
  }
}

mutation attachNode($data: AttachNodeInput!) {
  attachNode(data: $data) {
    success
  }
}

mutation detachhNode($data: NodeInput!) {
  detachhNode(data: $data) {
    success
  }
}

mutation addNode($data: AddNodeInput!) {
  addNode(data: $data) {
    ...node
  }
}

mutation releaseNodeFromSite($data: NodeInput!) {
  releaseNodeFromSite(data: $data) {
    success
  }
}

mutation addNodeToSite($data: AddNodeToSiteInput!) {
  addNodeToSite(data: $data) {
    success
  }
}

mutation updateNodeState($data: UpdateNodeStateInput!) {
  updateNodeState(data: $data) {
    ...node
  }
}

query getNodesForSite($siteId: String!) {
  getNodesForSite(siteId: $siteId) {
    nodes {
      ...node
    }
  }
}

mutation UpdateNode($data: UpdateNodeInput!) {
  updateNode(data: $data) {
    ...node
  }
}

query getNodeApps($data: NodeAppsChangeLogInput!) {
  getNodeApps(data: $data) {
    apps {
      name
      date
      version
      cpu
      memory
      notes
    }
    type
  }
}

query GetNodeState($getNodeStateId: String!) {
  getNodeState(id: $getNodeStateId) {
    id
    nodeId
    previousStateId
    previousState
    currentState
    createdAt
  }
}

mutation RestartNode($data: RestartNodeInputDto!) {
  restartNode(data: $data) {
    success
  }
}

mutation ToggleInternetSwitch($data: ToggleInternetSwitchInputDto!) {
  toggleInternetSwitch(data: $data) {
    success
  }
}

mutation ToggleRFStatus($data: ToggleRFStatusInputDto!) {
  toggleRFStatus(data: $data) {
    success
  }
}

### End Node ###

### Member Start ###

fragment member on MemberDto {
  role
  userId
  id: memberId
  isDeactivated
  memberSince
}

query GetMembers {
  getMembers {
    members {
      ...member
      name
      email
    }
  }
}

query GetMember($memberId: String!) {
  getMember(id: $memberId) {
    ...member
  }
}

mutation addMember($data: AddMemberInputDto!) {
  addMember(data: $data) {
    ...member
  }
}

mutation removeMember($memberId: String!) {
  removeMember(id: $memberId) {
    success
  }
}

mutation updateMember($memberId: String!, $data: UpdateMemberInputDto!) {
  updateMember(memberId: $memberId, data: $data) {
    success
  }
}

query GetMemberByUserId($userId: String!) {
  getMemberByUserId(userId: $userId) {
    userId
    name
    email
    memberId
    isDeactivated
    role
    memberSince
  }
}

### End Member ###

### Org Start ###

fragment Org on OrgDto {
  id
  name
  owner
  country
  currency
  createdAt
  certificate
  isDeactivated
}

query getOrgs {
  getOrgs {
    user
    ownerOf {
      ...Org
    }
    memberOf {
      ...Org
    }
  }
}

query getOrg {
  getOrg {
    ...Org
  }
}
### Org End ###

### Package Start ###
fragment PackageRate on PackageDto {
  rate {
    sms_mo
    sms_mt
    data
    amount
  }
}
fragment PackageMarkup on PackageDto {
  markup {
    baserate
    markup
  }
}

fragment SimPackages on SimToPackagesDto {
  id
  package_id
  start_date
  end_date
  is_active
}
fragment SubscriberSims on SubscriberToSimsDto {
  subscriberId
  sims {
    id
    subscriberId
    networkId
    iccid
    msisdn
    imsi
    type
    status
    allocatedAt
    isPhysical
  }
}

fragment Package on PackageDto {
  uuid
  name
  active
  duration
  simType
  createdAt
  deletedAt
  updatedAt
  smsVolume
  dataVolume
  voiceVolume
  ulbr
  dlbr
  type
  dataUnit
  voiceUnit
  messageUnit
  flatrate
  currency
  from
  to
  country
  provider
  apn
  ownerId
  amount
  ...PackageRate
  ...PackageMarkup
}
query getPackages {
  getPackages {
    packages {
      ...Package
    }
  }
}
query getPackage($packageId: String!) {
  getPackage(packageId: $packageId) {
    ...Package
  }
}

query getPackages {
  getPackages {
    packages {
      ...Package
    }
  }
}
query getSimsBySubscriber($data: GetSimBySubscriberInputDto!) {
  getSimsBySubscriber(data: $data) {
    ...SubscriberSims
  }
}

mutation addPackage($data: AddPackageInputDto!) {
  addPackage(data: $data) {
    ...Package
  }
}

mutation removePackageForSim($data: RemovePackageFormSimInputDto!) {
  removePackageForSim(data: $data) {
    packageId
  }
}

mutation deletePackage($packageId: String!) {
  deletePackage(packageId: $packageId) {
    uuid
  }
}
query getPackagesForSim($data: GetPackagesForSimInputDto!) {
  getPackagesForSim(data: $data) {
    sim_id
    packages {
      ...SimPackages
    }
  }
}

mutation addPackagesToSim($data: AddPackagesToSimInputDto!) {
  addPackagesToSim(data: $data) {
    packages {
      packageId
    }
  }
}

mutation deleteSim($data: DeleteSimInputDto!) {
  deleteSim(data: $data) {
    simId
  }
}

mutation updatePacakge($packageId: String!, $data: UpdatePackageInputDto!) {
  updatePackage(packageId: $packageId, data: $data) {
    ...Package
  }
}

### Package End ###
### Payment start ###

fragment payment on PaymentDto {
  id
  itemId
  itemType
  amount
  currency
  paymentMethod
  depositedAmount
  paidAt
  payerName
  payerEmail
  payerPhone
  correspondent
  country
  description
  status
  failureReason
  extra
  createdAt
}

mutation UpdatePayment($data: UpdatePaymentInputDto!) {
  updatePayment(data: $data) {
    id
    itemId
    itemType
    amount
    currency
    paymentMethod
    depositedAmount
    paidAt
    payerName
    payerEmail
    payerPhone
    correspondent
    country
    description
    status
    failureReason
    createdAt
  }
}
mutation ProcessPayment($data: ProcessPaymentInputDto!) {
  processPayment(data: $data) {
    payment {
      id
      itemId
      itemType
      amount
      currency
      paymentMethod
      depositedAmount
      paidAt
      payerName
      payerEmail
      payerPhone
      correspondent
      country
      description
      status
      failureReason
      createdAt
    }
  }
}
query GetPayment($paymentId: String!) {
  getPayment(paymentId: $paymentId) {
    ...payment
  }
}

query GetPayments($data: GetPaymentsInputDto!) {
  getPayments(data: $data) {
    payments {
      ...payment
    }
  }
}

### Payment end ###
### Billing start ###
# Fragments for reusable parts
fragment customer on CustomerDto {
  externalId
  name
  email
  addressLine1
  legalName
  legalNumber
  phone
  currency
  timezone
  vatRate
  createdAt
}

fragment subscription on SubscriptionDto {
  externalCustomerId
  externalId
  planCode
  name
  status
  createdAt
  startedAt
  canceledAt
  terminatedAt
}

fragment fee on FeeDto {
  taxesAmountCents
  taxesPreciseAmount
  totalAmountCents
  totalAmountCurrency
  eventsCount
  units
  item {
    type
    code
    name
  }
}

fragment rawReport on RawReportDto {
  issuingDate
  paymentDueDate
  paymentOverdue
  invoiceType
  status
  paymentStatus
  feesAmountCents
  taxesAmountCents
  subTotalExcludingTaxesAmountCents
  subTotalIncludingTaxesAmountCents
  vatAmountCents
  vatAmountCurrency
  totalAmountCents
  currency
  fileUrl
  customer {
    ...customer
  }
  subscriptions {
    ...subscription
  }
  fees {
    ...fee
  }
}

query GetReports($data: GetReportsInputDto!) {
  getReports(data: $data) {
    reports {
      id
      ownerId
      ownerType
      networkId
      period
      type
      rawReport {
        ...rawReport
      }
      isPaid
      createdAt
    }
  }
}

query GetReport($id: String!) {
  getReport(id: $id) {
    report {
      id
      ownerId
      ownerType
      networkId
      period
      type
      rawReport {
        ...rawReport
      }
      isPaid
      createdAt
    }
  }
}
### Billing end ###

### SimPool Start ###
query GetSimPoolStats($data: GetSimPoolStatsInput!) {
  getSimPoolStats(data: $data) {
    total
    available
    consumed
    failed
    esim
    physical
  }
}
mutation uploadSims($data: UploadSimsInputDto!) {
  uploadSims(data: $data) {
    iccid
  }
}

fragment SimPool on SimDto {
  activationCode
  createdAt
  iccid
  id
  isAllocated
  isPhysical
  msisdn
  qrCode
  simType
  smapAddress
}
fragment SimAllocationPackage on SimAllocatePackageDto {
  id
  packageId
  startDate
  endDate
  isActive
}

fragment SimAllocation on AllocateSimAPIDto {
  id
  subscriber_id
  network_id
  package {
    ...SimAllocationPackage
  }
  iccid
  msisdn
  imsi
  type
  status
  is_physical
  traffic_policy
  allocated_at
  sync_status
}
mutation allocateSim($data: AllocateSimInputDto!) {
  allocateSim(data: $data) {
    ...SimAllocation
  }
}

mutation toggleSimStatus($data: ToggleSimStatusInputDto!) {
  toggleSimStatus(data: $data) {
    simId
  }
}

query getSim($data: GetSimInputDto!) {
  getSim(data: $data) {
    ...SimPool
  }
}

query GetSims($data: GetSimsInput!) {
  getSims(data: $data) {
    sim {
      ...SimPool
    }
  }
}

### SimPool End ###

### Subscriber Start ###

fragment SubscriberSim on SubscriberDto {
  sim {
    id
    subscriberId
    networkId
    iccid
    msisdn
    imsi
    type
    status
    allocatedAt
    sync_status
    isPhysical
    package {
      id
      package_id
      start_date
      end_date
      is_active
      created_at
      updated_at
    }
  }
}

fragment Subscriber on SubscriberDto {
  uuid
  address
  dob
  email
  name
  gender
  idSerial
  networkId
  phone
  proofOfIdentification
  ...SubscriberSim
}

mutation addSubscriber($data: SubscriberInputDto!) {
  addSubscriber(data: $data) {
    ...Subscriber
  }
}

query getSubscriber($subscriberId: String!) {
  getSubscriber(subscriberId: $subscriberId) {
    ...Subscriber
  }
}

mutation updateSubscriber(
  $subscriberId: String!
  $data: UpdateSubscriberInputDto!
) {
  updateSubscriber(subscriberId: $subscriberId, data: $data) {
    success
  }
}

mutation deleteSubscriber($subscriberId: String!) {
  deleteSubscriber(subscriberId: $subscriberId) {
    success
  }
}

query getSubscribersByNetwork($networkId: String!) {
  getSubscribersByNetwork(networkId: $networkId) {
    subscribers {
      ...Subscriber
    }
  }
}

query getSubscriberMetricsByNetwork($networkId: String!) {
  getSubscriberMetricsByNetwork(networkId: $networkId) {
    total
    active
    inactive
    terminated
  }
}

### Subscriber End ###

### Report gen Start ###
query getGeneratedPdfReport($Id: String!) {
  getGeneratedPdfReport(id: $Id) {
    contentType
    filename
    downloadUrl
  }
}

### User Start ###

fragment User on UserResDto {
  name
  uuid
  email
  phone
  authId
  isDeactivated
  registeredSince
}

query Whoami {
  whoami {
    user {
      ...User
    }
    ownerOf {
      ...Org
    }
    memberOf {
      ...Org
    }
  }
}

query GetUser($userId: String!) {
  getUser(userId: $userId) {
    ...User
  }
}

### User End ###

### Networks Start ###

fragment UNetwork on NetworkDto {
  id
  name
  isDefault
  budget
  overdraft
  trafficPolicy
  isDeactivated
  paymentLinks
  createdAt
  countries
  networks
}

query getNetworks {
  getNetworks {
    networks {
      ...UNetwork
    }
  }
}

query getNetwork($networkId: String!) {
  getNetwork(networkId: $networkId) {
    ...UNetwork
  }
}

mutation AddNetwork($data: AddNetworkInputDto!) {
  addNetwork(data: $data) {
    ...UNetwork
  }
}

mutation SetDefaultNetwork($data: SetDefaultNetworkInputDto!) {
  setDefaultNetwork(data: $data) {
    success
  }
}

### Networks End ###

### Site Start ###
fragment USite on SiteDto {
  id
  name
  networkId
  backhaulId
  powerId
  accessId
  spectrumId
  switchId
  isDeactivated
  latitude
  longitude
  installDate
  createdAt
  location
}

query getSite($siteId: String!) {
  getSite(siteId: $siteId) {
    ...USite
  }
}
mutation addSite($data: AddSiteInputDto!) {
  addSite(data: $data) {
    ...USite
  }
}

query GetSites($data: SitesInputDto!) {
  getSites(data: $data) {
    sites {
      ...USite
    }
  }
}

mutation updateSite($siteId: String!, $data: UpdateSiteInputDto!) {
  updateSite(siteId: $siteId, data: $data) {
    name
  }
}

### Site End ###

### Component Start ###

fragment UComponent on ComponentDto {
  id
  inventoryId
  type
  userId
  description
  category
  datasheetUrl
  imageUrl
  partNumber
  manufacturer
  managed
  warranty
  specification
}

query getComponentById($componentId: String!) {
  getComponentById(componentId: $componentId) {
    ...UComponent
  }
}

query GetComponentsByUserId($data: ComponentTypeInputDto!) {
  getComponentsByUserId(data: $data) {
    components {
      ...UComponent
    }
  }
}

### Component End ###

# PLANNING TOOL GRAPH
# fragment location on Location {
#   id
#   lat
#   lng
#   address
# }
# fragment link on Link {
#   id
#   siteA
#   siteB
# }
# fragment site on Site {
#   id
#   url
#   east
#   name
#   west
#   north
#   south
#   status
#   height
#   apOption
#   isSetlite
#   solarUptime
#   populationUrl
#   populationCovered
#   totalBoxesCovered
#   location {
#     ...location
#   }
# }
# fragment event on Event {
#   id
#   value
#   operation
#   createdAt
# }
# fragment draft on Draft {
#   id
#   name
#   userId
#   lastSaved
#   links {
#     ...link
#   }
#   sites {
#     ...site
#   }
#   events {
#     ...event
#   }
# }

# mutation AddDraft($data: AddDraftInput!) {
#   addDraft(data: $data) {
#     ...draft
#   }
# }

# mutation UpdateDraftName($draftId: String!, $name: String!) {
#   updateDraftName(id: $draftId, name: $name) {
#     ...draft
#   }
# }

# query GetDrafts($userId: String!) {
#   getDrafts(userId: $userId) {
#     ...draft
#   }
# }

# query GetDraft($draftId: String!) {
#   getDraft(id: $draftId) {
#     ...draft
#   }
# }

# mutation addSite($draftId: String!, $data: SiteInput!) {
#   addSite(draftId: $draftId, data: $data) {
#     ...draft
#   }
# }

# mutation UpdateSite($draftId: String!, $siteId: String!, $data: SiteInput!) {
#   updateSite(draftId: $draftId, siteId: $siteId, data: $data) {
#     ...draft
#   }
# }

# mutation UpdateLocation(
#   $draftId: String!
#   $locationId: String!
#   $data: LocationInput!
# ) {
#   updateLocation(draftId: $draftId, locationId: $locationId, data: $data) {
#     ...location
#   }
# }

# mutation DeleteDraft($draftId: String!) {
#   deleteDraft(id: $draftId) {
#     id
#   }
# }

# mutation DeleteSite($siteId: String!) {
#   deleteSite(id: $siteId) {
#     id
#   }
# }

# mutation DeleteLink($lastSaved: Float!, $draftId: String!, $linkId: String!) {
#   deleteLink(lastSaved: $lastSaved, draftId: $draftId, linkId: $linkId) {
#     id
#   }
# }

# mutation AddLink($data: LinkInput!, $draftId: String!) {
#   addLink(data: $data, draftId: $draftId) {
#     ...draft
#   }
# }

# mutation Coverage($siteId: String!, $data: CoverageInput!) {
#   coverage(data: $data, siteId: $siteId) {
#     ...site
#   }
# }

### End Planning Tool ###

### Start Invitation ###

fragment Invitation on InvitationDto {
  email
  expireAt
  id
  name
  role
  link
  userId
  status
}

mutation CreateInvitation($data: CreateInvitationInputDto!) {
  createInvitation(data: $data) {
    ...Invitation
  }
}

query GetInvitations {
  getInvitations {
    invitations {
      ...Invitation
    }
  }
}

mutation DeleteInvitation($deleteInvitationId: String!) {
  deleteInvitation(id: $deleteInvitationId) {
    id
  }
}

mutation UpdateInvitation($data: UpateInvitationInputDto!) {
  updateInvitation(data: $data) {
    id
  }
}

query GetInvitationsByEmail($email: String!) {
  getInvitationsByEmail(email: $email) {
    invitations {
      ...Invitation
    }
  }
}

### End Invitation ###

### Common Data ###

query GetCountries {
  getCountries {
    countries {
      name
      code
    }
  }
}

query GetCurrencySymbol($code: String!) {
  getCurrencySymbol(code: $code) {
    code
    symbol
    image
  }
}

query GetTimezones {
  getTimezones {
    timezones {
      value
      abbr
      offset
      isdst
      text
      utc
    }
  }
}

### End Common Data ###

# Notifications
mutation UpdateNotification($isRead: Boolean!, $updateNotificationId: String!) {
  updateNotification(isRead: $isRead, id: $updateNotificationId) {
    id
  }
}

### End Notifications ###

# Sims usage
query GetDataUsages($data: SimUsagesInputDto!) {
  getDataUsages(data: $data) {
    usages {
      usage
      simId
    }
  }
}

##
