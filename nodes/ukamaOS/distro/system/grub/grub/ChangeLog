2019-07-04  Daniel Kiper  <daniel.kiper@oracle.com>

	Release 2.04

2019-06-24  Thomas Schmitt  <scdbackup@gmx.net>

	docs: Document workaround for grub-mkrescue with older MacBooks
	Add a description of the workaround for firmware of older MacBooks
	which stalls with a grub-mkrescue ISO image for x86_64-efi target
	on an USB stick.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-24  Eric Snowberg  <eric.snowberg@oracle.com>

	docs: Bootstrap changes required for older distros
	Some older distros do not contain gettext 0.18. Document the workaround
	to use the bootstrap utility on these systems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-07  Leif Lindholm  <leif.lindholm@linaro.org>

	ia64: build fix in cache.h
	Add IA64 to the architectures excluding a declaration for
	grub_arch_sync_dma_caches().

	IA64 does not include any of the source files that require the function,
	but was overlooked for d8901e3ba115 ("cache: Fix compilation for ppc,
	sparc and arm64").

	Add it to the list of excluding architectures in order to not get
	missing symbol errors when running grub-mkimage.

	Reported-by: Alexander Graf <agraf@csgraf.de>
	Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-07  Vladimir 'phcoder' Serbinenko  <phcoder@gmail.com>

	hostfs: #undef open and close.
	Unlike in case of disks in this case it's just a single place, so it's easier
	to just #undef

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-03  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	f2fs: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the grub_f2fs_label
	function since the result is found to be false postive.

	A pointer to the 'volume_name' member of 'struct grub_f2fs_superblock' is
	guaranteed to be aligned as the offset of 'volume_name' within the struct
	is dividable by the natural alignment on both 32- and 64-bit targets.

	grub-core/fs/f2fs.c: In function ‘grub_f2fs_label’:
	grub-core/fs/f2fs.c:1253:60: error: taking address of packed member of ‘struct grub_f2fs_superblock’ may result in an unaligned pointer value [-Werror=address-of-packed-member]
	 1253 |     *label = (char *) grub_f2fs_utf16_to_utf8 (data->sblock.volume_name);
	      |                                                ~~~~~~~~~~~~^~~~~~~~~~~~
	cc1: all warnings being treated as errors

	Reported-by: Neil MacLeod <neil@nmacleod.com>
	Tested-by: Neil MacLeod <neil@nmacleod.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Vincent Legoll  <vincent.legoll@gmail.com>

	grub-mkrescue: Fix error message about the wrong command having failed: mformat instead of mcopy
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Mathieu Trudel-Lapierre  <mathieu.tl@gmail.com>

	video: skip 'text' gfxpayload if not supported, to fallback to default
	On UEFI, 'text' gfxpayload is not supported, but we still reach parse_modespec()
	with it, which will obviously fail. Fortunately, whatever gfxpayload is set,
	we still still have the 'auto' default to fall back to. Allow getting to this
	fallback by not trying to parse 'text' as a modespec.

	This is because 'text' correctly doesn't parse as a modespec, and ought to have
	been ignored before we got to that point, just like it is immediately picked if
	we're running on a system where 'text' is a supported video mode.

	Bug: https://savannah.gnu.org/bugs/index.php?56217

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Ovidiu Panait  <ovidiu.panait@windriver.com>

	grub-mkconfig: Use -c instead of --printf for stat
	"--printf" only works with the stat variant provided by coreutils.

	With busybox, stat will fail with the following error:
	stat: unrecognized option '--printf=%T'

	Usage: stat [OPTIONS] FILE...

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Michael Chang  <mchang@suse.com>

	f2fs: Fix gcc9 error -Werror=maybe-uninitialized
	The function grub_get_node_path() could return uninitialized offset with
	level == 0 if the block is greater than direct_index + 2 * direct_blks +
	2 * indirect_blks + dindirect_blks. The uninitialized offset is then used
	by function grub_f2fs_get_block() because level == 0 is valid and
	meaningful return to be processed.

	The fix is to set level = -1 as return value by grub_get_node_path() to
	signify an error that the input block cannot be handled. Any caller
	should therefore check level is negative or not before processing the
	output.

	Reported-by: Neil MacLeod <neil@nmacleod.com>
	Tested-by: Neil MacLeod <neil@nmacleod.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-06  Alexander Graf  <agraf@csgraf.de>

	arm: Align section alignment with manual relocation offset code
	The arm relocation code has a manual special case for EFI binaries to
	add the natural alignment to its own relocation awareness.

	Since commit a51f953f4ee87 ("mkimage: Align efi sections on 4k
	boundary") we changed that alignment from 0x400 to 0x1000 bytes. Reflect
	the change in that branch that we forgot as well.

	This fixes running 32bit arm grub efi binaries for me again.

	Fixes: a51f953f4ee87 ("mkimage: Align efi sections on 4k boundary")
	Reported-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
	Reported-by: Steve McIntyre <steve@einval.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>
	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Tested-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-06  Alexander Graf  <agraf@csgraf.de>

	arm: Move trampolines into code section
	When creating T32->A32 transition jumps, the relocation code in grub
	will generate trampolines. These trampolines live in the .data section
	of our PE binary which means they are not marked as executable.

	This misbehavior was unmasked by commit a51f953f4ee87 ("mkimage: Align
	efi sections on 4k boundary") which made the X/NX boundary more obvious
	because everything became page aligned.

	To put things into proper order, let's move the arm trampolines into the
	.text section instead. That way everyone knows they are executable.

	Fixes: a51f953f4ee87 ("mkimage: Align efi sections on 4k boundary")
	Reported-by: Julien ROBIN <julien.robin28@free.fr>
	Reported-by: Leif Lindholm <leif.lindholm@linaro.org>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>
	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Tested-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	efi: Fix gcc9 error -Waddress-of-packed-member
	The address of fp->path_name could be unaligned since seeking into the
	device path buffer for a given node could end in byte boundary.

	The fix is allocating aligned buffer by grub_malloc for holding the
	UTF16 string copied from fp->path_name, and after using that buffer as
	argument for grub_utf16_to_utf8 to convert it to UTF8 string.

	[  255s] ../../grub-core/kern/efi/efi.c: In function 'grub_efi_get_filename':
	[  255s] ../../grub-core/kern/efi/efi.c:410:60: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  255s]   410 |    p = (char *) grub_utf16_to_utf8 ((unsigned char *) p, fp->path_name, len);
	[  255s]       |                                                          ~~^~~~~~~~~~~
	[  255s] ../../grub-core/kern/efi/efi.c: In function 'grub_efi_print_device_path':
	[  255s] ../../grub-core/kern/efi/efi.c:900:33: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  255s]   900 |     *grub_utf16_to_utf8 (buf, fp->path_name,
	[  255s]       |                               ~~^~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	chainloader: Fix gcc9 error -Waddress-of-packed-member
	The address of fp->path_name could be unaligned since seeking into the
	device path buffer for a given node could end in byte boundary.

	The fix is using aligned buffer allocated by grub_malloc for receiving
	the converted UTF16 string by grub_utf8_to_utf16 and also the processing
	after. The resulting string then gets copied to fp->path_name.

	[  243s] ../../grub-core/loader/efi/chainloader.c: In function 'copy_file_path':
	[  243s] ../../grub-core/loader/efi/chainloader.c:136:32: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  243s]   136 |   size = grub_utf8_to_utf16 (fp->path_name, len * GRUB_MAX_UTF16_PER_UTF8,
	[  243s]       |                              ~~^~~~~~~~~~~
	[  243s] ../../grub-core/loader/efi/chainloader.c:138:12: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  243s]   138 |   for (p = fp->path_name; p < fp->path_name + size; p++)
	[  243s]       |            ^~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	usbtest: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the
	grub_usb_get_string function since the result is false postive. The
	descstrp->str is found to be aligned in the buffer allocated for 'struct
	grub_usb_desc_str'.

	[  229s] ../../grub-core/commands/usbtest.c: In function 'grub_usb_get_string':
	[  229s] ../../grub-core/commands/usbtest.c:104:58: error: taking address of packed member of 'struct grub_usb_desc_str' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  229s]   104 |   *grub_utf16_to_utf8 ((grub_uint8_t *) *string, descstrp->str,
	[  229s]       |                                                  ~~~~~~~~^~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	acpi: Fix gcc9 error -Waddress-of-packed-member
	Simply adds the missing packed attribute to 'struct grub_acpi_madt'.

	[  233s] ../../grub-core/commands/lsacpi.c: In function 'disp_acpi_xsdt_table':
	[  233s] ../../grub-core/commands/lsacpi.c:201:27: error: converting a packed 'struct grub_acpi_table_header' pointer (alignment 1) to a 'struct grub_acpi_madt' pointer (alignment 4) may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  233s]   201 |  disp_madt_table ((struct grub_acpi_madt *) t);
	[  233s]       |                           ^~~~~~~~~~~~~~
	[  233s] In file included from ../../grub-core/commands/lsacpi.c:23:
	[  233s] ../../include/grub/acpi.h:50:8: note: defined here
	[  233s]    50 | struct grub_acpi_table_header
	[  233s]       |        ^~~~~~~~~~~~~~~~~~~~~~
	[  233s] ../../include/grub/acpi.h:90:8: note: defined here
	[  233s]    90 | struct grub_acpi_madt
	[  233s]       |        ^~~~~~~~~~~~~~
	[  233s] ../../grub-core/commands/lsacpi.c: In function 'disp_acpi_rsdt_table':
	[  233s] ../../grub-core/commands/lsacpi.c:225:27: error: converting a packed 'struct grub_acpi_table_header' pointer (alignment 1) to a 'struct grub_acpi_madt' pointer (alignment 4) may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  233s]   225 |  disp_madt_table ((struct grub_acpi_madt *) t);
	[  233s]       |                           ^~~~~~~~~~~~~~
	[  233s] In file included from ../../grub-core/commands/lsacpi.c:23:
	[  233s] ../../include/grub/acpi.h:50:8: note: defined here
	[  233s]    50 | struct grub_acpi_table_header
	[  233s]       |        ^~~~~~~~~~~~~~~~~~~~~~
	[  233s] ../../include/grub/acpi.h:90:8: note: defined here
	[  233s]    90 | struct grub_acpi_madt
	[  233s]       |        ^~~~~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	hfsplus: Fix gcc9 error with -Waddress-of-packed-member
	The catkey->name could be unaligned since the address of 'void* record'
	is calculated as offset in bytes to a malloc buffer.

	The fix is using aligned buffer allocated by grub_malloc for holding
	the UTF16 string copied from catkey->name. And use that buffer as
	argument for grub_utf16_to_utf8 to convert to UTF8 strings.

	In addition, using a new copy of buffer rather than catkey->name itself
	for processing the endianess conversion, we can also get rid of the hunk
	restoring byte order of catkey->name to what it was previously.

	[   59s] ../grub-core/fs/hfsplus.c: In function 'list_nodes':
	[   59s] ../grub-core/fs/hfsplus.c:738:57: error: taking address of packed member of 'struct grub_hfsplus_catkey' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]   738 |   *grub_utf16_to_utf8 ((grub_uint8_t *) filename, catkey->name,
	[   59s]       |                                                   ~~~~~~^~~~~~
	[   59s] ../grub-core/fs/hfsplus.c: In function 'grub_hfsplus_label':
	[   59s] ../grub-core/fs/hfsplus.c:1019:57: error: taking address of packed member of 'struct grub_hfsplus_catkey' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]  1019 |   *grub_utf16_to_utf8 ((grub_uint8_t *) (*label), catkey->name,
	[   59s]       |                                                   ~~~~~~^~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	hfs: Fix gcc9 error -Waddress-of-packed-member
	Simply adds the missing packed attribute to 'struct grub_hfs_extent'.

	[   83s] ../grub-core/fs/hfs.c: In function 'grub_hfs_iterate_records':
	[   83s] ../grub-core/fs/hfs.c:699:9: error: taking address of packed member of 'struct grub_hfs_sblock' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   83s]   699 |      ? (&data->sblock.catalog_recs)
	[   83s]       |        ~^~~~~~~~~~~~~~~~~~~~~~~~~~~
	[   83s] ../grub-core/fs/hfs.c:700:9: error: taking address of packed member of 'struct grub_hfs_sblock' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   83s]   700 |      : (&data->sblock.extent_recs));
	[   83s]       |        ~^~~~~~~~~~~~~~~~~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	jfs: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the
	grub_jfs_getent function since the result is found to be false postive.

	The leaf is read into memory as continous chunks in size of 32 bytes and
	the pointer to its base is aligned, which also guarentee its member
	leaf->namepart is aligned.

	[   60s] ../grub-core/fs/jfs.c: In function 'grub_jfs_getent':
	[   60s] ../grub-core/fs/jfs.c:557:44: error: taking address of packed member of 'struct grub_jfs_leaf_dirent' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   60s]   557 |   le_to_cpu16_copy (filename + strpos, leaf->namepart, len < diro->data->namecomponentlen ? len
	[   60s]       |                                        ~~~~^~~~~~~~~~
	[   60s] ../grub-core/fs/jfs.c:570:48: error: taking address of packed member of 'struct grub_jfs_leaf_next_dirent' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   60s]   570 |  le_to_cpu16_copy (filename + strpos, next_leaf->namepart, len < 15 ? len : 15);
	[   60s]       |                                       ~~~~~~~~~^~~~~~~~~~
	[   60s] cc1: all warnings being treated as errors

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	cpio: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the
	grub_cpio_find_file function since the result is found to be false
	postive. Any pointers to member of the 'struct head hd' is aligned even
	if the structure is packed without paddings.

	[   59s] In file included from ../grub-core/fs/cpio.c:51:
	[   59s] ../grub-core/fs/cpio_common.c: In function 'grub_cpio_find_file':
	[   59s] ../grub-core/fs/cpio_common.c:58:31: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    58 |   data->size = read_number (hd.filesize, ARRAY_SIZE (hd.filesize));
	[   59s]       |                             ~~^~~~~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:60:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    60 |     *mtime = read_number (hd.mtime, ARRAY_SIZE (hd.mtime));
	[   59s]       |                           ~~^~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:61:28: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    61 |   modeval = read_number (hd.mode, ARRAY_SIZE (hd.mode));
	[   59s]       |                          ~~^~~~~
	[   59s] ../grub-core/fs/cpio_common.c:62:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    62 |   namesize = read_number (hd.namesize, ARRAY_SIZE (hd.namesize));
	[   59s]       |                           ~~^~~~~~~~~
	[   59s] In file included from ../grub-core/fs/cpio_be.c:51:
	[   59s] ../grub-core/fs/cpio_common.c: In function 'grub_cpio_find_file':
	[   59s] ../grub-core/fs/cpio_common.c:58:31: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    58 |   data->size = read_number (hd.filesize, ARRAY_SIZE (hd.filesize));
	[   59s]       |                             ~~^~~~~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:60:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    60 |     *mtime = read_number (hd.mtime, ARRAY_SIZE (hd.mtime));
	[   59s]       |                           ~~^~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:61:28: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    61 |   modeval = read_number (hd.mode, ARRAY_SIZE (hd.mode));
	[   59s]       |                          ~~^~~~~
	[   59s] ../grub-core/fs/cpio_common.c:62:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    62 |   namesize = read_number (hd.namesize, ARRAY_SIZE (hd.namesize));
	[   59s]       |                           ~~^~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	efi: Avoid NULL dereference if FilePath is NULL
	The UEFI specification allows LoadImage() to be called with a memory
	location only and without a device path. In this case FilePath will not be
	set in the EFI_LOADED_IMAGE_PROTOCOL.

	So in function grub_efi_get_filename() the device path argument may be
	NULL. As we cannot determine the device path in this case just return NULL
	from the function.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Daniel Kiper  <daniel.kiper@oracle.com>

	x86/msr: Fix build with older GCC versions
	Some older GCC versions produce following error when x86 MSR modules are build:

	  In file included from commands/i386/rdmsr.c:29:0:
	  ../include/grub/i386/rdmsr.h:27:29: error: no previous prototype for ‘grub_msr_read’ [-Werror=missing-prototypes]
	   extern inline grub_uint64_t grub_msr_read (grub_uint32_t msr_id)
	                               ^
	  cc1: all warnings being treated as errors

	This happens due to lack of support for a such usage of extern keyword
	in older GCCs. Additionally, this usage is not consistent with the rest
	of codebase. So, replace it with static keyword.

	Additionally, fix incorrect coding style.

	Reported-by: Eric Snowberg <eric.snowberg@oracle.com>
	Reported-by: adrian15 <adrian15sgd@gmail.com>
	Reviewed-by: Vladimir 'phcoder' Serbinenko <phcoder@gmail.com>
	Reviewed-by: Eric Snowberg <eric.snowberg@oracle.com>
	Tested-by: adrian15 <adrian15sgd@gmail.com>

2019-04-09  Vladimir Serbinenko  <phcoder@gmail.com>

	Release 2.04~rc1

2019-04-09  Vladimir Serbinenko  <phcoder@gmail.com>

	Change fs functions to add fs_ prefix
	This avoid conflict with gnulib

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-08  Vladimir Serbinenko  <phcoder@google.com>

	A workaround for clang problem assembling startup_raw.S
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-04  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: NULL pointer dereference in grub_ieee1275_encode_devname()
	Function grub_strndup() may return NULL, this is called from
	function grub_ieee1275_get_devname() which is then called from
	function grub_ieee1275_encode_devname() to set device. The device
	variable could then be used with a NULL pointer.

	Reviewed-by: Colin Watson <cjwatson@ubuntu.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Daniel Kiper  <daniel.kiper@oracle.com>

	docs/grub-dev: Change comments rules
	Current comments forms are annoying, so, some of them are disallowed
	starting from now. New rules are more flexible and mostly aligned
	with, e.g., Linux kernel comments rules.

	Reviewed-by: Vladimir Serbinenko <phcoder@google.com>

2019-04-02  Andrew Jeddeloh  <andrew.jeddeloh@coreos.com>

	loader/i386/linux: Calculate the setup_header length
	Previously the setup_header length was just assumed to be the size of the
	linux_kernel_params struct. The linux x86 32-bit boot protocol says that the
	end of the linux_i386_kernel_header is at 0x202 + the byte value at 0x201 in
	the linux_i386_kernel_header. So, calculate the size of the header using the
	end of the linux_i386_kernel_header, rather than assume it is the size of the
	linux_kernel_params struct.

	Additionally, add some required members to the linux_kernel_params
	struct and align the content of linux_i386_kernel_header struct with
	it. New members naming was taken directly from Linux kernel source.

	linux_kernel_params and linux_i386_kernel_header structs require more
	cleanup. However, this is not urgent, so, let's do this after release.
	Just in case...

	Reviewed-by: Vladimir Serbinenko <phcoder@google.com>
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-04-02  Eric Snowberg  <eric.snowberg@oracle.com>

	efidisk: NULL pointer dereference in grub_efidisk_get_device_name()
	Function grub_efi_find_last_device_path() may return NULL when called
	from grub_efidisk_get_device_name().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Eric Snowberg  <eric.snowberg@oracle.com>

	efidisk: NULL pointer dereference in is_child()
	Function grub_efi_find_last_device() path may return NULL when called
	from is_child().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Eric Snowberg  <eric.snowberg@oracle.com>

	efidisk: Write to NULL pointer ldp
	Function grub_efi_find_last_device_path() may return constant NULL when
	called from find_parent_device().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Vladimir Serbinenko  <phcoder@google.com>

	clang: Pair -Qn with -Qunused-arguments.
	When assembling module wirh clang -Qn ends up on command line but later ignored
	To avoid it breaking the compile, add -Qunused-arguments.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-28  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	ieee1275: Fix path reference in comment of sparc64 boot loader code
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-28  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	ieee1275: Include a.out header in assembly of sparc64 boot loader
	Recent versions of binutils dropped support for the a.out and COFF
	formats on sparc64 targets. Since the boot loader on sparc64 is
	supposed to be an a.out binary and the a.out header entries are
	rather simple to calculate in our case, we just write the header
	ourselves instead of relying on external tools to do that.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-26  Vladimir Serbinenko  <phcoder@gmail.com>

	Propagate GNU_PRINTF from gnulib vfprintf
	gnulib now replaces vfprintf and hence its format becomes GNU_PRINTF format

	This also fixes matching definitions to always use GNU format

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-26  Vladimir Serbinenko  <phcoder@gmail.com>

	efi/tpm.c: Add missing casts
	Without those casts we get a warning about implicit conversion of pointer
	to integer.

2019-03-26  Vladimir Serbinenko  <phcoder@gmail.com>

	POTFILES: Don't include gnulib in grub.pot
	They're translated as a separate project, so we
	don't want to submit them again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-26  Vladimir Serbinenko  <phcoder@google.com>

	configure.ac: Use nostdlib when checking for nostdinc
	With clang nostdinc behaviour is influenced by nostdlib. Since we
	always add nostdlib, add it in test as well

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-25  Vladimir Serbinenko  <phcoder@gmail.com>

	efi/tpm.h: Fix hash_log_extend_event definition.
	I didn't check the spec but pointer to address doesn't make much sense
	and doesn't match the code.

	Rename grub_disk members
	Otherwise it horribly clashes with gnulib when it's
	replacing open/write/read/close

	grub-mkimagexx: Fix RISCV error message
	Outputting a raw pointer doesn't match the format and is
	also useless. Output offset instead.

	kern/emu/misc.c: Don't include config-util.h when running as GRUB_BUILD

	Support R_PPC_PLTREL24
	It's emitted by clang 7. It's the same as R_PPC_REL24.

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	sparc: Enable __clzsi2() and __clzdi2()
	This patch is similiar to commit e795b9011 (RISC-V: Add libgcc helpers
	for clz) but for SPARC target.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	mips: Enable __clzsi2()
	This patch is similiar to commit e795b9011 (RISC-V: Add libgcc helpers
	for clz) but for MIPS target.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: MIPS fallout cleanup
	MIPS fallout cleanup after commit 4d4a8c96e (verifiers: Add possibility
	to verify kernel and modules command lines).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: PowerPC fallout cleanup
	PowerPC fallout cleanup after commit 4d4a8c96e (verifiers: Add possibility
	to verify kernel and modules command lines) and ca0a4f689 (verifiers: File
	type for fine-grained signature-verification controlling).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: IA-64 fallout cleanup
	IA-64 fallout cleanup after commit 4d4a8c96e (verifiers: Add possibility
	to verify kernel and modules command lines).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Colin Watson  <cjwatson@ubuntu.com>

	posix_wrap: Flesh out posix_wrap/limits.h a little more
	In addition to what was already there, Gnulib's <intprops.h> needs SCHAR_MIN,
	SCHAR_MAX, SHRT_MIN, INT_MIN, LONG_MIN, and LONG_MAX. Fixes build on CentOS 7.

	Reported-by: "Chen, Farrah" <farrah.chen@intel.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-19  Marek Marczykowski-Górecki  <marmarek@invisiblethingslab.com>

	xen: Look for Xen notes in section headers too
	Mirror behaviour of ELF loader in libxc: first look for Xen notes in
	PT_NOTE segment, then in SHT_NOTE section and only then fallback to
	a section with __xen_guest name. This fixes loading PV kernels that
	Xen note have outside of PT_NOTE. While this may be result of a buggy
	linker script, loading such kernel directly works fine, so make it work
	with GRUB too. Specifically, this applies to binaries built from Unikraft.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-19  Colin Watson  <cjwatson@ubuntu.com>

	getroot: Save/restore CWD more reliably on Unix
	Various GRUB utilities fail if the current directory doesn't exist,
	because grub_find_device() chdirs to a different directory and then
	fails when trying to chdir back.  Gnulib's save-cwd module uses fchdir()
	instead when it can, avoiding this category of problem.

	Fixes Debian bug #918700.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Add explicit net_dhcp command
	Mostly for cosmetic reasons, we add a "net_dhcp" command, which is (at the
	moment) identical to the existing "net_bootp" command. Both actually trigger
	a DHCP handshake now, and both should be able to deal with pure BOOTP servers.
	We could think about dropping the DHCP options from the initial DISCOVER packet
	when the user issues the net_bootp command, but it's unclear whether this is
	really useful, as both protocols should be able to coexist.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Actually send out DHCPv4 DISCOVER and REQUEST messages
	Even though we were parsing some DHCP options sent by the server, so far
	we are only using the BOOTP 2-way handshake, even when talking to a DHCP
	server.

	Change this by actually sending out DHCP DISCOVER packets instead of the
	generic (mostly empty) BOOTP BOOTREQUEST packets.

	A pure BOOTP server would ignore the extra DHCP options in the DISCOVER
	packet and would just reply with a BOOTREPLY packet, which we also
	handle in the code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Allow receiving DHCP OFFER and ACK packets
	In respone to a BOOTREQUEST packet a BOOTP server would answer with a BOOTREPLY
	packet, which ends the conversation for good. DHCP uses a 4-way handshake,
	where the initial server respone is an OFFER, which has to be answered with
	REQUEST by the client again, only to be completed by an ACKNOWLEDGE packet
	from the server.

	Teach the grub_net_process_dhcp() function to deal with OFFER packets,
	and treat ACK packets the same es BOOTREPLY packets.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Use DHCP options for name and bootfile
	The BOOTP RFC describes the boot file name and the server name as being part
	of the integral BOOTP data structure, with some limits on the size of them.
	DHCP extends this by allowing them to be separate DHCP options, which is more
	flexible.

	Teach the code dealing with those fields to check for those DHCP options first
	and use this information, if provided. We fall back to using the BOOTP
	information if those options are not used.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Introduce per-interface timeout
	Currently we have a global timeout for all network cards in the BOOTP/DHCP
	discovery process.

	Make this timeout a per-interface one, so better accommodate the upcoming
	4-way DHCP handshake and to also cover the lease time limit a DHCP offer
	will come with.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Make grub_net_process_dhcp() take an interface
	Change the interface of the function dealing with incoming BOOTP packets
	to take an interface instead of a card, to allow more fine per-interface
	state (timeout, handshake state) later on.

	Use the opportunity to clean up the code a bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Refactor DHCP packet transmission into separate function
	In contrast to BOOTP, DHCP uses a 4-way handshake, so requires to send
	packets more often.

	Refactor the generation and sending of the BOOTREQUEST packet into
	a separate function, so that future code can more easily reuse this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Allow overloading legacy bootfile and name field
	DHCP specifies a special dummy option OVERLOAD, to allow DHCP options to
	spill over into the (legacy) BOOTFILE and SNAME fields.

	Parse and handle this option properly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Replace parse_dhcp_vendor() with find_dhcp_option()
	For proper DHCP support we will need to parse DHCP options from a packet
	more often and at various places.

	Refactor the option parsing into a new function, which will scan a packet to
	find *a particular* option field. Use that new function in places where we
	were dealing with DHCP options before.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Remove dead code
	The comment is right, the "giaddr" fields holds the IP address of the BOOTP
	relay, not a general purpose router address. Just remove the commented code,
	archeologists can find it in the git history.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Jesús Diéguez Fernández  <jesusdf@gmail.com>

	msr: Add new MSR modules (rdmsr/wrmsr)
	In order to be able to read from and write to model-specific registers,
	two new modules are added. They are i386 specific, as the cpuid module.

	rdmsr module registers the command rdmsr that allows reading from a MSR.
	wrmsr module registers the command wrmsr that allows writing to a MSR.

	wrmsr module is disabled if UEFI secure boot is enabled.

	Please note that on SMP systems, interacting with a MSR that has a scope
	per hardware thread, implies that the value only applies to the
	particular cpu/core/thread that ran the command.

	Also, if you specify a reserved or unimplemented MSR address, it will
	cause a general protection exception (which is not currently being
	handled) and the system will reboot.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Jesús Diéguez Fernández  <jesusdf@gmail.com>

	asm: Replace "__asm__ __volatile__" with "asm volatile"
	In order to maintain the coding style consistency, it was requested to
	replace the methods that use "__asm__ __volatile__" with "asm volatile".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Add bios boot partition support
	Add BIOS Boot Partition support for sparc64 platforms.  This will work a
	little different than x86.  With GPT, both the OBP "load" and "boot" commands
	are partition aware and neither command can see the partition table.  Therefore
	the entire boot-loader is stored within the BIOS Boot Partition and nothing
	is stored within the bootstrap code area of MBR.

	To use it, the end user will issue the boot command with the path pointing to
	the BIOS Boot Partition.

	For example with the disk below:

	Model: Unknown (unknown)
	Disk /dev/nvme1n1: 1600GB
	Sector size (logical/physical): 512B/512B
	Partition Table: gpt

	Number  Start   End     Size    File system  Name  Flags
	1      1049kB  1075MB  1074MB   ext3
	2      1075MB  1076MB  1049kB                     bios_grub
	3      1076MB  1600GB  1599GB                     lvm

	To boot grub2 from OBP, you would use:

	boot /pci@302/pci@1/pci@0/pci@13/nvme@0/disk@1:b

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: obdisk driver
	Add a new disk driver called obdisk for IEEE1275 platforms.  Currently
	the only platform using this disk driver is SPARC, however other IEEE1275
	platforms could start using it if they so choose.  While the functionality
	within the current IEEE1275 ofdisk driver may be suitable for PPC and x86, it
	presented too many problems on SPARC hardware.

	Within the old ofdisk, there is not a way to determine the true canonical
	name for the disk.  Within Open Boot, the same disk can have multiple names
	but all reference the same disk.  For example the same disk can be referenced
	by its SAS WWN, using this form:

	/pci@302/pci@2/pci@0/pci@17/LSI,sas@0/disk@w5000cca02f037d6d,0

	It can also be referenced by its PHY identifier using this form:

	/pci@302/pci@2/pci@0/pci@17/LSI,sas@0/disk@p0

	It can also be referenced by its Target identifier using this form:

	/pci@302/pci@2/pci@0/pci@17/LSI,sas@0/disk@0

	Also, when the LUN=0, it is legal to omit the ,0 from the device name.  So with
	the disk above, before taking into account the device aliases, there are 6 ways
	to reference the same disk.

	Then it is possible to have 0 .. n device aliases all representing the same disk.
	Within this new driver the true canonical name is determined using the the
	IEEE1275 encode-unit and decode-unit commands when address_cells == 4.  This
	will determine the true single canonical name for the device so multiple ihandles
	are not opened for the same device.  This is what frequently happens with the old
	ofdisk driver.  With some devices when they are opened multiple times it causes
	the entire system to hang.

	Another problem solved with this driver is devices that do not have a device
	alias can be booted and used within GRUB. Within the old ofdisk, this was not
	possible, unless it was the original boot device.  All devices behind a SAS
	or SCSI parent can be found.   Within the old ofdisk, finding these disks
	relied on there being an alias defined.  The alias requirement is not
	necessary with this new driver.  It can also find devices behind a parent
	after they have been hot-plugged.  This is something that is not possible
	with the old ofdisk driver.

	The old ofdisk driver also incorrectly assumes that the device pointing to by a
	device alias is in its true canonical form. This assumption is never made with
	this new driver.

	Another issue solved with this driver is that it properly caches the ihandle
	for all open devices.  The old ofdisk tries to do this by caching the last
	opened ihandle.  However this does not work properly because the layer above
	does not use a consistent device name for the same disk when calling into the
	driver.  This is because the upper layer uses the bootpath value returned within
	/chosen, other times it uses the device alias, and other times it uses the
	value within grub.cfg.  It does not have a way to figure out that these devices
	are the same disk.  This is not a problem with this new driver.

	Due to the way GRUB repeatedly opens and closes the same disk. Caching the
	ihandle is important on SPARC.  Without caching, some SAS devices can take
	15 - 20 minutes to get to the GRUB menu. This ihandle caching is not possible
	without correctly having the canonical disk name.

	When available, this driver also tries to use the deblocker #blocks and
	a way of determining the disk size.

	Finally and probably most importantly, this new driver is also capable of
	seeing all partitions on a GPT disk.  With the old driver, the GPT
	partition table can not be read and only the first partition on the disk
	can be seen.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Paul Menzel  <pmenzel@molgen.mpg.de>

	Makefile: Allow to set file systems modules for default_payload.elf
	By default all file system modules are added to the GRUB coreboot
	payload `default_payload.elf`. This makes the image quite big,
	especially as often not all modules are needed.

	Introduce the variable `FS_PAYLOAD_MODULES`, which can be used to
	explicitly set file systems modules to be added.

	    $ make default_payload.elf
	    test -f default_payload.elf && rm default_payload.elf || true
	    pkgdatadir=. ./grub-mkstandalone --grub-mkimage=./grub-mkimage -O i386-coreboot -o default_payload.elf --modules='ahci pata ehci uhci ohci usb_keyboard usbms part_msdos ext2 fat at_keyboard part_gpt usbserial_usbdebug cbfs' --install-modules='ls linux search configfile normal cbtime cbls memrw iorw minicmd lsmmap lspci halt reboot hexdump pcidump regexp setpci lsacpi chain test serial multiboot cbmemc linux16 gzio echo help syslinuxcfg xnu affs afs bfs btrfs cbfs cpio cpio_be exfat ext2 f2fs fat hfs hfsplus iso9660 jfs minix minix2 minix2_be minix3 minix3_be minix_be newc nilfs2 ntfs odc procfs reiserfs romfs sfs squash4 tar udf ufs1 ufs1_be ufs2 xfs zfs password_pbkdf2 ' --fonts= --themes= --locales= -d grub-core/ /boot/grub/grub.cfg=./coreboot.cfg
	    $ ls -l default_payload.elf
	    -rw-rw---- 1 joey joey 1199568 Mar  6 13:58 default_payload.elf

	    $ make default_payload.elf FS_PAYLOAD_MODULES="" # ext2 already in `--modules`
	    test -f default_payload.elf && rm default_payload.elf || true
	    pkgdatadir=. ./grub-mkstandalone --grub-mkimage=./grub-mkimage -O i386-coreboot -o default_payload.elf --modules='ahci pata ehci uhci ohci usb_keyboard usbms part_msdos ext2 fat at_keyboard part_gpt usbserial_usbdebug cbfs' --install-modules='ls linux search configfile normal cbtime cbls memrw iorw minicmd lsmmap lspci halt reboot hexdump pcidump regexp setpci lsacpi chain test serial multiboot cbmemc linux16 gzio echo help syslinuxcfg xnu  password_pbkdf2 ' --fonts= --themes= --locales= -d grub-core/ /boot/grub/grub.cfg=./coreboot.cfg
	    $ ls -l default_payload.elf
	    -rw-rw---- 1 joey joey 832976 Mar  7 12:13 default_payload.elf

	So, the resulting payload size is around 370 kB smaller. (Adding it to
	the CBFS, it will be compressed, so the effective size difference will
	be smaller.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-07  Vladimir Serbinenko  <phcoder@gmail.com>

	windows/platform.c: Fix compilation errors

2019-03-05  Colin Watson  <cjwatson@ubuntu.com>

	gnulib: Upgrade Gnulib and switch to bootstrap tool
	Upgrade Gnulib files to 20190105.

	It's much easier to maintain GRUB's use of portability support files
	from Gnulib when the process is automatic and driven by a single
	configuration file, rather than by maintainers occasionally running
	gnulib-tool and committing the result.  Removing these
	automatically-copied files from revision control also removes the
	temptation to hack the output in ways that are difficult for future
	maintainers to follow.  Gnulib includes a "bootstrap" program which is
	designed for this.

	The canonical way to bootstrap GRUB from revision control is now
	"./bootstrap", but "./autogen.sh" is still useful if you just want to
	generate the GRUB-specific parts of the build system.

	GRUB now requires Autoconf >= 2.63 and Automake >= 1.11, in line with
	Gnulib.

	Gnulib source code is now placed in grub-core/lib/gnulib/ (which should
	not be edited directly), and GRUB's patches are in
	grub-core/lib/gnulib-patches/.  I've added a few notes to the developer
	manual on how to maintain this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-05  Colin Watson  <cjwatson@ubuntu.com>

	syslinux: Fix syslinux_test in out-of-tree builds
	syslinux_parse simplifies some filenames by removing things like ".."
	segments, but the tests assumed that @abs_top_srcdir@ would be
	untouched, which is not true in the case of out-of-tree builds where
	@abs_top_srcdir@ may contain ".." segments.

	Performing the substitution requires some awkwardness in Makefile.am due
	to details of how config.status works.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-05  Colin Watson  <cjwatson@ubuntu.com>

	util: Detect more I/O errors
	Many of GRUB's utilities don't check anywhere near all the possible
	write errors.  For example, if grub-install runs out of space when
	copying a file, it won't notice.  There were missing checks for the
	return values of write, fflush, fsync, and close (or the equivalents on
	other OSes), all of which must be checked.

	I tried to be consistent with the existing logging practices of the
	various hostdisk implementations, but they weren't entirely consistent
	to start with so I used my judgement.  The result at least looks
	reasonable on GNU/Linux when I provoke a write error:

	  Installing for x86_64-efi platform.
	  grub-install: error: cannot copy `/usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed' to `/boot/efi/EFI/debian/grubx64.efi': No space left on device.

	There are more missing checks in other utilities, but this should fix
	the most critical ones.

	Fixes Debian bug #922741.

	Reviewed-by: Steve McIntyre <93sam@debian.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-05  James Clarke  <jrtc27@jrtc27.com>

	osdep/freebsd: Fix partition calculation for EBR entries
	For EBR partitions, "start" is the relative starting sector of the EBR
	header itself, whereas "offset" is the relative starting byte of the
	partition's contents, excluding the EBR header and any padding. Thus we
	must use "offset", and divide by the sector size to convert to sectors.

	Fixes Debian bug #923253.

	Reviewed-by: Colin Watson <cjwatson@ubuntu.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-26  Steve McIntyre  <93sam@debian.org>

	grub-install: Check for arm-efi as a default target
	Much like on x86, we can work out if the system is running on top of EFI
	firmware. If so, return "arm-efi". If not, fall back to "arm-uboot" as
	previously.

	Split out the code to (maybe) load the efivar module and check for
	/sys/firmware/efi into a common helper routine is_efi_system().

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-26  Daniel Kiper  <daniel.kiper@oracle.com>

	Revert "grub-install: Check for arm-efi as a default target"
	This reverts commit 082fd84d525f8d6602f892160b77c0a948308a78.

	Incorrect version of the patch was pushed into the git repo.

	Reported-by: Leif Lindholm <leif.lindholm@linaro.org>

2019-02-25  Alexander Graf  <agraf@suse.de>

	travis: Add Travis CI config file
	There is a really convenient service for open source project from Travis
	CI: They allow for free CI testing using their infrastructure.

	GRUB has had issues with broken builds for various targets for a long time
	already. The main reason is a lack of CI to just do smoke tests on whether
	all targets still at least compile.

	This patch adds a Travis config file which builds (almost) all currently
	available targets.

	On top of that, this Travis config also runs a small execution test on the
	x86_64-efi target.

	All of this config file can easily be extended further on. It probably
	makes sense to do something similar to the u-boot test infrastructure
	that communicates with the payload properly. Going forward, we also will
	want to do more QEMU runtime checks for other targets.

	Currently, with this config alone, I already see about half of the available
	targets as broken. So it's definitely desperately needed :).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Steve McIntyre  <93sam@debian.org>

	grub-install: Check for arm-efi as a default target
	Much like on x86, we can work out if the system is running on top
	of EFI firmware. If so, return "arm-efi". If not, fall back to
	"arm-uboot" as previously.

	Heavily inspired by the existing code for x86.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/efi: Fix grub_efi_get_ram_base()
	grub_efi_get_ram_base() looks for the lowest available RAM address by
	traversing the memory map, comparing lowest address found so far.
	Due to a brain glitch, that "so far" was initialized to GRUB_UINT_MAX -
	completely preventing boot on systems without RAM below 4GB.

	Change the initial value to GRUB_EFI_MAX_USABLE_ADDRESS, as originally
	intended.

	Reported-by: Steve McIntyre <93sam@debian.org>
	Tested-by: Steve McIntyre <93sam@debian.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Paul Menzel  <pmenzel@molgen.mpg.de>

	normal/menu: Do not treat error values as key presses
	Some terminals, like `grub-core/term/at_keyboard.c`, return `-1` in case
	they are not ready yet.

	      if (! KEYBOARD_ISREADY (grub_inb (KEYBOARD_REG_STATUS)))
	        return -1;

	Currently, that is treated as a key press, and the menu time-out is
	cancelled/cleared. This is unwanted, as the boot is stopped and the user
	manually has to select a menu entry. Therefore, adapt the condition to
	require the key value also to be greater than 0.

	`GRUB_TERM_NO_KEY` is defined as 0, so the condition could be collapsed
	to greater or equal than (≥) 0, but the compiler will probably do that
	for us anyway, so keep the cases separate for clarity.

	This is tested with coreboot, the GRUB default payload, and the
	configuration file `grub.cfg` below.

	For GRUB:

	    $ ./autogen.sh
	    $ ./configure --with-platform=coreboot
	    $ make -j`nproc`
	    $ make default_payload.elf

	For coreboot:

	    $ more grub.cfg
	    serial --unit 0 --speed 115200
	    set timeout=5

	    menuentry 'halt' {
	        halt
	    }
	    $ build/cbfstool build/coreboot.rom add-payload \
	        -f /dev/shm/grub/default_payload.elf -n fallback/payload -c lzma
	    $ build/cbfstool build/coreboot.rom add -f grub.cfg -n etc/grub.cfg -t raw
	    $ qemu-system-x86_64 --version
	    QEMU emulator version 3.1.0 (Debian 1:3.1+dfsg-2+b1)
	    Copyright (c) 2003-2018 Fabrice Bellard and the QEMU Project developers
	    $ qemu-system-x86_64 -M pc -bios build/coreboot.rom -serial stdio -nic none

	Currently, the time-out is cancelled/cleared. With the commit, it is not.
	With a small GRUB payload, this the problem is also reproducible on the
	ASRock E350M1.

	Link: http://lists.gnu.org/archive/html/grub-devel/2019-01/msg00037.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	fdt: Treat device tree file type like ACPI
	We now have signature check logic in grub which allows us to treat
	files differently depending on their file type.

	Treat a loaded device tree like an overlayed ACPI table.
	Both describe hardware, so I suppose their threat level is the same.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add to build system
	This patch adds support for RISC-V to the grub build system. With this
	patch, I can successfully build grub on RISC-V as a UEFI application.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add libgcc helpers for clz
	Gcc may decide it wants to call helper functions to execute clz. Provide
	them in our own copy of libgcc.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add auxiliary files
	To support a new architecture we need to provide a few helper functions
	for memory, cache, timer, etc support.

	This patch adds the remainders of those. Some bits are still disabled,
	as I couldn't guarantee that we're always running on models / in modes
	where the respective hardware is available.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add awareness for RISC-V reloations
	This patch adds awareness of RISC-V relocations throughout the grub tools
	as well as dynamic linkage and elf->PE relocation conversion support.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add Linux load logic
	We currently only support to run grub on RISC-V as UEFI payload. Ideally,
	we also only want to support running Linux underneath as UEFI payload.

	Prepare that with some Linux boot stub code. Once the arm64 target is
	generalized, we can hook into that one and gain boot functionality.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add early startup code
	On entry, we need to save the system table pointer as well as our image
	handle. Add an early startup file that saves them and then brings us
	into our main function.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add setjmp implementation
	This patch adds a 32/64 capable setjmp implementation for RISC-V.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	elf.h: Add RISC-V definitions
	The RISC-V ABI document outlines ELF header structure and relocation
	information. Pull the respective magic numbers into our elf header
	so we can make use of them.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	PE: Add RISC-V definitions
	The PE format defines magic numbers as well as relocation identifiers for
	RISC-V. Add them to our include file, so we can make use of them.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	efi: Rename armxx to arch
	Some architectures want to boot Linux as plain UEFI binary. Today that
	really only encompasses ARM and AArch64, but going forward more
	architectures may adopt that model.

	So rename our internal API accordingly.

	Acked-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-06  Alexander Graf  <agraf@suse.de>

	mkimage: Clarify file alignment in efi case
	There are a few spots in the PE generation code for EFI binaries that uses
	the section alignment rather than file alignment, even though the alignment
	is really only file bound.

	Replace those cases with the file alignment constant instead.

	Reported-by: Daniel Kiper <dkiper@net-space.pl>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>

2019-02-06  Alexander Graf  <agraf@suse.de>

	mkimage: Align efi sections on 4k boundary
	There is UEFI firmware popping up in the wild now that implements stricter
	permission checks using NX and write protect page table entry bits.

	This means that firmware now may fail to load binaries if its individual
	sections are not page aligned, as otherwise it can not ensure permission
	boundaries.

	So let's bump all efi section alignments up to 4k (EFI page size). That way
	we will stay compatible going forward.

	Unfortunately our internals can't deal very well with a mismatch of alignment
	between the virtual and file offsets, so we have to also pad our target
	binary a bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>

2019-02-06  Alexander Graf  <agraf@suse.de>

	mkimage: Use EFI32_HEADER_SIZE define in arm-efi case
	The efi-arm case was defining its own header size calculation, even though it's
	100% identical to the common EFI32_HEADER_SIZE definition.

	So let's clean it up to use the common define.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>

2019-02-06  Guillaume GARDET  <guillaume.gardet@arm.com>

	arm: Move initrd upper to leave more space for kernel
	This patch allows to have bigger kernels. If the kernel grows, then it will
	overwrite the initrd when it is extracted.

	Acked-by: Alexander Graf <agraf@suse.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-23  Leif Lindholm  <leif.lindholm@linaro.org>

	linux, efi, arm*, fdt: Break FDT extra allocation space out into a #define
	A certain amount of dynamic space is required for the handover from
	GRUB/Linux-EFI-stub. This entails things like initrd addresses,
	address-cells entries and associated strings.

	But move this into a proper centralised #define rather than live-code
	it in the loader.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-22  Cristian Ciocaltea  <cristian.ciocaltea@gmail.com>

	uboot: Add the missing disk write operation support
	uboot_disk_write() is currently lacking the write support
	to storage devices because, historically, those devices did not
	implement block_write() in U-Boot.

	The solution has been tested using a patched U-Boot loading
	and booting GRUB in a QEMU vexpress-a9 environment.
	The disk write operations were triggered with GRUB's save_env
	command.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-21  Max Tottenham  <mtottenh@akamai.com>

	tpm: Fix bug in GRUB2 TPM module
	The value of tpm_handle changes between successive calls to grub_tpm_handle_find(),
	as instead of simply copying the stored pointer we end up taking the address of
	said pointer when using the cached value of grub_tpm_handle.

	This causes grub_efi_open_protocol() to return a nullptr in grub_tpm2_execute()
	and grub_tpm2_log_event(). Said nullptr goes unchecked and
	efi_call_5(tpm->hash_log_extend_event,...) ends up jumping to 0x0, Qemu crashes
	once video ROM is reached at 0xb0000.

	This patch seems to do the trick of fixing that bug, but we should also ensure
	that all calls to grub_efi_open_protocol() are checked so that we don't start
	executing low memory.

	Reviewed-by: Matthew Garrett <mjg59@google.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-14  Colin Watson  <cjwatson@ubuntu.com>

	pgp: Fix emu build and tests after pgp module renaming
	Commit b07feb8746c3bb845e3f0d33d37c0bded704d14d (verifiers: Rename
	verify module to pgp module) renamed the "verify" module to "pgp", but
	the GRUB_MOD_INIT and GRUB_MOD_FINI macros were left as "verify", which
	broke the emu target build; and file_filter_test still referred to the
	now non-existent "verify" module. Fix both of these.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-14  Peter Große  <pegro@friiks.de>

	grub-mkconfig/20_linux_xen: Support multiple early initrd images
	Add support for multiple, shared, early initrd images. These early
	images will be loaded in the order declared, and all will be loaded
	before the initrd image.

	While many classes of data can be provided by early images, the
	immediate use case would be for distributions to provide CPU
	microcode to mitigate the Meltdown and Spectre vulnerabilities.

	Xen has also support to load microcode updates provided as additional
	modules by the bootloader.

	There are two environment variables provided for declaring the early
	images.

	* GRUB_EARLY_INITRD_LINUX_STOCK is for the distribution declare
	  images that are provided by the distribution or installed packages.
	  If undeclared, this will default to a set of common microcode image
	  names.

	* GRUB_EARLY_INITRD_LINUX_CUSTOM is for user created images. User
	  images will be loaded after the stock images.

	These separate configurations allow the distribution and user to
	declare different image sets without clobbering each other.

	This also makes a minor update to ensure that UUID partition labels
	stay disabled when no initrd image is found, even if early images are
	present.

	This is basically a copy of a698240d "grub-mkconfig/10_linux: Support
	multiple early initrd images" by Matthew S. Turnbull.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-14  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	grub-core/loader/efi/fdt.c: Do not copy random memory
	We should not try to copy any memory area which is outside of the original
	fdt. If this extra memory is controlled by a hypervisor this might end
	with a crash.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Matthew Garrett  <matthewgarrett@google.com>

	verifiers: Add TPM documentation
	Describe the behaviour of GRUB when the TPM module is in use.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Matthew Garrett  <mjg59@google.com>

	verifiers: Core TPM support
	Add support for performing basic TPM measurements. Right now this only
	supports extending PCRs statically and only on UEFI. In future we might
	want to have some sort of mechanism for choosing which events get logged
	to which PCRs, but this seems like a good default policy and we can wait
	to see whether anyone  has a use case before adding more complexity.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Matthew Garrett  <mjg59@google.com>

	verifiers: Verify commands executed by grub
	Pass all commands executed by GRUB to the verifiers layer. Most verifiers will
	ignore this, but some (such as the TPM verifier) want to be able to measure and
	log each command executed in order to ensure that the boot state is as expected.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Add support to configure
	Support platform i386/xen_pvh in configure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Support grub-install for xen_pvh
	Add xen_pvh support to grub-install.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Support building a standalone image
	Support mkimage for xen_pvh.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Use elfnote defines instead of plain numbers
	In order to avoid using plain integers for the ELF notes use the
	available Xen include instead.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Hans van Kranenburg  <hans@knorrie.org>

	grub-module-verifier: Ignore all_video for xen_pvh
	This solves the build failing with "Error: no symbol table and no
	.moddeps section"

	Also see:
	- 6371e9c10433578bb236a8284ddb9ce9e201eb59
	- https://savannah.gnu.org/bugs/?49012

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Add build runes for grub-core
	Add the modifications to the build system needed to build a xen_pvh
	grub.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Init memory regions for PVH
	Add all usable memory regions to grub memory management and add the
	needed mmap iterate code, which will be used by grub core (e.g.
	grub-core/lib/relocator.c or grub-core/mmap/mmap.c).

	As we are running in 32-bit mode don't add memory above 4GB.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Setup Xen specific data for PVH
	Initialize the needed Xen specific data. This is:

	- the Xen start of day page containing the console and Xenstore ring
	  page PFN and event channel
	- the grant table
	- the shared info page

	Write back the possibly modified memory map to the hypervisor in case
	the guest is reading it from there again.

	Set the RSDP address for the guest from the start_info page passed
	as boot parameter.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Roger Pau Monné <roger.pau@citrix.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Get memory map from hypervisor for PVH
	Retrieve the memory map from the hypervisor and normalize it to contain
	no overlapping entries and to be sorted by address.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Setup hypercall page for PVH
	Add the needed code to setup the hypercall page for calling into the
	Xen hypervisor.

	Import the XEN_HVM_DEBUGCONS_IOPORT define from Xen unstable into
	include/xen/arch-x86/xen.h

	Reviewed-by: Roger Pau Monné <roger.pau@citrix.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add PVH boot entry code
	Add the code for the Xen PVH mode boot entry.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add basic hooks for PVH in current code
	Add the hooks to current code needed for Xen PVH. They will be filled
	with code later when the related functionality is being added.

	loader/i386/linux.c needs to include machine/kernel.h now as it needs
	to get GRUB_KERNEL_USE_RSDP_ADDR from there. This in turn requires to
	add an empty kernel.h header for some i386 platforms (efi, coreboot,
	ieee1275, xen) and for x86_64 efi.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add PVH specific defines to offset.h
	include/grub/offsets.h needs some defines for Xen PVH mode.

	Add them. While at it line up the values in the surrounding lines to
	start at the same column.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Modify grub_xen_ptr2mfn() for Xen PVH
	grub_xen_ptr2mfn() returns the machine frame number for a given pointer
	value. For Xen-PVH guests this is just the PFN. Add the PVH specific
	variant.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Rearrange xen/init.c to prepare it for Xen PVH mode
	Rearrange grub-core/kern/xen/init.c to prepare adding PVH mode support
	to it. This includes putting some code under #ifdef GRUB_MACHINE_XEN
	as it will not be used when running as PVH.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add some dummy headers for PVH mode
	With Xen PVH mode adding a new machine type the machine related headers
	need to be present for the build to succeed. Most of the headers just
	need to include the related common i386 headers. Add those to the tree.

	Note that xen_pvh/int.h needs to include pc/int_types.h instead of
	pc/int.h in order to avoid the definition of grub_bios_interrupt().

	xen_pvh/memory.h needs to include coreboot/memory.h (like some other
	<machine>/memory.h do as well) as this contains just the needed stubs.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Prepare common code for Xen PVH support
	Some common code needs to be special cased for Xen PVH mode. This hits
	mostly Xen PV mode specific areas.

	Split include/grub/i386/pc/int_types.h off from
	include/grub/i386/pc/int.h to support including this file later from
	xen_pvh code without the grub_bios_interrupt definition.

	Move definition of struct grub_e820_mmap_entry from
	grub-core/mmap/i386/pc/mmap.c to include/grub/i386/memory.h in order
	to make it usable from xen_pvh code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Carve out grant tab initialization into dedicated function
	Initialize the grant tab in a dedicated function. This will enable
	using it for PVH guests, too.

	Call the new function from grub_machine_init() as this will later
	be common between Xen PV and Xen PVH mode.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	loader/linux: Support passing RSDP address via boot params
	Xen PVH guests will have the RSDP at an arbitrary address. Support that
	by passing the RSDP address via the boot parameters to Linux.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add some Xen headers
	In order to support grub2 in Xen PVH environment some additional Xen
	headers are needed as grub2 will be started in PVH mode requiring to
	use several HVM hypercalls and structures.

	Add the needed headers from Xen 4.10 being the first Xen version with
	full (not only experimental) PVH guest support.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-07  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: ARM Xen fallout cleanup
	ARM Xen fallout cleanup after commit ca0a4f689 (verifiers: File type for
	fine-grained signature-verification controlling).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-12-07  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: Xen fallout cleanup
	Xen fallout cleanup after commit ca0a4f689 (verifiers: File type for
	fine-grained signature-verification controlling).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-28  Eric Snowberg  <eric.snowberg@oracle.com>

	ofnet: Fix build regression in grub_ieee1275_parse_bootpath()
	The grub_ieee1275_parse_bootpath() function (commit a661a32, ofnet: Initialize
	structs in bootpath parser) introduces a build regression on SPARC:

	cc1: warnings being treated as errors
	net/drivers/ieee1275/ofnet.c: In function 'grub_ieee1275_parse_bootpath':
	net/drivers/ieee1275/ofnet.c:156: error: missing initializer
	net/drivers/ieee1275/ofnet.c:156: error: (near initialization for 'client_addr.type')
	net/drivers/ieee1275/ofnet.c:156: error: missing initializer
	net/drivers/ieee1275/ofnet.c:156: error: (near initialization for 'gateway_addr.type')
	net/drivers/ieee1275/ofnet.c:156: error: missing initializer
	net/drivers/ieee1275/ofnet.c:156: error: (near initialization for 'subnet_mask.type')
	net/drivers/ieee1275/ofnet.c:157: error: missing initializer
	net/drivers/ieee1275/ofnet.c:157: error: (near initialization for 'hw_addr.type')
	make[3]: *** [net/drivers/ieee1275/ofnet_module-ofnet.o] Error 1

	Initialize the entire structure.

	More info can be found here:
	  http://lists.gnu.org/archive/html/grub-devel/2018-03/msg00034.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-26  Nick Terrell  <terrelln@fb.com>

	btrfs: Add zstd support to grub btrfs
	- Adds zstd support to the btrfs module.
	- Adds a test case for btrfs zstd support.
	- Changes top_srcdir to srcdir in the btrfs module's lzo include
	  following comments from Daniel Kiper about the zstd include.

	Tested on Ubuntu-18.04 with a btrfs /boot partition with and without zstd
	compression. A test case was also added to the test suite that fails before
	the patch, and passes after.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-26  Nick Terrell  <terrelln@fb.com>

	zstd: Import upstream zstd-1.3.6
	- Import zstd-1.3.6 from upstream
	- Add zstd's module.c file
	- Add the zstd module to Makefile.core.def

	Import zstd-1.3.6 from upstream [1]. Only the files need for decompression
	are imported. I used the latest zstd release, which includes patches [2] to
	build cleanly in GRUB.

	I included the script used to import zstd-1.3.6 below at the bottom of the
	commit message.

	Upstream zstd commit hash: 4fa456d7f12f8b27bd3b2f5dfd4f46898cb31c24
	Upstream zstd commit name: Merge pull request #1354 from facebook/dev

	Zstd requires some posix headers, which it gets from posix_wrap.
	This can be checked by inspecting the .Po files generated by automake,
	which contain the header dependencies. After building run the command
	`cat grub-core/lib/zstd/.deps-core/*.Po` to see the dependencies [3].
	The only OS dependencies are:

	- stddef.h, which is already a dependency in posix_wrap, and used for size_t
	  by lzo and xz.
	- stdarg.h, which comes from the grub/misc.h header, and we don't use in zstd.

	All the types like uint64_t are typedefed to grub_uint64_t under the hood.
	The only exception is size_t, which comes from stddef.h. This is already the
	case for lzo and xz. I don't think there are any cross-compilation concerns,
	because cross-compilers provide their own system headers (and it would already
	be broken).

	[1] https://github.com/facebook/zstd/releases/tag/v1.3.6
	[2] https://github.com/facebook/zstd/pull/1344
	[3] https://gist.github.com/terrelln/7a16b92f5a1b3aecf980f944b4a966c4

	```

	curl -L -O https://github.com/facebook/zstd/releases/download/v1.3.6/zstd-1.3.6.tar.gz
	curl -L -O https://github.com/facebook/zstd/releases/download/v1.3.6/zstd-1.3.6.tar.gz.sha256
	sha256sum --check zstd-1.3.6.tar.gz.sha256
	tar xzf zstd-1.3.6.tar.gz

	SRC_LIB="zstd-1.3.6/lib"
	DST_LIB="grub-core/lib/zstd"
	rm -rf $DST_LIB
	mkdir -p $DST_LIB
	cp $SRC_LIB/zstd.h $DST_LIB/
	cp $SRC_LIB/common/*.[hc] $DST_LIB/
	cp $SRC_LIB/decompress/*.[hc] $DST_LIB/
	rm $DST_LIB/{pool.[hc],threading.[hc]}
	rm -rf zstd-1.3.6*
	echo SUCCESS!
	```

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-21  Michael Chang  <mchang@suse.com>

	verifiers: fix double close on pgp's sig file descriptor
	An error emerged as when I was testing the verifiers branch, so instead
	of putting it in pgp prefix, the verifiers is used to reflect what the
	patch is based on.

	While running verify_detached, grub aborts with error.

	verify_detached /@/.snapshots/1/snapshot/boot/grub/grub.cfg
	/@/.snapshots/1/snapshot/boot/grub/grub.cfg.sig

	alloc magic is broken at 0x7beea660: 0
	Aborted. Press any key to exit.

	The error is caused by sig file descriptor been closed twice, first time
	in grub_verify_signature() to which it is passed as parameter. Second in
	grub_cmd_verify_signature() or in whichever opens the sig file
	descriptor. The second close is not consider as bug to me either, as in
	common rule of what opens a file has to close it to avoid file
	descriptor leakage.

	After all the design of grub_verify_signature() makes it difficult to keep
	a good trace on opened file descriptor from it's caller. Let's refine
	the application interface to accept file path rather than descriptor, in
	this way the caller doesn't have to care about closing the descriptor by
	delegating it to grub_verify_signature() with full tracing to opened
	file descriptor by itself.

	Also making it clear that sig descriptor is not referenced in error
	returning path of grub_verify_signature_init(), so it can be closed
	directly by it's caller. This also makes delegating it to
	grub_pubkey_close() infeasible to help in relieving file descriptor
	leakage as it has to depend on uncertainty of ctxt fields in error
	returning path.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-21  Lee Jones  <lee.jones@linaro.org>

	generic/blocklist: Fix implicit declaration of function grub_file_filter_disable_compression()
	grub_file_filter_disable_compression() no longer exists.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-21  Lee Jones  <lee.jones@linaro.org>

	arm64/xen: Fix too few arguments to function grub_create_loader_cmdline()
	Without this fix, building xen_boot.c omits:

	loader/arm64/xen_boot.c: In function ‘xen_boot_binary_load’:
	loader/arm64/xen_boot.c:370:7: error: too few arguments to function ‘grub_create_loader_cmdline’
	       grub_create_loader_cmdline (argc - 1, argv + 1, binary->cmdline,
	       ^~~~~~~~~~~~~~~~~~~~~~~~~~
	In file included from loader/arm64/xen_boot.c:36:0:
	../include/grub/lib/cmdline.h:29:12: note: declared here
	 grub_err_t grub_create_loader_cmdline (int argc, char *argv[], char *buf,

	Reviewed-by: Julien Grall <julien.grall@arm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	arm-uboot, ia64, sparc64: Fix up grub_file_open() calls
	The verifiers framework changed the grub_file_open() interface, breaking all
	non-x86 linux loaders. Add file types to the grub_file_open() calls to make
	them build again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/efi: Fix breakage caused by verifiers
	  - add variable "err" (used but not defined),
	  - add GRUB_FILE_TYPE_LINUX_KERNEL to grub_file_open() call.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	grub-core/loader/efi/fdt.c: Fixup grub_file_open() call
	The verifiers framework changed the API of grub_file_open(), but did not
	fix up all users. Add the file type GRUB_FILE_TYPE_DEVICE_TREE_IMAGE
	to the "devicetree" command handler call.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	include/grub/file.h: Add device tree file type
	The API change of grub_file_open() for adding verifiers did not include
	a type for device tree blobs. Add GRUB_FILE_TYPE_DEVICE_TREE_IMAGE to
	the grub_file_type enum.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	include/grub/verify.h: Add include guard
	verify.h was added without include guards. This means compiling anything
	including both include/grub/verify.h and include/grub/lib/cmdline.h fails
	(at least grub-core/loader/arm64/linux.c.

	Add the necessary include guard.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Matthew Daley  <mattd@bugfuzz.com>

	mkimage: Pad DTBs to target-specific pointer size
	Device tree (DTB) lengths are being padded to a multiple of 4 bytes
	rather than the target-specific pointer size. This causes objects
	following OBJ_TYPE_DTB objects to be incorrectly parsed during GRUB
	execution on arm64.

	Fix by using ALIGN_ADDR(), not ALIGN_UP().

	Signed-by-off: Matthew Daley <mattd@bugfuzz.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-09  Colin Watson  <cjwatson@ubuntu.com>

	Cope with / being on a ZFS root dataset
	If / is on the root dataset in a ZFS pool, then ${bootfs} will be set to
	"/" (whereas if it is on a non-root dataset, there will be no trailing
	slash).  Passing "root=ZFS=${rpool}/" will fail to boot, but
	"root=ZFS=${rpool}" works fine, so strip the trailing slash.

	Fixes: https://savannah.gnu.org/bugs/?52746

	Tested-by: Fejes József <jozsef.fejes@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-09  Paul Menzel  <pmenzel@molgen.mpg.de>

	unix/platform: Initialize variable to fix grub-install on UEFI system
	On a UEFI system, were no boot entry *grub* is present, currently,
	`grub-install` fails with an error.

	    $ efibootmgr
	    BootCurrent: 0000
	    Timeout: 0 seconds
	    BootOrder: 0001,0006,0003,0004,0005
	    Boot0001  Diskette Drive
	    Boot0003* USB Storage Device
	    Boot0004* CD/DVD/CD-RW Drive
	    Boot0005  Onboard NIC
	    Boot0006* WDC WD2500AAKX-75U6AA0
	    $ sudo grub-install /dev/sda
	    Installing for x86_64-efi platform.
	    grub-install: error: efibootmgr failed to register the boot entry: Unknown error 22020.

	The error code is always different, and the error message (incorrectly)
	points to efibootmgr.

	But, the error is in GRUB’s function
	`grub_install_remove_efi_entries_by_distributor()`, where the variable
	`rc` for the return value, is uninitialized and never set, when no boot
	entry for the distributor is found.

	The content of that uninitialized variable is then returned as the error
	code of efibootmgr.

	Set the variable to 0, so that success is returned, when no entry needs
	to be deleted.

	Tested on Dell OptiPlex 7010 with firmware A28.

	    $ sudo ./grub-install /dev/sda
	    Installing for x86_64-efi platform.
	    Installation finished. No error reported.

	[1]: https://github.com/rhboot/efibootmgr/issues/100

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Add EFI shim lock verifier
	This module provides shim lock verification for various kernels
	if UEFI secure boot is enabled on a machine.

	It is recommended to put this module into GRUB2 standalone image
	(avoid putting iorw and memrw modules into it; they are disallowed
	if UEFI secure boot is enabled). However, it is also possible to use
	it as a normal module. Though such configurations are more fragile
	and less secure due to various limitations.

	If the module is loaded and UEFI secure boot is enabled then:
	  - module itself cannot be unloaded (persistent module),
	  - the iorw and memrw modules cannot be loaded,
	  - if the iorw and memrw modules are loaded then
	    machine boot is disabled,
	  - GRUB2 defers modules and ACPI tables verification to
	    other verifiers.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	dl: Add support for persistent modules
	This type of modules cannot be unloaded. This is useful if a given
	functionality, e.g. UEFI secure boot shim signature verification, should
	not be disabled if it was enabled at some point in time. Somebody may
	say that we can use standalone GRUB2 here. That is true. However, the
	code is not so big nor complicated hence it make sense to support
	modularized configs too.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: Add the documentation
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: Rename verify module to pgp module
	Just for clarity. No functional change.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: Add possibility to defer verification to other verifiers
	This way if a verifier requires verification of a given file it can defer task
	to another verifier (another authority) if it is not able to do it itself. E.g.
	shim_lock verifier, posted as a subsequent patch, is able to verify only PE
	files. This means that it is not able to verify any of GRUB2 modules which have
	to be trusted on UEFI systems with secure boot enabled. So, it can defer
	verification to other verifier, e.g. PGP one.

	I silently assume that other verifiers are trusted and will do good job for us.
	Or at least they will not do any harm.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: Add possibility to verify kernel and modules command lines
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: Framework core
	Verifiers framework provides core file verification functionality which
	can be used by various security mechanisms, e.g., UEFI secure boot, TPM,
	PGP signature verification, etc.

	The patch contains PGP code changes and probably they should be extracted
	to separate patch for the sake of clarity.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: File type for fine-grained signature-verification controlling
	Let's provide file type info to the I/O layer. This way verifiers
	framework and its users will be able to differentiate files and verify
	only required ones.

	This is preparatory patch.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	bufio: Use grub_size_t instead of plain int for size
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add RAID 6 recovery for a btrfs filesystem
	Add the RAID 6 recovery, in order to use a RAID 6 filesystem even if some
	disks (up to two) are missing. This code use the md RAID 6 code already
	present in grub.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Make more generic the code for RAID 6 rebuilding
	The original code which handles the recovery of a RAID 6 disks array
	assumes that all reads are multiple of 1 << GRUB_DISK_SECTOR_BITS and it
	assumes that all the I/O is done via the struct grub_diskfilter_segment.
	This is not true for the btrfs code. In order to reuse the native
	grub_raid6_recover() code, it is modified to not call
	grub_diskfilter_read_node() directly, but to call an handler passed
	as an argument.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add support for recovery for a RAID 5 btrfs profiles
	Add support for recovery for a RAID 5 btrfs profile. In addition
	it is added some code as preparatory work for RAID 6 recovery code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Refactor the code that read from disk
	Move the code in charge to read the data from disk into a separate
	function. This helps to separate the error handling logic (which
	depends on the different raid profiles) from the read from disk
	logic. Refactoring this code increases the general readability too.

	This is a preparatory patch, to help the adding of the RAID 5/6 recovery code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Move logging code in grub_btrfs_read_logical()
	A portion of the logging code is moved outside of internal for(;;). The part
	that is left inside is the one which depends on the internal for(;;) index.

	This is a preparatory patch. The next one will refactor the code inside
	the for(;;) into an another function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Avoid a rescan for a device which was already not found
	Currently read from missing device triggers rescan. However, it is never
	recorded that the device is missing. So, each read of a missing device
	triggers rescan again and again. This behavior causes a lot of unneeded
	rescans leading to huge slowdowns.

	This patch fixes above mentioned issue. Information about missing devices
	is stored in the data->devices_attached[] array as NULL value in dev
	member. Rescan is triggered only if no information is found for a given
	device. This means that only first time read triggers rescan.

	The patch drops premature return. This way data->devices_attached[] is
	filled even when a given device is missing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Move the error logging from find_device() to its caller
	The caller knows better if this error is fatal or not, i.e. another disk is
	available or not.

	This is a preparatory patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add helper to check the btrfs header
	This helper is used in a few places to help the debugging. As
	conservative approach the error is only logged.
	This does not impact the error handling.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add support for reading a filesystem with a RAID 5 or RAID 6 profile
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Michael Chang  <mchang@suse.com>

	msdos: Fix overflow in converting partition start and length into 512B blocks
	When booting from NVME SSD with 4k sector size, it fails with the message.

	error: attempt to read or write outside of partition.

	This patch fixes the problem by fixing overflow in converting partition start
	and length into 512B blocks.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Mihai Moldovan  <ionic@ionic.de>

	osdep/linux: Convert partition start to disk sector length
	When reading data off a disk, sector values are based on the disk sector
	length.

	Within grub_util_fd_open_device(), the start of the partition was taken
	directly from grub's partition information structure, which uses the
	internal sector length (currently 512b), but never transformed to the
	disk's sector length.

	Subsequent calculations were all wrong for devices that have a diverging
	sector length and the functions eventually skipped to the wrong stream
	location, reading invalid data.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Adam Williamson  <awilliam@redhat.com>

	python: Use AM_PATH_PYTHON to determine interpreter for gentpl.py
	gentpl.py is python2/3-agnostic, but there's no way to cause it
	to be run with any interpreter other than 'python', it's just
	hard-coded into Makefile.common that way. Adjust that to use
	AM_PATH_PYTHON (provided by automake) to find an interpreter
	and run gentpl.py with that instead. This makes grub buildable
	when `python` does not exist (but rather `python3` or `python2`
	or `python2.7`, etc.) Minimum version is set to 2.6 as this is
	the first version with `__future__.print_function` available.

	Note, AM_PATH_PYTHON respects the PYTHON environment variable
	and will treat its value as the *only* candidate for a valid
	interpreter if it is set - when PYTHON is set, AM_PATH_PYTHON
	will not try to find any alternative interpreter, it will only
	check whether the interpreter set as the value of PYTHON meets
	the requirements and use it if so or fail if not. This means
	that when using grub's `autogen.sh`, as it too uses the value
	of the PYTHON environment variable (and if it is not set, just
	sets it to 'python') you cannot rely on AM_PATH_PYTHON
	interpreter discovery. If your desired Python interpreter is
	not just 'python', you must set the PYTHON environment variable,
	e.g. 'PYTHON=/usr/local/bin/python3 ./autogen.sh'. The specified
	interpreter will then be used both by autogen.sh itself and by
	the autotools-driven build scripts.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Colin Watson  <cjwatson@ubuntu.com>

	build: Use pkg-config to find FreeType
	pkg-config is apparently preferred over freetype-config these days (see
	the BUGS section of freetype-config(1)).  pkg-config support was added
	to FreeType in version 2.1.5, which was released in 2003, so it should
	comfortably be available everywhere by now.

	We no longer need to explicitly substitute FREETYPE_CFLAGS and
	FREETYPE_LIBS, since PKG_CHECK_MODULES does that automatically.

	Fixes Debian bug #887721.

	Reported-by: Hugh McMaster <hugh.mcmaster@outlook.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Colin Watson  <cjwatson@ubuntu.com>

	build: Capitalise *freetype_* variables
	Using FREETYPE_CFLAGS and FREETYPE_LIBS is more in line with the naming
	scheme used by pkg-config macros.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Julian Andres Klode  <julian.klode@canonical.com>

	ofnet: Initialize structs in bootpath parser
	Code later on checks if variables inside the struct are
	0 to see if they have been set, like if there were addresses
	in the bootpath.

	The variables were not initialized however, so the check
	might succeed with uninitialized data, and a new interface
	with random addresses and the same name is added. This causes
	$net_default_mac to point to the random one, so, for example,
	using that variable to load per-mac config files fails.

	Bug-Ubuntu: https://bugs.launchpad.net/bugs/1785859

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  dann frazier  <dann.frazier@canonical.com>

	grub-reboot: Warn when "for the next boot only" promise cannot be kept
	The "for the next boot only" property of grub-reboot is dependent upon
	GRUB being able to clear the next_entry variable in the environment
	block. However, GRUB cannot write to devices using the diskfilter
	and lvm abstractions.

	Ref: https://lists.gnu.org/archive/html/grub-devel/2009-12/msg00276.html
	Ref: https://bugs.launchpad.net/bugs/788298

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Cao jin  <caoj.fnst@cn.fujitsu.com>

	relocator16: Comments update
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Paul Menzel  <pmenzel@molgen.mpg.de>

	ahci: Increase time-out from 10 s to 32 s
	This is a cryptographically signed message in MIME format.

	Date: Thu, 9 Aug 2018 07:27:35 +0200

	Currently, the GRUB payload for coreboot does not detect the Western
	Digital hard disk WDC WD20EARS-60M AB51 connected to the ASRock E350M1,
	as that takes over ten seconds to spin up.

	```
	disk/ahci.c:533: port 0, err: 0
	disk/ahci.c:539: port 0, err: 0
	disk/ahci.c:543: port 0, err: 0
	disk/ahci.c:549: port 0, offset: 120, tfd:80, CMD: 6016
	disk/ahci.c:552: port 0, err: 0
	disk/ahci.c:563: port 0, offset: 120, tfd:80, CMD: 6016
	disk/ahci.c:566: port: 0, err: 0
	disk/ahci.c:593: port 0 is busy
	disk/ahci.c:621: cleaning up failed devs
	```

	GRUB detects the drive, when either unloading the module *ahci*, and
	then loading it again, or when doing a warm reset.

	As the ten second time-out is too short, increase it to 32 seconds,
	used by SeaBIOS. which detects the drive successfully.

	The AHCI driver in libpayload uses 30 seconds, and that time-out was
	added in commit 354066e1 (libpayload: ahci: Increase timeout for
	signature reading) with the description below.

	> We can't read the drives signature before it's ready, i.e. spun up.
	> So set the timeout to the standard 30s. Also put a notice on the
	> console, so the user knows why the signature reading failed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Cao jin  <caoj.fnst@cn.fujitsu.com>

	linux16: Code cleanup
	1. move relocator related code more close to each other
	2. use variable "len" since it has correct assignment, and keep coding
	style with upper code

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Colin Watson  <cjwatson@ubuntu.com>

	tests: Fix qemu options for UHCI test
	qemu 2.12 removed the -usbdevice option.  Use a more modern spelling
	instead, in line with other USB-related tests.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Colin Watson  <cjwatson@ubuntu.com>

	tests: Disable sercon in SeaBIOS
	SeaBIOS 1.11.0 added support for VGA emulation over a serial port, which
	interferes with grub-shell.  Turn it off.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Peter Jones  <pjones@redhat.com>

	grub-module-verifier: Report the filename or modname in errors
	Make it so that when grub-module-verifier complains of an issue, it tells you
	which module the issue was with.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Peter Jones  <pjones@redhat.com>

	configure: Fix an 8 year old typo
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Leif Lindholm  <leif.lindholm@linaro.org>

	loader/multiboot_mbi2: Use central copy of grub_efi_find_mmap_size()
	Delete local copy of function to determine required buffer size for the
	UEFI memory map, use helper in kern/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Leif Lindholm  <leif.lindholm@linaro.org>

	loader/ia64/linux: Use central copy of grub_efi_find_mmap_size()
	Delete local copy of function to determine required buffer size for the
	UEFI memory map, use helper in kern/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Leif Lindholm  <leif.lindholm@linaro.org>

	loader/i386/linux: Use central copy of grub_efi_find_mmap_size()
	Delete local copy of function to determine required buffer size for the
	UEFI memory map, use helper in kern/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	i386: Don't include lib/i386/reset.c in EFI builds
	Commit 0ba90a7f0178 ("efi: Move grub_reboot() into kernel") broke
	the build on i386-efi - genmoddep.awk bails out with message
	  grub_reboot in reboot is duplicated in kernel
	This is because both lib/i386/reset.c and kern/efi/efi.c now provide
	this function.

	Rather than explicitly list each i386 platform variant in
	Makefile.core.def, include the contents of lib/i386/reset.c only when
	GRUB_MACHINE_EFI is not set.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Restrict arm/arm64 linux loader initrd placement
	The 32-bit arm Linux kernel is built as a zImage, which self-decompresses
	down to near start of RAM. In order for an initrd/initramfs to be
	accessible, it needs to be placed within the first ~768MB of RAM.
	The initrd loader built into the kernel EFI stub restricts this down to
	512MB for simplicity - so enable the same restriction in grub.

	For arm64, the requirement is within a 1GB aligned 32GB window also
	covering the (runtime) kernel image. Since the EFI stub loader itself
	will attempt to relocate to near start of RAM, force initrd to be loaded
	completely within the first 32GB of RAM.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: Delete unused efi support from loader/arm
	The 32-bit arm efi port now shares the 64-bit linux loader, so delete
	the now unused bits from the 32-bit linux loader.

	This in turn leaves the grub-core/kern/arm/efi/misc.c unused, so
	delete that too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm/efi: Switch to arm64 linux loader
	The arm64 and arm linux kernel EFI-stub support presents pretty much
	identical interfaces, so the same linux loader source can be used for
	both architectures.

	Switch 32-bit ARM UEFI platforms over to the existing EFI-stub aware
	loader initially developed for arm64.

	This *WILL* stop non-efistub Linux kernels from booting on arm-efi.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/linux/loader: Rename functions and macros and move to common headers
	In preparation for using the linux loader for 32-bit and 64-bit platforms,
	rename grub_arm64*/GRUB_ARM64* to grub_armxx*/GRUB_ARMXX*.

	Move prototypes for now-common functions to efi/efi.h.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Add grub_efi_get_ram_base() function for arm64
	Since ARM platforms do not have a common memory map, add a helper
	function that finds the lowest address region with the EFI_MEMORY_WB
	attribute set in the UEFI memory map.

	Required for the arm64 efi linux loader to restrict the initrd
	location to where it will be accessible by the kernel at runtime.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Add central copy of grub_efi_find_mmap_size
	There are several implementations of this function in the tree.
	Add a central version in grub-core/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Arindam Nath  <arindam.nath@amd.com>

	i386/linux: Add support for ext_lfb_base
	The EFI Graphics Output Protocol can return a 64-bit
	linear frame buffer address in some firmware/BIOS
	implementations. We currently only store the lower
	32-bits in the lfb_base. This will eventually be
	passed to Linux kernel and the efifb driver will
	incorrectly interpret the framebuffer address as
	32-bit address.

	The Linux kernel has already added support to handle
	64-bit linear framebuffer address in the efifb driver
	since quite some time now.

	This patch adds the support for 64-bit linear frame
	buffer address in GRUB to address the above mentioned
	scenario.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Leif Lindholm  <leif.lindholm@linaro.org>

	commands/file: Use definitions from arm64/linux.h
	Clean up code for matching IS_ARM64 slightly by making use of struct
	linux_arm64_kernel_header and GRUB_LINUX_ARM64_MAGIC_SIGNATURE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Leif Lindholm  <leif.lindholm@linaro.org>

	commands/file: Use definitions from arm/linux.h
	Clean up code for matching IS_ARM slightly by making use of struct
	linux_arm_kernel_header and GRUB_LINUX_ARM_MAGIC_SIGNATURE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Hans de Goede  <hdegoede@redhat.com>

	efi/console: Fix the "enter" key not working on x86 tablets
	Most 8" or 7" x86 Windows 10 tablets come with volume up/down buttons and
	a power-button. In their UEFI these are almost always mapped to arrow
	up/down and enter.

	Pressing the volume buttons (sometimes by accident) will stop the
	menu countdown, but the power-button / "enter" key was not being recognized
	as enter, so the user would be stuck at the grub menu.

	The problem is that these tablets send scan_code 13 or 0x0d for the
	power-button, which officialy maps to the F3 key. They also set
	unicode_char to 0x0d.

	This commit recognizes the special case of both scan_code and unicode_char
	being set to 0x0d and treats this as an enter key press.

	This fixes things getting stuck at the grub-menu and allows the user
	to choice a grub-menu entry using the buttons on the tablet.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Cao jin  <caoj.fnst@cn.fujitsu.com>

	grub-setup: Debug message cleanup
	Variable "root" is initialized after root device probing and is null in
	current place, so, drop it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-02  Denis 'GNUtoo' Carikli  <GNUtoo@no-log.org>

	multiboot_elfxx.c: Fix compilation by fixing undeclared variable
	Without that fix we have:
	  In file included from ../../include/grub/command.h:25:0,
	                   from ../../grub-core/loader/multiboot.c:30:
	  ../../grub-core/loader/multiboot_elfxx.c: In function 'grub_multiboot_load_elf64':
	  ../../grub-core/loader/multiboot_elfxx.c:130:28: error: 'relocatable' undeclared (first use in this function)
	     "load_base_addr=0x%x\n", relocatable,

	This happens due to mistake in the commit 14ec665
	(mbi: Use per segment a separate relocator chunk).

	So, let's fix it.

2018-06-23  Leif Lindholm  <leif.lindholm@linaro.org>

	efi/fdt: Set address/size cells to 2 for empty tree
	When booting an arm* system on UEFI with an empty device tree (currently
	only when hardware description comes from ACPI), we don't currently set
	default to 1 cell (32 bits).

	Set both of these properties, to 2 cells (64 bits), to resolve issues
	with kexec on some platforms.

	This change corresponds with linux kernel commit ae8a442dfdc4
	("efi/libstub/arm*: Set default address and size cells values for an empty dtb")
	and ensures booting through grub does not behave differently from booting
	the stub loader directly.

	See also https://patchwork.kernel.org/patch/9561201/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-23  Leif Lindholm  <leif.lindholm@linaro.org>

	fdt: Move prop_entry_size to fdt.h
	To be able to resuse the prop_entry_size macro, move it to
	<grub/fdt.h> and rename it grub_fdt_prop_entry_size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-23  Will Thompson  <wjt@endlessm.com>

	grub-fs-tester: Fix losetup race
	If something else on the system is using loopback devices, then the
	device that's free at the call to `losetup -f` may not be free in the
	following call to try to use it. Instead, find and use the first free
	loopback device in a single call to losetup.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-23  Alexander Boettcher  <alexander.boettcher@genode-labs.com>

	mbi: Use per segment a separate relocator chunk
	Instead of setting up a all comprising relocator chunk for all segments,
	use per segment a separate relocator chunk.

	Currently, if the ELF is non-relocatable, a single relocator chunk will
	comprise memory (between the segments) which gets overridden by the relst()
	invocation of the movers code in grub_relocator16/32/64_boot().

	The overridden memory may contain reserved ranges like VGA memory or ACPI
	tables, which may lead to crashes or at least to strange boot behaviour.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-05  Daniel Kiper  <daniel.kiper@oracle.com>

	templates: Add missing "]"
	Commit 51be337 (templates: Update grub script template files)
	lacked one "]", so, add it.

	Reported-by: Philip <philm@manjaro.org>

2018-05-29  Daniel Kiper  <daniel.kiper@oracle.com>

	xfs: Accept filesystem with sparse inodes
	The sparse inode metadata format became a mkfs.xfs default in
	xfsprogs-4.16.0, and such filesystems are now rejected by grub as
	containing an incompatible feature.

	In essence, this feature allows xfs to allocate inodes into fragmented
	freespace.  (Without this feature, if xfs could not allocate contiguous
	space for 64 new inodes, inode creation would fail.)

	In practice, the disk format change is restricted to the inode btree,
	which as far as I can tell is not used by grub.  If all you're doing
	today is parsing a directory, reading an inode number, and converting
	that inode number to a disk location, then ignoring this feature
	should be fine, so I've added it to XFS_SB_FEAT_INCOMPAT_SUPPORTED

	I did some brief testing of this patch by hacking up the regression
	tests to completely fragment freespace on the test xfs filesystem, and
	then write a large-ish number of inodes to consume any existing
	contiguous 64-inode chunk.  This way any files the grub tests add and
	traverse would be in such a fragmented inode allocation.  Tests passed,
	but I'm not sure how to cleanly integrate that into the test harness.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Chris Murphy <lists@colorremedies.com>

2018-05-29  Oleg Solovyov  <mcpain@altlinux.org>

	grub-probe: Don't skip /dev/mapper/dm-* devices
	This patch ensures that grub-probe will find the root device placed in
	/dev/mapper/dm-[0-9]+-.* e.g. device named /dev/mapper/dm-0-luks will be
	found and grub.cfg will be updated properly, enabling the system to boot.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-05-08  Michael Chang  <mchang@suse.com>

	bufio: Round up block size to power of 2
	Rounding up the bufio->block_size to meet power of 2 to facilitate next_buf
	calculation in grub_bufio_read().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	templates: Update grub script template files
	Update grub-mkconfig.in and 10_linux.in to support grub-probe's new
	partuuid target.  Update grub.texi documentation.  The following table
	shows how GRUB_DISABLE_LINUX_UUID, GRUB_DISABLE_LINUX_PARTUUID, and
	initramfs detection interact:

	Initramfs  GRUB_DISABLE_LINUX_PARTUUID  GRUB_DISABLE_LINUX_UUID  Linux Root
	detected   Set                          Set                      ID Method

	false      false                        false                    part UUID
	false      false                        true                     part UUID
	false      true                         false                    dev name
	false      true                         true                     dev name
	true       false                        false                    fs UUID
	true       false                        true                     part UUID
	true       true                         false                    fs UUID
	true       true                         true                     dev name

	Note: GRUB_DISABLE_LINUX_PARTUUID and GRUB_DISABLE_LINUX_UUID equate to
	      'false' when unset or set to any value other than 'true'.
	      GRUB_DISABLE_LINUX_PARTUUID defaults to 'true'.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	grub-probe: Add PARTUUID detection support
	Add PARTUUID detection support grub-probe for MBR and GPT partition schemes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	disk: Update grub_gpt_partentry
	Rename grub_gpt_part_type to grub_gpt_part_guid and update grub_gpt_partentry
	to use this type for both the partition type GUID string and the partition GUID
	string entries.  This change ensures that the two GUID fields are handled more
	consistently and helps to simplify the changes needed to add Linux partition
	GUID support.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	grub-probe: Centralize GUID prints
	Define print_gpt_guid(), so there is a central function for printing
	GUID strings.  This change is a precursor for later patches which rely
	on this logic.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Olaf Hering  <olaf@aepfle.de>

	grub-install: Locale depends on nls
	With --disable-nls no locales exist.

	Avoid runtime error by moving code that copies locales into its own
	function. Return early in case nls was disabled. That way the compiler
	will throw away unreachable code, no need to put preprocessor
	conditionals everywhere to avoid warnings about unused code.

	Fix memleak by freeing srcf and dstf.
	Convert tabs to spaces in moved code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Cao jin  <caoj.fnst@cn.fujitsu.com>

	diskboot: Trivial correction on stale comments
	diskboot.img now is loaded at 0x8000 and is jumped to with 0:0x8000.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-10  Jaegeuk Kim  <jaegeuk@kernel.org>

	fs: Add F2FS support
	"F2FS (Flash-Friendly File System) is flash-friendly file system which was merged
	into Linux kernel v3.8 in 2013.

	The motive for F2FS was to build a file system that from the start, takes into
	account the characteristics of NAND flash memory-based storage devices (such as
	solid-state disks, eMMC, and SD cards).

	F2FS was designed on a basis of a log-structured file system approach, which
	remedies some known issues of the older log structured file systems, such as
	the snowball effect of wandering trees and high cleaning overhead. In addition,
	since a NAND-based storage device shows different characteristics according to
	its internal geometry or flash memory management scheme (such as the Flash
	Translation Layer or FTL), it supports various parameters not only for
	configuring on-disk layout, but also for selecting allocation and cleaning
	algorithm.", quote by https://en.wikipedia.org/wiki/F2FS.

	The source codes for F2FS are available from:

	http://git.kernel.org/cgit/linux/kernel/git/jaegeuk/f2fs.git
	http://git.kernel.org/cgit/linux/kernel/git/jaegeuk/f2fs-tools.git

	This patch has been integrated in OpenMandriva Lx 3.
	  https://www.openmandriva.org/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-04  Michael Chang  <mchang@suse.com>

	Fix packed-not-aligned error on GCC 8
	When building with GCC 8, there are several errors regarding packed-not-aligned.

	./include/grub/gpt_partition.h:79:1: error: alignment 1 of ‘struct grub_gpt_partentry’ is less than 8 [-Werror=packed-not-aligned]

	This patch fixes the build error by cleaning up the ambiguity of placing
	aligned structure in a packed one. In "struct grub_btrfs_time" and "struct
	grub_gpt_part_type", the aligned attribute seems to be superfluous, and also
	has to be packed, to ensure the structure is bit-to-bit mapped to the format
	laid on disk. I think we could blame to copy and paste error here for the
	mistake. In "struct efi_variable", we have to use grub_efi_packed_guid_t, as
	the name suggests. :)

	Tested-by: Michael Chang <mchang@suse.com>
	Tested-by: Paul Menzel <paulepanter@users.sourceforge.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-04  mike.travis@hpe.com  <mike.travis@hpe.com>

	efi/uga: Fix PCIe LER when GRUB2 accesses non-enabled MMIO data from VGA
	A GPU inserted into a PCIe I/O slot disappears during system startup.
	The problem centers around GRUB and a specific VGA init function in
	efi_uga.c. This causes an LER (Link Error Recorvery) because the MMIO
	memory has not been enabled before attempting access.

	The fix is to add the same coding used in other VGA drivers, specifically
	to add a check to insure that it is indeed a VGA controller. And then
	enable the MMIO address space with the specific bits.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-26  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: NULL pointer dereference in grub_machine_get_bootlocation()
	Read from NULL pointer canon in function grub_machine_get_bootlocation().
	Function grub_ieee1275_canonicalise_devname() may return NULL.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-14  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: split up grub_machine_get_bootlocation
	Split up some of the functionality in grub_machine_get_bootlocation into
	grub_ieee1275_get_boot_dev.  This will allow for code reuse in a follow on
	patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-14  C. Masloch  <pushbx@38.de>

	chainloader: patch in BPB's sectors_per_track and num_heads
	These fields must reflect the ROM-BIOS's geometry for CHS-based
	loaders to correctly load their next stage. Most loaders do not
	query the ROM-BIOS (Int13.08), relying on the BPB fields to hold
	the correct values already.

	Tested with lDebug booted in qemu via grub2's
	FreeDOS direct loading support, refer to
	https://bitbucket.org/ecm/ldosboot + https://bitbucket.org/ecm/ldebug
	(For this test, lDebug's iniload.asm must be assembled with
	-D_QUERY_GEOMETRY=0 to leave the BPB values provided by grub.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-14  Matthew S. Turnbull  <sparky@bluefang-logic.com>

	grub-mkconfig/10_linux: Support multiple early initrd images
	Add support for multiple, shared, early initrd images. These early
	images will be loaded in the order declared, and all will be loaded
	before the initrd image.

	While many classes of data can be provided by early images, the
	immediate use case would be for distributions to provide CPU
	microcode to mitigate the Meltdown and Spectre vulnerabilities.

	There are two environment variables provided for declaring the early
	images.

	* GRUB_EARLY_INITRD_LINUX_STOCK is for the distribution declare
	  images that are provided by the distribution or installed packages.
	  If undeclared, this will default to a set of common microcode image
	  names.

	* GRUB_EARLY_INITRD_LINUX_CUSTOM is for user created images. User
	  images will be loaded after the stock images.

	These separate configurations allow the distribution and user to
	declare different image sets without clobbering each other.

	This also makes a minor update to ensure that UUID partition labels
	stay disabled when no initrd image is found, even if early images are
	present.

	This is a continuation of a previous patch published by Christian
	Hesse in 2016:
	http://lists.gnu.org/archive/html/grub-devel/2016-02/msg00025.html

	Down stream Gentoo bug:
	https://bugs.gentoo.org/645088

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-07  Eric Snowberg  <eric.snowberg@oracle.com>

	mkimage: fix build regression in grub_mkimage_load_image
	The grub_mkimage_load_image function (commit 7542af6, mkimage: refactor a bunch
	of section data into a struct.) introduces a build regression on SPARC:

	  cc1: warnings being treated as errors
	  In file included from util/grub-mkimage32.c:23:
	  util/grub-mkimagexx.c: In function 'grub_mkimage_load_image32':
	  util/grub-mkimagexx.c:1968: error: missing initializer
	  util/grub-mkimagexx.c:1968: error: (near initialization for 'smd.sections')
	  make[2]: *** [util/grub_mkimage-grub-mkimage32.o] Error 1

	Initialize the entire section_metadata structure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  dann frazier  <dann.frazier@canonical.com>

	Revert "Keep the native terminal active when enabling gfxterm"
	This can cause an issue where GRUB is trying to display both a text and
	graphical menu on the display at the same time, resulting in a flickering
	effect when e.g. scrolling quickly through a menu (LP: #1752767).

	Revert for now while we look for a better solution for the original issue.

	This reverts commit 52ef7b23f528ce844716661d586497a177e80d5b.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: #blocks64 disk node method
	Return the 64bit number of blocks of storage associated with the device or
	instance. Where a "block" is a unit of storage consisting of the number of
	bytes returned by the package's "block-size" method. If the size cannot be
	determined, or if the number of blocks exceeds the range return -1.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: #blocks disk node method
	Return the number of blocks of storage associated with the device or
	instance. Where a "block" is a unit of storage consisting of the number
	of bytes returned by the package's "block-size" method. If the size cannot
	be determined, the #blocks method returns the maximum unsigned integer
	(which, because of Open Firmware's assumption of two's complement arithmetic,
	is equivalent to the signed number -1). If the number of blocks exceeds
	the range of an unsigned number, return 0 to alert the caller to try
	the #blocks64 command.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: block-size deblocker support method
	IEEE Std 1275-1994 Standard for Boot (Initialization Configuration)
	Firmware: Core Requirements and Practices

	3.8.3 deblocker support package

	Any package that uses the "deblocker" support package must define
	the following method, which the deblocker uses as a low-level
	interface to the device

	block-size ( -- block-len ) Return "granularity" for accesses to this
	device.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Daniel Kiper  <daniel.kiper@oracle.com>

	ieee1275: no-data-command bus specific method
	IEEE 1275-1994 Standard for Boot (Initialization Configuration)
	Firmware: Core Requirements and Practices

	E.3.2.2 Bus-specific methods for bus nodes

	A package implementing the scsi-2 device type shall implement the
	following bus-specific method:

	no-data-command ( cmd-addr -- error? )
	Executes a simple SCSI command, automatically retrying under
	certain conditions.  cmd-addr is the address of a 6-byte command buffer
	containing an SCSI command that does not have a data transfer phase.
	Executes the command, retrying indefinitely with the same retry criteria
	as retry-command.

	error? is nonzero if an error occurred, zero otherwise.
	NOTE no-data-command is a convenience function. It provides
	no capabilities that are not present in retry-command, but for
	those commands that meet its restrictions, it is easier to use.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: set-address bus specific method
	IEEE 1275-1994 Standard for Boot (Initialization Configuration)
	Firmware: Core Requirements and Practices
	E.3.2.2 Bus-specific methods for bus nodes

	A package implementing the scsi-2 device type shall implement the
	following bus-specific method:

	 set-address ( unit# target# -- )
	   Sets the SCSI target number (0x0..0xf) and unit number (0..7) to which
	   subsequent commands apply.

	This function is for devices with #address-cells == 2

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: encode-unit command for 4 addr cell devs
	Convert physical address to text unit-string.

	Convert phys.lo ... phys-high, the numerical representation, to unit-string,
	the text string representation of a physical address within the address
	space defined by this device node. The number of cells in the list
	phys.lo ... phys.hi is determined by the value of the #address-cells property
	of this node.

	This function is for devices with #address-cells == 4

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: decode-unit command for 4 addr cell devs
	decode-unit ( addr len -- phys.lo ... phys.hi )

	Convert text unit-string to physical address.

	Convert unit-string, the text string representation, to phys.lo ... phys.hi,
	the numerical representation of a physical address within the address space
	defined by this device node. The number of cells in the list
	phys.lo ... phys.hi is determined by the value of the #address-cells
	property of this node.

	This function is for devices with #address-cells == 4

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Limit nvme of_path_of_nvme to just SPARC
	Limit NVMe of_path_of_nvme to just SPARC hardware for now.  It has been
	found that non-Open Firmware hardware platforms can some how access
	this function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	ieee1275: Fix crash in of_path_of_nvme when of_path is empty
	The of_path_of_nvme function (commit 2391d57, ieee1275: add nvme
	support within ofpath) introduced a functional regression:

	On systems which are not based on Open Firmware but have at
	least one NVME device, find_obppath will return NULL and thus
	trying to append the disk name to of_path will result in a
	crash.

	The proper behavior of of_path_of_nvme is, however, to just
	return NULL in such cases, like other users of find_obppath,
	such as of_path_of_scsi.

	Reviewed-by: Eric Snowberg <eric.snowberg@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	.mod files: Strip annobin annotations and .eh_frame, and their relocations
	This way debuginfo built from the .module will still include this
	information, but the final result won't have the data we don't actually
	need in the modules, either on-disk, loaded at runtime, or in prebuilt
	images.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: avoid copying relocations for sections that won't be copied.
	Some versions of gcc include a plugin called "annobin", and in some
	build systems this is enabled by default.  This plugin creates special
	ELF note sections to track which ABI-breaking features are used by a
	binary, as well as a series of relocations to annotate where.

	If grub is compiled with this feature, then when grub-mkimage translates
	the binary to another file format which does not strongly associate
	relocation data with sections (i.e. when platform is *-efi), these
	relocations appear to be against the .text section rather than the
	original note section.  When the binary is loaded by the PE runtime
	loader, hilarity ensues.

	This issue is not necessarily limited to the annobin, but could arise
	any time there are relocations in sections that are not represented in
	grub-mkimage's output.

	This patch seeks to avoid this issue by only including relocations that
	refer to sections which will be included in the final binary.

	As an aside, this should also obviate the need to avoid -funwind-tables,
	-fasynchronous-unwind-tables, and any sections similar to .eh_frame in
	the future.  I've tested it on x86-64-efi with the following gcc command
	line options (as recorded by -grecord-gcc-flags), but I still need to
	test the result on some other platforms that have been problematic in
	the past (especially ARM Aarch64) before I feel comfortable making
	changes to the configure.ac bits:

	GNU C11 7.2.1 20180116 (Red Hat 7.2.1-7) -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow -msoft-float -mno-stack-arg-probe -mcmodel=large -mno-red-zone -m64 -mtune=generic -march=x86-64 -g3 -Os -freg-struct-return -fno-stack-protector -ffreestanding -funwind-tables -fasynchronous-unwind-tables -fno-strict-aliasing -fstack-clash-protection -fno-ident -fplugin=annobin

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: refactor a bunch of section data into a struct.
	This basically moves a bunch of the section information we pass around a
	lot into a struct, and passes a pointer to a single one of those
	instead.

	This shouldn't change the binary file output or the "grub-mkimage -v"
	output in any way.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: make locate_sections() set up vaddresses as well.
	This puts both kinds of address initialization at the same place, and also lets
	us iterate through the section list one time fewer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: rename a couple of things to be less confusing later.
	This renames some things:

	- the "strtab" and "strtab_section" in relocate_symbols are changed to "symtab"
	  instead, so as to be less confusing when "strtab" is moved to a struct in a
	  later patch.

	- The places where we pass section_vaddresses to functions are changed to also
	  be called section_vaddresses"inside those functions, so I get less confused
	  when I put addresses and vaddresses in a struct in a later patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: make it easier to run syntax checkers on grub-mkimagexx.c
	This makes it so you can treat grub-mkimagexx.c as a file you can build
	directly, so syntax checkers like vim's "syntastic" plugin, which uses
	"gcc -x c -fsyntax-only" to build it, will work.

	One still has to do whatever setup is required to make it pick the right
	include dirs, which -W options we use, etc., but this makes it so you
	can do the checking on the file you're editing, rather than on a
	different file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	aout.h: Fix missing include.
	grub_aout_load() has a grub_file_t parameter, and depending on what order
	includes land in, it's sometimes not defined.  This patch explicitly adds
	file.h to aout.h so that it will always be defined.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-26  Joakim Bech  <joakim.bech@linaro.org>

	ieee1275: fix build regression in of_path_of_nvme
	The of_path_of_nvme function (commit 2391d57, ieee1275: add nvme
	support within ofpath) introduced a build regression:
	    grub-core/osdep/linux/ofpath.c:365:21: error: comparison between pointer
	    and zero character constant [-Werror=pointer-compare]
	       if ((digit_string != '\0') && (*part_end == 'p'))

	Update digit_string to compare against the char instead of the pointer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: make linux.h safe to include for non-native builds
	<grub/machine/loader.h> (for machine arm/efi) and
	<grub/machine/kernel.h> (for machine arm/coreboot) will not always
	resolve (and will likely not be valid to) if pulled in when building
	non-native commands, such as host tools or the "file" command.
	So explicitly include them with their expanded pathnames.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: switch linux loader to linux_arm_kernel_header struct
	Use kernel header struct and magic definition to align (and coexist) with
	i386/arm64 ports.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64: align linux kernel magic macro naming with i386
	Change GRUB_ARM64_LINUX_MAGIC to GRUB_LINUX_ARM64_MAGIC_SIGNATURE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64: align linux kernel header struct naming with i386
	Rename struct grub_arm64_linux_kernel_header -> linux_arm64_kernel_header.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	i386: make struct linux_kernel_header architecture specific
	struct linux_kernel_header -> struct linux_i386_kernel_header

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	make GRUB_LINUX_MAGIC_SIGNATURE architecture-specific
	Rename GRUB_LINUX_MAGIC_SIGNATURE GRUB_LINUX_I386_MAGIC_SIGNATURE,
	to be usable in code that supports more than one image type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	Make arch-specific linux.h include guards architecture unique
	Replace uses of GRUB_LINUX_MACHINE_HEADER and GRUB_LINUX_CPU_HEADER
	with GRUB_<arch>_LINUX_HEADER include guards to prevent issues when
	including more than one of them.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/efi: move EFI_PAGE definitions to efi/memory.h
	The EFI page definitions and macros are generic and should not be confined
	to arm64 headers - so move to efi/memory.h.
	Also add EFI_PAGE_SIZE macro.

	Update loader sources to reflect new header location.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Colin Watson  <cjwatson@ubuntu.com>

	libgcrypt: Import replacement CRC operations
	The CRC implementation imported from libgcrypt 1.5.3 is arguably
	non-free, due to being encumbered by the restrictive Internet Society
	licence on RFCs (see e.g. https://wiki.debian.org/NonFreeIETFDocuments).
	Fortunately, libgcrypt has since replaced it with a version that is both
	reportedly better-optimised and doesn't suffer from this encumbrance.

	The ideal solution would be to update to a new version of libgcrypt, and
	I spent some time trying to do that.  However, util/import_gcry.py
	requires complex modifications to cope with the new version, and I
	stalled part-way through; furthermore, GRUB's libgcrypt tree already
	contains some backports of upstream changes.  Rather than allowing the
	perfect to be the enemy of the good, I think it's best to backport this
	single change to at least sort out the licensing situation.  Doing so
	won't make things any harder for a future wholesale upgrade.

	This commit is mostly a straightforward backport of
	https://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=commitdiff;h=06e122baa3321483a47bbf82fd2a4540becfa0c9,
	but I also imported bufhelp.h from libgcrypt 1.7.0 (newer versions
	required further changes elsewhere).

	I've tested that "hashsum -h crc32" still produces correct output for a
	variety of files on both i386-pc and x86_64-emu targets.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: add nvme support within ofpath
	Add NVMe support within ofpath.

	The Open Firmware text representation for a NVMe device contains the
	Namespace ID. An invalid namespace ID is one whose value is zero or whose
	value is greater than the value reported by the Number of Namespaces (NN)
	field in the Identify Controller data structure.  At the moment  only a
	single Namespace is supported, therefore the value is currently hard coded
	to one.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Daniel Kiper  <daniel.kiper@oracle.com>

	chainloader: Fix wrong break condition (must be AND not, OR)
	The definition of bpb's num_total_sectors_16 and num_total_sectors_32
	is that either the 16-bit field is non-zero and is used (in which case
	eg mkfs.fat sets the 32-bit field to zero), or it is zero and the
	32-bit field is used. Therefore, a BPB is invalid only if *both*
	fields are zero; having one field as zero and the other as non-zero is
	the case to be expected. (Indeed, according to Microsoft's specification
	one of the fields *must* be zero, and the other non-zero.)

	This affects all users of grub_chainloader_patch_bpb which are in
	chainloader.c, freedos.c, and ntldr.c

	Some descriptions of the semantics of these two fields:

	https://www.win.tue.nl/~aeb/linux/fs/fat/fat-1.html

	  The old 2-byte fields "total number of sectors" and "number of
	  sectors per FAT" are now zero; this information is now found in
	  the new 4-byte fields.

	(Here given in the FAT32 EBPB section but the total sectors 16/32 bit
	fields semantic is true of FAT12 and FAT16 too.)

	https://wiki.osdev.org/FAT#BPB_.28BIOS_Parameter_Block.29

	  19 | 2 | The total sectors in the logical volume. If this value is 0,
	  it means there are more than 65535 sectors in the volume, and the actual
	  count is stored in "Large Sectors (bytes 32-35).

	  32 | 4 | Large amount of sector on media. This field is set if there
	  are more than 65535 sectors in the volume.

	(Doesn't specify what the "large" field is set to when unused, but as
	mentioned mkfs.fat sets it to zero then.)

	https://technet.microsoft.com/en-us/library/cc976796.aspx

	  0x13 | WORD | 0x0000 |
	  Small Sectors . The number of sectors on the volume represented in 16
	  bits (< 65,536). For volumes larger than 65,536 sectors, this field
	  has a value of zero and the Large Sectors field is used instead.

	  0x20 | DWORD | 0x01F03E00 |
	  Large Sectors . If the value of the Small Sectors field is zero, this
	  field contains the total number of sectors in the FAT16 volume. If the
	  value of the Small Sectors field is not zero, the value of this field
	  is zero.

	https://staff.washington.edu/dittrich/misc/fatgen103.pdf page 10

	  BPB_TotSec16 | 19 | 2 |
	  This field is the old 16-bit total count of sectors on the volume.
	  This count includes the count of all sectors in all four regions of the
	  volume. This field can be 0; if it is 0, then BPB_TotSec32 must be
	  non-zero. For FAT32 volumes, this field must be 0. For FAT12 and
	  FAT16 volumes, this field contains the sector count, and
	  BPB_TotSec32 is 0 if the total sector count “fits” (is less than
	  0x10000).

	  BPB_TotSec32 | 32 | 4 |
	  This field is the new 32-bit total count of sectors on the volume.
	  This count includes the count of all sectors in all four regions of the
	  volume. This field can be 0; if it is 0, then BPB_TotSec16 must be
	  non-zero. For FAT32 volumes, this field must be non-zero. For
	  FAT12/FAT16 volumes, this field contains the sector count if
	  BPB_TotSec16 is 0 (count is greater than or equal to 0x10000).

	(This specifies that an unused BPB_TotSec32 field is set to zero.)

	By the way fix offsets in include/grub/fat.h.

	Tested with lDebug booted in qemu via grub2's
	FreeDOS direct loading support, refer to
	https://bitbucket.org/ecm/ldosboot + https://bitbucket.org/ecm/ldebug

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  H.J. Lu  <hjl.tools@gmail.com>

	x86-64: Treat R_X86_64_PLT32 as R_X86_64_PC32
	Starting from binutils commit bd7ab16b4537788ad53521c45469a1bdae84ad4a:

	https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=bd7ab16b4537788ad53521c45469a1bdae84ad4a

	x86-64 assembler generates R_X86_64_PLT32, instead of R_X86_64_PC32, for
	32-bit PC-relative branches.  Grub2 should treat R_X86_64_PLT32 as
	R_X86_64_PC32.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-14  Steve McIntyre  <steve@einval.com>

	Make grub-install check for errors from efibootmgr
	Code is currently ignoring errors from efibootmgr, giving users
	clearly bogus output like:

	        Setting up grub-efi-amd64 (2.02~beta3-4) ...
	        Installing for x86_64-efi platform.
	        Could not delete variable: No space left on device
	        Could not prepare Boot variable: No space left on device
	        Installation finished. No error reported.

	and then potentially unbootable systems. If efibootmgr fails, grub-install
	should know that and report it!

	We've been using similar patch in Debian now for some time, with no ill effects.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-14  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: fix OF path names for sun4v systems
	Fix the Open Firmware (OF) path property for sun4v SPARC systems.
	These platforms do not have a /sas/ within their path. Over time
	different OF addressing schemes have been supported. There
	is no generic addressing scheme that works across every HBA.

	It looks that this functionality will not work if you try to cross-install
	SPARC GRUB2 binary using e.g. x86 grub-install. By default it should work.
	However, we will also have other issues here, like lack of access to OF
	firmware/paths, which make such configs unusable anyway. So, let's leave
	this patch as is for time being. If somebody cares then he/she should fix
	the issue(s) at some point.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-14  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Add blocklist GPT support for SPARC
	Add block-list GPT support for SPARC.  The OBP "load" and "boot" methods
	are partition aware and neither command can see the partition table. Also
	neither command can address the entire physical disk. When the install
	happens, grub generates the block-list entries based on the beginning of the
	physical disk, not the beginning of the partition. This patch fixes the
	block-list entries so they match what OBP expects during boot for a GPT disk.

	T5 and above now supports GPT as well as VTOC.

	This patch has been tested on T5-2 and newer SPARC systems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-01-29  Stefan Fritsch  <fritsch@genua.de>

	ahci: Improve error handling
	Check the error bits in the interrupt status register. According to the
	AHCI 1.2 spec, "Interrupt sources that are disabled (‘0’) are still
	reflected in the status registers.", so this should work even though
	grub uses polling

	This fixes the following problem on a Fujitsu E744 laptop:

	Sometimes there is a very long delay (up to several minutes) when
	booting from hard disk. It seems accessing the DVD drive (which has no
	disk inserted) sometimes fails with some errors, which leads to each
	access being stalled until the 20s timeout triggers. This seems to
	happen when grub is trying to read filesystem/partition data.

	The problem is that the command_issue bit that is checked in the loop is
	only reset if the "HBA receives a FIS which clears the BSY, DRQ, and ERR
	bits for the command", but the ERR bit is never cleared. Therefore
	command_issue is never reset and grub waits for the timeout.

	The relevant bit in our case is the Task File Error Status (TFES), which
	is equivalent to the ERR bit 0 in tfd. But this patch also checks
	the other error bits except for the "Interface non-fatal error status"
	bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-01-29  dann frazier  <dann.frazier@canonical.com>

	Keep the native terminal active when enabling gfxterm
	grub-mkconfig will set GRUB_TERMINAL_OUTPUT to "gfxterm" unless the user
	has overridden it. On EFI systems, this will stop output from going to the
	default "console" terminal. When the EFI fw console is configured to output to
	both serial and video, this will cause GRUB to only display on video - while
	continuing to accept input from both video and serial.

	Instead of switching from "console" to "gfxterm", let's output to both.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-12-06  Julien Grall  <julien.grall@linaro.org>

	arm64/xen: Add missing #address-cells and #size-cells properties
	The properties #address-cells and #size-cells are used to know the
	number of cells for ranges provided by "regs". If they don't exist, the
	value are resp. 2 and 1.

	Currently, when multiboot nodes are created it is assumed that #address-cells
	and #size-cells are exactly 2. However, they are never set by GRUB and
	will result to later failure when the device-tree is generated by GRUB
	or contain different values.

	To prevent this failure, create the both properties in the chosen nodes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-12-06  Jordan Glover  <Golden_Miller83@protonmail.ch>

	grub-mkconfig: Fix detecting .sig files as system images
	grub-mkconfig detects detached RSA signatures for kernel images used for
	signature checking as valid images and adds them to grub.cfg as separate
	menu entries. This patch adds .sig extension to common blacklist.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-12-06  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: Fix segfault in grub-ofpathname
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-11-28  Eric Snowberg  <eric.snowberg@oracle.com>

	grub-install: Fix memory leak
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-11-24  Eric Snowberg  <eric.snowberg@oracle.com>

	ls: prevent double open
	Prevent a double open.  This can cause problems with some ieee1275
	devices, causing the system to hang.  The double open can occur
	as follows:

	grub_ls_list_files (char *dirname, int longlist, int all, int human)
	       dev = grub_device_open (device_name);
	       dev remains open while:
	       grub_normal_print_device_info (device_name);
	                dev = grub_device_open (name);

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-10-06  David E. Box  <david.e.box@linux.intel.com>

	tsc: Change default tsc calibration method to pmtimer on EFI systems
	On efi systems, make pmtimer based tsc calibration the default over the
	pit. This prevents Grub from hanging on Intel SoC systems that power gate
	the pit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Alexander Graf  <agraf@suse.de>

	efi: Free malloc regions on exit
	When we exit grub, we don't free all the memory that we allocated earlier
	for our heap region. This can cause problems with setups where you try
	to descend the boot order using "exit" entries, such as PXE -> HD boot
	scenarios.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Alexander Graf  <agraf@suse.de>

	efi: Move grub_reboot() into kernel
	The reboot function calls machine_fini() and then reboots the system.
	Currently it lives in lib/ which means it gets compiled into the
	reboot module which lives on the heap.

	In a following patch, I want to free the heap on machine_fini()
	though, so we would free the memory that the code is running in. That
	obviously breaks with smarter UEFI implementations.

	So this patch moves it into the core. That way we ensure that all
	code running after machine_fini() in the UEFI case is running from
	memory that got allocated (and gets deallocated) by the UEFI core.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	Use grub-file to figure out whether multiboot2 should be used for Xen.gz
	The multiboot2 is much more preferable than multiboot. Especiall
	if booting under EFI where multiboot does not have the functionality
	to pass ImageHandler.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	Fix util/grub.d/20_linux_xen.in: Add xen_boot command support for aarch64
	Commit d33045ce7ffcb7c1e4a60c14d5ca64b36e3c5abe introduced
	the support for this, but it does not work under x86 (as it stops
	20_linux_xen from running).

	The 20_linux_xen is run under a shell and any exits from within it:

	(For example on x86):
	+ /usr/bin/grub2-file --is-arm64-efi /boot/xen-4.9.0.gz
	[root@tst063 grub]# echo $?
	1

	will result in 20_linux_xen exiting without continuing
	and also causing grub2-mkconfig to stop processing.

	As in:

	 [root@tst063 grub]# ./grub-mkconfig | tail
	 Generating grub configuration file ...
	 Found linux image: /boot/vmlinuz-4.13.0-0.rc5.git1.1.fc27.x86_64
	 Found initrd image: /boot/initramfs-4.13.0-0.rc5.git1.1.fc27.x86_64.img
	 Found linux image: /boot/vmlinuz-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2
	 Found initrd image: /boot/initramfs-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2.img
	 		echo	'Loading Linux 0-rescue-ec082ee24aea41b9b16aca52a6d10cc2 ...'
	 		linux	/vmlinuz-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2 root=/dev/mapper/fedora_tst063-root ro single
	 		echo	'Loading initial ramdisk ...'
	 		initrd	/initramfs-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2.img
	 	}
	 }

	 ### END /usr/local/etc/grub.d/10_linux ###

	 ### BEGIN /usr/local/etc/grub.d/20_linux_xen ###

	 root@tst063 grub]#

	And no more.

	This patch wraps the invocation of grub-file to be a in subshell
	and to process the return value in a conditional. That fixes
	the issue.

	RH-BZ 1486002: grub2-mkconfig does not work if xen.gz is installed.

	CC: Fu Wei <fu.wei@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Fix compilation for x86_64-efi.

2017-09-05  Vladimir Serbinenko  <phcoder@gmail.com>

	Add a file missing in multiboot2 commit.

2017-08-30  Vladimir Serbinenko  <phcoder@google.com>

	gzio: fix unaligned access

	grub-fs-tester: Fix bashism

2017-08-30  Vladimir Serbinenko  <phcoder@gmail.com>

	Regenerate checksum.h with newer unifont.
	Old link is broken. New unifont is
	http://ftp.de.debian.org/debian/pool/main/u/unifont/xfonts-unifont_9.0.06-2_all.deb

	printf_unit_test: Disable Wformat-truncation on GCC >= 7
	We intentionally pass NULL as argument to format, hence disable the warning.

	qemu, coreboot, multiboot: Change linking address to 0x9000.
	It's common for distros to use a defective ld which links at 0x9000. Instead
	of fighting it, just move link target to 0x9000.

2017-08-30  Stefan Fritsch  <sf@sfritsch.de>

	Implement checksum verification for gunzip
	This implements the crc32 check for the gzip format. Support for zlib's
	adler checksum is not included, yet.

2017-08-30  Vladimir Serbinenko  <phcoder@gmail.com>

	xfs: Don't attempt to iterate over empty directory.
	Reported by: Tuomas Tynkkynen

2017-08-30  Patrick Steinhardt  <ps@pks.im>

	unix exec: avoid atexit handlers when child exits
	The `grub_util_exec_redirect_all` helper function can be used to
	spawn an executable and redirect its output to some files. After calling
	`fork()`, the parent will wait for the child to terminate with
	`waitpid()` while the child prepares its file descriptors, environment
	and finally calls `execvp()`. If something in the children's setup
	fails, it will stop by calling `exit(127)`.

	Calling `exit()` will cause any function registered via `atexit()` to be
	executed, which is usually the wrong thing to do in a child. And
	actually, one can easily observe faulty behaviour on musl-based systems
	without modprobe(8) installed: executing `grub-install --help` will call
	`grub_util_exec_redirect_all` with "modprobe", which obviously fails if
	modprobe(8) is not installed. Due to the child now exiting and invoking
	the `atexit()` handlers, it will clean up some data structures of the
	parent and cause it to be deadlocked in the `waitpid()` syscall.

	The issue can easily be fixed by calling `_exit(127)` instead, which is
	especially designed to be called when the atexit-handlers should not be
	executed.

2017-08-30  Vladimir Serbinenko  <phcoder@gmail.com>

	arc: Do not create spurious variable grub_arc_memory_type_t.

2017-08-14  Xuan Guo  <nbdd0121>

	Set have_exec to y on cygwin so we have grub_mkrescue.

2017-08-14  Vladimir Serbinenko  <phcoder@gmail.com>

	enforcing fixup

	multiboot fixup

	linux fixup

	yylex: Explicilty cast fprintf to void.
	It's needed to avoid warning on recent GCC.

	genmoddep: Check that no modules provide the same symbol.
	The semantics of 2 modules providing the same symbol are undefined. So
	ensure that it doesn't happen.

	Fix symbols appearing in several modules in linux*.
	If same symbol is provided by 2 modules its semantics are undefined.
	Avoid this by depending rather than double-including files.

2017-08-14  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot: disentangle multiboot and multiboot2.
	Previously we had multiboot and multiboot2 declaring the same symbols.
	This can potentially lead to aliasing and strange behaviours when e.g.
	module instead of module2 is used with multiboot2.

	Bug: #51137

2017-08-14  Vladimir Serbinenko  <phcoder@gmail.com>

	hdparm: Depend on hexdump rather than having a second copy of hexdump.

	grub.texi: Fix typo
	Reported by: 	Ori Avtalion <saltyhorse>

2017-08-07  Pete Batard  <pete@akeo.ie>

	io: add a GRUB_GZ prefix to gzio specific defines
	* This is done to avoid a conflict with a PACKED define in the EDK2

	core: use GRUB_TERM_ definitions when handling term characters
	* Also use hex value for GRUB_TERM_ESC as '\e' is not in the C standard and is not understood by some compilers

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: change heap allocation type to GRUB_EFI_LOADER_CODE
	With upcoming changes to EDK2, allocations of type EFI_LOADER_DATA may
	not return regions with execute ability. Since modules are loaded onto
	the heap, change the heap allocation type to GRUB_EFI_LOADER_CODE in
	order to permit execution on systems with this feature enabled.

	Closes: 50420

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64 linux loader: improve type portability
	In preparation for turning this into a common loader for 32-bit and 64-bit
	platforms, ensure the code will compile cleanly for either.

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Add GRUB_PE32_MAGIC definition
	Add a generic GRUB_PE32_MAGIC definition for the PE 'MZ' tag and delete
	the existing one in arm64/linux.h.

	Update arm64 Linux loader to use this new definition.

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: move fdt helper library
	There is nothing ARM64 (or even ARM) specific about the efi fdt helper
	library, which is used for locating or overriding a firmware-provided
	devicetree in a UEFI system - so move it to loader/efi for reuse.

	Move the fdtload.h include file to grub/efi and update path to
	efi/fdtload.h in source code referring to it.

2017-08-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove grub_efi_allocate_pages.
	grub_efi_allocate_pages Essentially does 2 unrelated things:
	* Allocate at fixed address.
	* Allocate at any address.

	To switch between 2 different functions it uses address == 0 as magic
	value which is wrong as 0 is a perfectly valid fixed adress to allocate at.

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: refactor grub_efi_allocate_pages
	Expose a new function, grub_efi_allocate_pages_real(), making it possible
	to specify allocation type and memory type as supported by the UEFI
	AllocatePages boot service.

	Make grub_efi_allocate_pages() a consumer of the new function,
	maintaining its old functionality.

	Also delete some left-around #if 1/#else blocks in the affected
	functions.

2017-08-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Fail if xorriso failed.
	If xorriso failed most likely we didn't generate a meaningful image.

	mkrescue: Check xorriso presence before doing anything else.
	mkrescue can't do anything useful without xorriso, so abort early if it's
	not available.

2017-08-07  Pali Rohár  <pali.rohar@gmail.com>

	* grub-core/fs/udf.c: Add support for UUID
	Use same algorithm as in libblkid from util-linux v2.30.

	1. Take first 16 bytes from UTF-8 encoded string of VolumeSetIdentifier
	2. If all bytes are hexadecimal digits, convert to lowercase and use as UUID
	3. If first 8 bytes are not all hexadecimal digits, convert those 8 bytes
	   to their hexadecimal representation, resulting in 16 bytes for UUID
	4. Otherwise, compose UUID from two parts:
	   1. part: converted first 8 bytes (which are hexadecimal digits) to lowercase
	   2. part: encoded following 4 bytes to their hexadecimal representation (16 bytes)

	So UUID would always have 16 hexadecimal digits in lowercase variant.

	According to UDF specification, first 16 Unicode characters of
	VolumeSetIdentifier should be unique value and first 8 should be
	hexadecimal characters.

	In most cases all 16 characters are hexadecimal, but e.g. MS Windows
	format.exe set only first 8 as hexadecimal and remaining as fixed
	(non-unique) which violates specification.

2017-08-07  Pali Rohár  <pali.rohar@gmail.com>

	udf: Fix reading label, lvd.ident is dstring
	UDF dstring has stored length in the last byte of buffer. Therefore last
	byte is not part of recorded characters. And empty string in dstring is
	encoded as empty buffer, including first byte (compression id).

2017-08-07  Pete Batard  <pete@akeo.ie>

	zfs: remove size_t typedef and use grub_size_t instead
	* Prevents some toolchains from issuing a warning on size_t redef.

2017-08-03  Rob Clark  <rclark@redhat.com>

	Fix a segfault in lsefi
	when protocols_per_handle returns error, we can't use the pointers we
	passed to it, and that includes trusting num_protocols.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-07-10  Vladimir Serbinenko  <phcoder@gmail.com>

	fdt: silence clang warning.

2017-07-09  Vladimir Serbinenko  <phcoder@gmail.com>

	arm-efi: Fix compilation

2017-07-09  AppChecker  <appchecker>

	crypto: Fix use after free.
	Reported by: AppChecker
	Transformed to patch by: Satish Govindarajan

2017-07-09  Vladimir Serbinenko  <phcoder@gmail.com>

	ehci: Fix compilation on i386

2017-07-09  phcoder  <phcoder@sid.debian.laptop.phnet>

	cache: Fix compilation for ppc, sparc and arm64

	ehci: Fix compilation for amd64

2017-06-29  Eric Biggers  <ebiggers@google.com>

	Allow GRUB to mount ext2/3/4 filesystems that have the encryption feature.
	On such a filesystem, inodes may have EXT4_ENCRYPT_FLAG set.
	For a regular file, this means its contents are encrypted; for a
	directory, this means the filenames in its directory entries are
	encrypted; and for a symlink, this means its target is encrypted.  Since
	GRUB cannot decrypt encrypted contents or filenames, just issue an error
	if it would need to do so.  This is sufficient to allow unencrypted boot
	files to co-exist with encrypted files elsewhere on the filesystem.

	(Note that encrypted regular files and symlinks will not normally be
	encountered outside an encrypted directory; however, it's possible via
	hard links, so they still need to be handled.)

	Tested by booting from an ext4 /boot partition on which I had run
	'tune2fs -O encrypt'.  I also verified that the expected error messages
	are printed when trying to access encrypted directories, files, and
	symlinks from the GRUB command line.  Also ran 'sudo ./grub-fs-tester
	ext4_encrypt'; note that this requires e2fsprogs v1.43+ and Linux v4.1+.

2017-05-29  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Don't use devspec to determine the OBP path
	Don't use devspec to determine the OBP path on SPARC hardware.  Within all
	versions of Linux on SPARC, the devspec returns one of three values:
	"none", "vnet-port", or "vdisk".  Unlike on PPC, none of these values
	are useful in determining the OBP path.

	Before this patch grub-ofpathname always returned the wrong value
	for a virtual disk. For example:

	% grub-ofpathname /dev/vdiskc2
	vdisk/disk@2:b

	After this patch it now returns the correct value:

	% grub-ofpathname /dev/vdiskc2
	/virtual-devices@100/channel-devices@200/disk@2:b

	Orabug: 24459765

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Fu Wei  <fu.wei@linaro.org>

	arm64: Update the introduction of Xen boot commands in docs/grub.texi
	delete: xen_linux, xen_initrd, xen_xsm
	add: xen_module

	This update bases on
	    commit 0edd750e50698854068358ea53528100a9192902
	    Author: Vladimir Serbinenko <phcoder@gmail.com>
	    Date:   Fri Jan 22 10:18:47 2016 +0100

	        xen_boot: Remove obsolete module type distinctions.

	Also bases on the module loading mechanism of Xen code:
	488c2a8 docs/arm64: clarify the documention for loading XSM support
	67831c4 docs/arm64: update the documentation for loading XSM support
	ca32012 xen/arm64: check XSM Magic from the second unknown module.

	Reviewed-by: Julien Grall <julien.grall@arm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Fu Wei  <fu.wei@linaro.org>

	util/grub.d/20_linux_xen.in: Add xen_boot command support for aarch64
	This patch adds the support of xen_boot command for aarch64:
	    xen_hypervisor
	    xen_module
	These two commands are only for aarch64, since it has its own protocol and
	commands to boot xen hypervisor and Dom0, but not multiboot.

	For other architectures, they are still using multiboot and module
	commands.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Fu Wei  <fu.wei@linaro.org>

	arm64: Add "--nounzip" option support in xen_module command
	This patch adds "--nounzip" option support in order to
	be compatible with the module command of multiboot on other architecture,
	by this way we can simplify grub-mkconfig support code.

	This patch also allow us to use zip compressed module(like Linux kernel
	for Dom0).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Julien Grall  <julien.grall@linaro.org>

	arm64/xen_boot: Fix Xen boot using GRUB2 on AARCH64
	Xen is currently crashing because of malformed compatible property for
	the boot module. This is because the property string is not
	null-terminated as requested by the ePAR spec.

	Tested-by: Fu Wei <fu.wei@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Close cdboot ihandle
	The ihandle is left open with a cd-core image.  This will cause a delay
	booting grub from a virtual cdrom in a LDOM.  It will also cause problems
	as Linux boots, since it expects the ihandle to be closed during init.

	Orabug: 25911275

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-09  Vladimir Serbinenko  <phcoder@gmail.com>

	at_keyboard: Fix falco chromebook case.
	EC is slow, so we need few delays for it to toggle the bits correctly.

	Command to enable clock and keyboard were not sent.

2017-05-09  Julius Werner  <jwerner@chromium.org>

	coreboot: Changed cbmemc to support updated console format from coreboot.

2017-05-09  Vladimir Serbinenko  <phcoder@gmail.com>

	Missing parts of previous commit

	arm_coreboot: Add Chromebook keyboard driver.

	rk3288_spi: Add SPI driver

	fdtbus: Add ability to send/receive messages on parent busses.

	Fix bug on FDT nodes with compatible property

2017-05-08  Vladimir Serbinenko  <phcoder@gmail.com>

	arm_coreboot: Support EHCI.

	ehci: Split core  code from PCI part.
	On ARM often EHCI is present without PCI and just declared in device
	tree. So splitcore from PCI part.

	arm_coreboot: Support DMA.
	This is needed to support USB and some other busses.

	arm_coreboot: Support loading linux images.

	arm_coreboot: Support grub-mkstandalone.

	arm_coreboot: Support keyboard for vexpress.

	at_keyboard: Split protocol from controller code.
	On vexpress controller is different but protocol is the same, so reuse the
	code.

	arm-coreboot: Export FDT routines.
	We need to use them from modules as well.

	arm-coreboot: Support for vexpress timer.

	Add support for device-tree-based drivers.

	arm-coreboot: Start new port.

	Rename uboot/datetime to dummy/datetime.
	It's just a stub and is not UBoot-specific.

	Rename uboot/halt.c to dummy/halt.c.
	It's not U-Boot specific and it's a stub.

	coreboot: Split parts that are platform-independent.
	We currently assume that coreboot is always i386, it's no longer the case,
	so split i386-coreboot parts from generic coreboot code.

	Refactor arm-uboot code to make it genereic.
	arm-coreboot startup code can be very similar to arm-uboot but current code has
	U-Boot specific references. So split U-Boot part from generic part.

	mkimage: Pass layout to mkimage_generate_elfXX rather than some fields.
	This allows easier extension of this function without having too long of
	arguments list.

2017-05-03  Paulo Flabiano Smorigo  <pfsmorigo@br.ibm.com>

	Add Virtual LAN support.
	This patch adds support for virtual LAN (VLAN) tagging. VLAN tagging allows
	multiple VLANs in a bridged network to share the same physical network link
	but maintain isolation:

	http://en.wikipedia.org/wiki/IEEE_802.1Q

	* grub-core/net/ethernet.c: Add check, get, and set vlan tag id.
	* grub-core/net/drivers/ieee1275/ofnet.c: Get vlan tag id from bootargs.
	* grub-core/net/arp.c: Add check.
	* grub-core/net/ip.c: Likewise.
	* include/grub/net/arp.h: Add vlantag attribute.
	* include/grub/net/ip.h: Likewise.

2017-05-03  Vladimir Serbinenko  <phcoder@gmail.com>

	strtoull: Fix behaviour on chars between '9' and 'a'.
	Reported by: Aaron Miller <aaronmiller@fb.com>

	Add strtoull test.

	Fix shebang for termux.
	Termux doesn't have a /bin/sh. So we needto use $SHELL.
	Keep /bin/sh as much as possible.

	Add termux path to dict.

	po: Use @SHELL@ rather than /bin/sh.
	/bin/sh might not exist.

	Use $(SHELL) rather than /bin/sh.
	/bin/sh doesn't exist under termux.

	Support lseek64.
	Android doesn't have 64-bit off_t, so use off64_t instead.

	Don't retrieve fstime when it's not useful.

	support busybox date.
	Busybox date doesn't understand weekdays in -d input,
	so strip them beforehand.

	fs-tester: make sh-compatible

	Remove bashisms from tests.
	Those tests don't actually need bash. Just use common shebang.

	Bump version to 2.03

2017-04-25  Vladimir Serbinenko  <phcoder@gmail.com>

	Increase version to 2.02.

2017-04-12  Vladimir Serbinenko  <phcoder@gmail.com>

	Fix remaining cases of gcc 7 fallthrough warning.
	They are all intended, so just add the relevant comment.

2017-04-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add gnulib-fix-gcc7-fallthrough.diff
	As long as the code is not upstream, add it as explicit patch for the
	case of gnulib refresh.

2017-04-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	i386, x86_64, ppc: fix switch fallthrough cases with GCC7
	In util/getroot and efidisk slightly modify exitsing comment to mostly
	retain it but still make GCC7 compliant with respect to fall through
	annotation.

	In grub-core/lib/xzembed/xz_dec_lzma2.c it adds same comments as
	upstream.

	In grub-core/tests/setjmp_tets.c declare functions as "noreturn" to
	suppress GCC7 warning.

	In grub-core/gnulib/regexec.c use new __attribute__, because existing
	annotation is not recognized by GCC7 parser (which requires that comment
	immediately precedes case statement).

	Otherwise add FALLTHROUGH comment.

	Closes: 50598

2017-04-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	btrfs: avoid "used uninitialized" error with GCC7
	sblock was local and so considered new variable on every loop
	iteration.

	Closes: 50597

2017-04-02  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpi: add missing efi_call wrapper to acpi command
	Fixed loading of ACPI tables on EFI (side effect was apparent memory
	corruption ranging from unpredictable behavior to system reset).

	Reported by Nando Eva <nando4eva@ymail.com>

2017-03-15  Vladimir Serbinenko  <phcoder@gmail.com>

	Increment version to GRUB 2.02~rc2.

	Use core2duo for bootcheck test on 64-bit EFI.
	Obviously pentium2 can't run efi64.

2017-03-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: skip iPXE block device.
	iPXE adds Simple File System Protocol to loaded image handle, as side
	effect it also adds Block IO protocol (according to comments, to work
	around some bugs in EDK2). GRUB assumes that every device with Block IO
	is disk and skips network initialization entirely. But iPXE Block IO
	implementation is just a stub which always fails for every operation
	so cannot be used. Attempt to detect and skip such devices.

	We are using media ID which iPXE sets to "iPXE" and block IO size in
	hope that no real device would announce 1B block ...

	Closes: 50518

2017-03-05  phcoder  <phcoder@gmail.com>

	xen: Fix wrong register in relocator.
	This fixes chainloading of some GRUB variants.

2017-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	video_fb: Fix blue collor if using unoptimized blitter.
	when unmapping the color what matters is the mode of source, not target.

	legacy_initrd: Strip any additional arguments to initrd.

2017-02-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: improve squash4 tests
	1. Make sure files are not multiple of block size. This will ensure tail packing
	for squash4 and may also trigger more codes paths in other filesystems.

	2. Call mksquashfs with -always-use-fragments to force tail packing.

2017-02-25  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: strip off final NULL from File Path in grub_efi_get_filename
	UEFI 2.6 9.3.6.4 File Path Media Device Path says that Path Name is
	"A NULL-terminated Path string including directory and file names".

	Strip final NULL from Path Name in each File Path node when constructing
	full path. To be on safe side, strip all of them.

	Fixes failure chainloading grub from grub, when loaded grub truncates
	image path and does not find its grub.cfg.

	https://bugzilla.opensuse.org/show_bug.cgi?id=1026344

	This was triggered by commit ce95549cc54b5d6f494608a7c390dba3aab4fba7;
	before it we built Path Name without trailing NULL, and apparently all
	other bootloaders use single File Path node, thus not exposing this bug.

2017-02-24  Andrei Borzenkov  <arvidjaar@gmail.com>

	squash4: fix handling of fragments and sparse files
	1. Do not assume block list and fragment are mutually exclusive. Squash
	can pack file tail as fragment (unless -no-fragments is specified); so
	check read offset and read either from block list or from fragments as
	appropriate.

	2. Support sparse files with zero blocks.

	3. Fix fragment read - frag.offset is absolute fragment position,
	not offset relative to ino.chunk.

	Reported and tested by Carlo Caione <carlo@endlessm.com>

2017-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Whitelist sparc64-ieee1275 as having no video modules.
	ieee1275_fb is not built on sparc64 due to virtual address issues.

2017-02-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	script: fix double free in lexer
	yylex_destroy() already frees scanner.

	Found by: Coverity scan.
	CID: 176636

2017-02-07  Vladimir Serbinenko  <phcoder@gmail.com>

	xen: Fix parsing of XZ kernel.
	In case of xz, the uncompressed size is appended to xz data which confuses
	our xz decompressor. Trim it.

2017-02-07  Vladimir Serbinenko  <phcoder@gmail.com>

	xen: Fix handling of GRUB chainloading.
	In case of GRUB we put remapper after domain pages and not at 0x0.
	In this case we use max_addr to put remapper. Unfortunately we increment
	max_addr as well in this case resulting in virt mapping mapping page
	at old max_addr and trying to boot using new max_addr.

	Closes 46014.

2017-02-04  Vladimir Serbinenko  <phcoder@gmail.com>

	linguas: Don't skip ko.po.
	Translation project doesn't require copyright disclaimers. They're independant
	from us. They're responsible for their copyright story.

2017-02-03  Vladimir Serbinenko  <phcoder@gmail.com>

	Fix truncated checksum.h.

	Regenerate checksums.h
	Screenshots contain version, so we need new checksums.

	Release 2.02-rc1.

	Fix mingw compilation.

2017-02-03  Daniel Kahn Gillmor  <dkg@fifthhorseman.net>

	documentation: Clarify documentation for special environment variable "default".
	The current documentation for the special environment variable
	"default" is confusing and unclear.  This patch attempts to clean it
	up.

	In particular, the current documentation refers to the "number or
	title", but then in the example it gives, the menu entries and
	submenus all have numbers *in* their title; furthermore, there is no
	example given about how to choose the number, or any indication about
	whether counting is zero-indexed or 1-indexed.

	Having a cleaner example and presenting all variants (numeric, title,
	and id) should make it clearer to the user.

2017-02-03  Vladimir Serbinenko  <phcoder@gmail.com>

	Avoid causing kernel oops in nilfs2 test.
	1024-byte and 2048-byte blocks don't really work with some kernels, skip
	them as we don't want any oops'es.

	btrfs: Shorten label by one character.
	mkfs.btrfs imposes a slightly lower limit than would be possible in btrfs.

2017-02-02  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-fs-tester: Fix mkudffs invocation.
	With current invocation order of arguments is wrong and path is hardcoded.

	grub-fs-tester: Fix fat test.
	mkfs.vfat ignores -S when invoked on a disk, including loopback device,
	so do an mkfs on underlying image.

2017-02-02  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/relocator: Align stack in grub_relocator64_efi relocator
	Unified Extensible Firmware Interface Specification, Version 2.6,
	section 2.3.4, x64 Platforms, boot services, says among others:
	The stack must be 16-byte aligned. So, do it. Otherwise OS may
	boot only by chance as it happens right now.

2017-02-02  Vladimir Serbinenko  <phcoder@gmail.com>

	i386-ieee1275: Add missing bootcheck target.

	bootcheck-linux-i386: Use -cpu pentium2.
	Most modern kernels are compiled for i686, so use -cpu pentium2
	to avoid spurious failures.

	Use -fPIC with arm64 with clang.
	Currently it doesn't work either way but with -fPIC it should work once
	clang bug is fixed.

	INSTALL: Fix mention of thumb-clang.

	Fix thumb compilation with clang.
	According to EABI only STT_FUNC has convention of lowest bit indicating
	execution mode. R_THM_{JUMP,CALL}* relocations are assumed to be pointing
	to thumb mode unless they use STT_FUNC.

2017-02-01  Vladimir Serbinenko  <phcoder@gmail.com>

	Add missing strtoull_test.c
	It was forgotten in my local directory.

	arm64: Add support for GOT and PCREL32 relocations.

	mkimage: Fix memory leak.

	arm/arm64: Fix improper use of start address.
	It was used instead of loading address of current section or of entire buffer.

	ia64: Fix iterator for relocation entries.
	Don't assume relocation entry size and use sh_entsize properly.

	arm: Fix trampoline generation.
	We used the wrong pointer in this case. It worked only by accident.

	Fix bootcheck-related files compilation.
	We need -static as otherwise linker will set interpreter field and ld.so
	is not available on our initrd's.
	Strip all sections we don't need on binary tests.

2017-01-31  Vladimir Serbinenko  <phcoder@gmail.com>

	Regenerate checksum.h.
	Screenshots checked.
	Using unifont from http://ftp.us.debian.org/debian/pool/main/u/unifont/xfonts-unifont_7.0.06-1_all.deb.

	grub-mkfont: Remove leftover debug statement.

	charset: Trim away RLM and LRM.
	They are not visible but would otherwise end up as [LRM] or [RLM] squares
	with some fonts.

	gfxterm: Fix clearing of cursor.
	If ascent is bigger than height - 2, then we draw over character box but then
	to clear cursor we only draw over character box. So trim ascent if necessarry.

	ia64: Add support for R_IA64_GPREL64I.
	Recent GCC generates those relocations, so we need to support them.

2017-01-30  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-module-verifier: Add mips to all_video whitelist.
	On MIPS video is compiled-in. So all_video is empty. Whitelist it.

	Fix -nopie/-nopie check.
	We don't use lgcc_s but missing lgcc_s or another library cause test to fail.
	So use -nostdlib.
	We need to use -Werror to avoid warning-generated case to be accepted.
	Clang uses -nopie rather than -no-pie. Check both and use whichever one works.
	Additionally android clang passes -pie to the linker even though it doesn't
	define __PIE__. So if compilation without no-pie logic fails add -nopie/-no-pie
	even if __PIE__ is not defined.

	grub-module-verifier: Ignore all_video emptiness on xen.
	It's intentional that it's empty when no video modules
	are available.

2017-01-28  Vladimir Serbinenko  <phcoder@gmail.com>

	Support arm clang 3.8 amd later.
	clang 3.8 and later doesn't support -mllvm -use-arm-movt=0
	whereas older clang doesn't know -mno-movt. So use
	-mno-movt whenever possible and fallback to mllvm variant.

2017-01-27  Carlo Caione  <carlo@endlessm.com>

	exfat: Support files over 4GiB
	file size in grub_fat_data was 32-bit on exfat.

2017-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Ensure that grub_reboot doesn't return on emu.
	Use grub_fatal if longjmp fails.

	grub_reboot is marked as noreturn so return would cause
	a crash.

2017-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-shell: skip font copying when no font is available.

	Don't use -mlong-calls on arm.
	We don't really need it and it's flaky and creates
	bogus symbols with clang.

	configure: Disable movw/movt with clang.
	Those relocations are not compatible with PE and also
	not compatible with custom uboot relocator.
	Disable them.

	grub-fs-tester: Delete directory once we're done.

	grub-fs-tester: Accomodate for slower systems.
	fstime can be more different with xz squashfs.
	Allow difference up to 3 seconds.
	This code is ugly now but rewriting it now is not on the
	table.

	grub-fs-tester: Accomodate for testing in proot containers.
	proot creates hidden files with .proot prefix and name
	derived from real file name. So decrease file name length
	and path depth. For some reason depth 85 also results in
	undeleteable directory, so use 84 instead of 85.

2017-01-24  Andrei Borzenkov  <arvidjaar@gmail.com>

	osdep/linux: handle autofs entries in /proc/self/mountinfo
	These entries have placeholder for device name and so are useless for our
	purpose. grub failed with something like

	grub-install: error: failed to get canonical path of `systemd-1'.

	When we see autofs entry, record it (to keep parent-child relationship) but
	continue to look for real mount. If it is found, we process it as usual. If
	only autofs entry exists, attempt to trigger mount by opening mount point
	and retry. Mount point itself is then kept open to avoid timeout.

	Recent systemd is by default using automount for /boot/efi so this should
	become more popular problem on EFI systems.

	Closes: 49942

2017-01-08  Andrei Borzenkov  <arvidjaar@gmail.com>

	linux: fix "vga=XX deprecated" warning for text mode
	Arguments were in reverse order which resulted in

	text is deprecated. Use set gfxpayload=vga=0 before linux command instead.

2016-12-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: fix check for sys/sysmacros.h under glibc 2.25+
	glibc 2.25 still includes sys/sysmacros.h in sys/types.h but also emits
	deprecation warning. So test for sys/types.h succeeds in configure but later
	compilation fails because we use -Werror by default.

	While this is fixed in current autoconf GIT, we really cannot force everyone
	to use bleeding edge (that is not even released right now). So run test under
	-Werror as well to force proper detection.

	This should have no impact on autoconf 2.70+ as AC_HEADER_MAJOR in this version
	simply checks for header existence.

	Reported and tested by Khem Raj <raj.khem@gmail.com>

2016-12-22  Michael Chang  <mchang@suse.com>

	Fix fwpath in efi netboot
	The path returned by grub_efi_net_config has already been stripped for the
	directory part extracted from cached bootp packet. We should just return the
	result to avoild it be stripped again.

	It fixed the problem that grub.efi as NBP image always looking for grub.cfg and
	platform directory in upper folder rather than current one it gets loaded while
	$prefix is empty. The behavior is inconsistent with other architecture and how
	we would expect empty $prefix going to be in general.

	The only exception to the general rule of empty $prefix is that when loaded
	from platform directory itself, the platform part is stripped thus upper folder
	is used for looking up files. It meets the case for how grub-mknetdir lay out
	the files under tftp root directory, but also hide away this issue to be
	identified as it appears to be just works.

	Also fix possible memory leak by moving grub_efi_get_filename() call after
	grub_efi_net_config().

2016-12-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: properly terminate filepath with NULL in chainloader
	EFI File Path Media Device Path is defined as NULL terminated string;
	but chainloader built file paths without final NULL. This caused error
	with Secure Boot and Linux Foundation PreLoader on Acer with InsydeH20 BIOS.
	Apparently firmware failed verification with EFI_INVALID_PARAMETER which is
	considered fatal error by PreLoader.

	Reported and tested by Giovanni Santini <itachi.sama.amaterasu@gmail.com>

2016-12-14  Magnus Granberg  <zorry@gentoo.org>

	configure: add check for -no-pie if the compiler default to -fPIE
	When Grub is compile with gcc 6.1 that have --enable-defult-pie set.
	It fail with.
	-ffreestanding   -m32 -Wl,-melf_i386 -Wl,--build-id=none  -nostdlib -Wl,-N -Wl,-r,-d   -
	o trig.module  trig_module-trigtables.o
	grep 'MARKER' gcry_whirlpool.marker.new > gcry_whirlpool.marker; rm -f
	gcry_whirlpool.marker.new
	/usr/lib/gcc/x86_64-pc-linux-gnu/6.1.0/../../../../x86_64-pc-linux-gnu/bin/ld: -r and -
	shared may not be used together
	collect2: error: ld returned 1 exit status
	Makefile:26993: recipe for target 'trig.module' failed

	Check that compiler supports -no-pie and add it to linker flags.

2016-12-14  Stanislav Kholmanskikh  <stanislav.kholmanskikh@oracle.com>

	ofnet: implement the receive buffer
	get_card_packet() from ofnet.c allocates a netbuff based on the device's MTU:

	 nb = grub_netbuff_alloc (dev->mtu + 64 + 2);

	In the case when the MTU is large, and the received packet is
	relatively small, this leads to allocation of significantly more memory,
	than it's required. An example could be transmission of TFTP packets
	with 0x400 blksize via a network card with 0x10000 MTU.

	This patch implements a per-card receive buffer in a way similar to efinet.c,
	and makes get_card_packet() allocate a netbuff of the received data size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-12-14  Stanislav Kholmanskikh  <stanislav.kholmanskikh@oracle.com>

	ofnet: move the allocation of the transmit buffer into a function
	In the current code search_net_devices() uses the "alloc-mem" command
	from the IEEE1275 User Interface for allocation of the transmit buffer
	for the case when GRUB_IEEE1275_FLAG_VIRT_TO_REAL_BROKEN is set.

	I don't have hardware where this flag is set to verify if this
	workaround is still needed. However, further changes to ofnet will
	require to execute this workaround one more time. Therefore, to
	avoid possible duplication of code I'm moving this piece of
	code into a function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-24  Alexander Graf  <agraf@suse.de>

	efi: Move fdt helper into own file
	We only support FDT files with EFI on arm and arm64 systems, not
	on x86. So move the helper that finds a prepopulated FDT UUID
	into its own file and only build it for architectures where it
	also gets called.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS updates

2016-11-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: export next server IP as environment variable
	Network boot autoconfiguration sets default server to next server IP
	(siaddr) from BOOTP/DHCP reply, but manual configuration using net_bootp
	exports only server name. Unfortunately semantic of server name is not
	clearly defined. BOOTP RFC 951 defines it only for client request, and
	DHCP RFC 1541 only mentions it, without any implied usage. It looks like
	this field is mostly empty in server replies.

	Export next server IP as net_<interface>_next_server variable. This allows
	grub configuration script to set $root/$prefix based on information obtained
	by net_bootp.

	Reported and tested by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
	Cc: nikunj@linux.vnet.ibm.com

	v2: change variable name to net_<interface>_next_server as discussed on the list

2016-11-22  Aaro Koskinen  <aaro.koskinen@iki.fi>

	configure.ac: don't require build time grub-mkfont on powerpc-ieee1275
	Don't require build time grub-mkfont on powerpc-ieee1275.

2016-11-14  Dirk Mueller  <dmueller@suse.com>

	grub-mknetdir: Add support for ARM64 EFI

2016-11-12  Joonas Lahtinen  <joonas.lahtinen@linux.intel.com>

	.gitignore: Add grub-core/build-grub-module-verifier

2016-11-10  Alexander Graf  <agraf@suse.de>

	arm efi: Use fdt from firmware when available
	If EFI is nice enough to pass us an FDT using configuration tables on 32bit
	ARM, we should really try and make use of it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-10  Alexander Graf  <agraf@suse.de>

	arm64: Move firmware fdt search into global function
	Searching for a device tree that EFI passes to us via configuration tables
	is nothing architecture specific. Move it into generic code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-05  Corey Hickey  <bugfood-ml@fatooh.org>

	fix detection of non-LUKS CRYPT
	grub_util_get_dm_abstraction() does a string comparison of insufficient
	length. When using a UUID such as "CRYPT-PLAIN-sda6_crypt", the function
	returns GRUB_DEV_ABSTRACTION_LUKS.

	This results in the error:
	    ./grub-probe: error: disk `cryptouuid/sda6_crypt' not found.

	This appears to be a copy/paste error introduced in:
	a10e7a5a8918bea6e2632055129fa9b516fe965a

	The bug was (apparently) latent until revealed by:
	3bca85b4184f74995a7cc2791e432173fde26d34

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: add capability to load p2m list outside of kernel mapping
	Modern pvops linux kernels support a p2m list not covered by the
	kernel mapping. This capability is flagged by an elf-note specifying
	the virtual address the kernel is expecting the p2m list to be mapped
	to.

	In case the elf-note is set by the kernel don't place the p2m list
	into the kernel mapping, but map it to the given address. This will
	allow to support domains with larger memory, as the kernel mapping is
	limited to 2GB and a domain with huge memory in the TB range will have
	a p2m list larger than this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: modify page table construction
	Modify the page table construction to allow multiple virtual regions
	to be mapped. This is done as preparation for removing the p2m list
	from the initial kernel mapping in order to support huge pv domains.

	This allows a cleaner approach for mapping the relocator page by
	using this capability.

	The interface to the assembler level of the relocator has to be changed
	in order to be able to process multiple page table areas.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: add capability to load initrd outside of initial mapping
	Modern pvops linux kernels support an initrd not covered by the initial
	mapping. This capability is flagged by an elf-note.

	In case the elf-note is set by the kernel don't place the initrd into
	the initial mapping. This will allow to load larger initrds and/or
	support domains with larger memory, as the initial mapping is limited
	to 2GB and it is containing the p2m list.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: factor out allocation of page tables into separate function
	Do the allocation of page tables in a separate function. This will
	allow to do the allocation at different times of the boot preparations
	depending on the features the kernel is supporting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: factor out allocation of special pages into separate function
	Do the allocation of special pages (start info, console and xenbus
	ring buffers) in a separate function. This will allow to do the
	allocation at different times of the boot preparations depending on
	the features the kernel is supporting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: factor out p2m list allocation into separate function
	Do the p2m list allocation of the to be loaded kernel in a separate
	function. This will allow doing the p2m list allocation at different
	times of the boot preparations depending on the features the kernel
	is supporting.

	While at this remove superfluous setting of first_p2m_pfn and
	nr_p2m_frames as those are needed only in case of the p2m list not
	being mapped by the initial kernel mapping.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: synchronize xen header
	Get actual version of include/xen/xen.h from the Xen repository in
	order to be able to use constants defined there.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: add elfnote.h to avoid using numbers instead of constants
	Various features and parameters of a pv-kernel are specified via
	elf notes in the kernel image. Those notes are part of the interface
	between the Xen hypervisor and the kernel.

	Instead of using num,bers in the code when interpreting the elf notes
	make use of the header supplied by Xen for that purpose.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: reduce number of global variables in xen loader
	The loader for xen paravirtualized environment is using lots of global
	variables. Reduce the number by making them either local or by putting
	them into a single state structure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: avoid memleaks on error
	When loading a Xen pv-kernel avoid memory leaks in case of errors.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: make xen loader callable multiple times
	The loader for xen paravirtualized environment isn't callable multiple
	times as it won't free any memory in case of failure.

	Call grub_relocator_unload() as other modules do it before allocating
	a new relocator or when unloading the module.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Add support for relocatable images
	Currently multiboot2 protocol loads image exactly at address specified in
	ELF or multiboot2 header. This solution works quite well on legacy BIOS
	platforms. It is possible because memory regions are placed at predictable
	addresses (though I was not able to find any spec which says that it is
	strong requirement, so, it looks that it is just a goodwill of hardware
	designers). However, EFI platforms are more volatile. Even if required
	memory regions live at specific addresses then they are sometimes simply
	not free (e.g. used by boot/runtime services on Dell PowerEdge R820 and
	OVMF). This means that you are not able to just set up final image
	destination on build time. You have to provide method to relocate image
	contents to real load address which is usually different than load address
	specified in ELF and multiboot2 headers.

	This patch provides all needed machinery to do self relocation in image code.
	First of all GRUB2 reads min_addr (min. load addr), max_addr (max. load addr),
	align (required image alignment), preference (it says which memory regions are
	preferred by image, e.g. none, low, high) from multiboot_header_tag_relocatable
	header tag contained in binary (at this stage load addresses from multiboot2
	and/or ELF headers are ignored). Later loader tries to fulfill request (not only
	that one) and if it succeeds then it informs image about real load address via
	multiboot_tag_load_base_addr tag. At this stage GRUB2 role is finished. Starting
	from now executable must cope with relocations itself using whole static and
	dynamic knowledge provided by boot loader.

	This patch does not provide functionality which could do relocations using
	ELF relocation data. However, I was asked by Konrad Rzeszutek Wilk and Vladimir
	'phcoder' Serbinenko to investigate that thing. It looks that relevant machinery
	could be added to existing code (including this patch) without huge effort.
	Additionally, ELF relocation could live in parallel with self relocation provided
	by this patch. However, during research I realized that first of all we should
	establish the details how ELF relocatable image should look like and how it should
	be build. At least to build proper test/example files.

	So, this patch just provides support for self relocatable images. If ELF file
	with relocs is loaded then GRUB2 complains loudly and ignores it. Support for
	such files will be added later.

	This patch was tested with Xen image which uses that functionality. However, this Xen
	feature is still under development and new patchset will be released in about 2-3 weeks.

	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Do not pass memory maps to image if EFI boot services are enabled
	If image requested EFI boot services then skip multiboot2 memory maps.
	Main reason for not providing maps is because they will likely be
	invalid. We do a few allocations after filling them, e.g. for relocator
	needs. Usually we do not care as we would have finished boot services.
	If we keep boot services then it is easier/safer to not provide maps.
	However, if image needs memory maps and they are not provided by bootloader
	then it should get itself just before ExitBootServices() call.

	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Add tags used to pass ImageHandle to loaded image
	Add tags used to pass ImageHandle to loaded image if requested.
	It is used by at least ExitBootServices() function.

	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/relocator: Add grub_relocator64_efi relocator
	Add grub_relocator64_efi relocator. It will be used on EFI 64-bit platforms
	when multiboot2 compatible image requests MULTIBOOT_TAG_TYPE_EFI_BS. Relocator
	will set lower parts of %rax and %rbx accordingly to multiboot2 specification.
	On the other hand processor mode, just before jumping into loaded image, will
	be set accordingly to Unified Extensible Firmware Interface Specification,
	Version 2.4 Errata B, section 2.3.4, x64 Platforms, boot services. This way
	loaded image will be able to use EFI boot services without any issues.

	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-18  Sakar Arora  <Sakar.Arora@nxp.com>

	net/ip: Fix limit_time calculation in freeing old fragments
	limit_time underflows when current time is less than 90000ms.
	This causes packet fragments received during this time, i.e.,
	till 90000ms pass since timer init, to be rejected.

	Hence, set it to 0 if its less than 90000.

2016-09-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	asm-tests/i386-pc: Check that movl is 5 bytes.
	LLVM 3.9 now emits short form of jump instructions, but it is still using
	32 bit addresses for some movl instructions. Fortunately it was caught early:

	clang ... boot/i386/pc/boot.S
	clang -cc1as: fatal error: error in backend: invalid .org offset '440' (at offset '441')

	Add additional check to catch it during configure run and force -no-integrated-as.

	Closes: 49200

	More details in
	  https://lists.gnu.org/archive/html/grub-devel/2015-02/msg00099.html
	  https://llvm.org/bugs/show_bug.cgi?id=22662

2016-08-13  Pete Batard  <pete@akeo.ie>

	Add missing va_end() to xasprintf() in grub-emu.

2016-07-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	at_keyboard: fix numpad "0" and "." mapping
	Reported for set 1 by fgndevelop <fgndevelop@posteo.org>. Apparently
	set 2 was reversed too.

2016-07-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	dns: fix buffer overflow for data->addresses in recv_hook
	We may get more than one response before exiting out of loop in
	grub_net_dns_lookup, but buffer was allocated for the first response only,
	so storing answers from subsequent replies wrote past allocated size.
	We never really use more than the very first address during lookup so there
	is little point in collecting all of them. Just quit early if we already have
	some reply.

	Code needs serious redesign to actually collect multiple answers
	and select the best fit according to requested type (IPv4 or IPv6).

	Reported and tested by Michael Chang <mchang@suse.com>

2016-07-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	xfs: accept filesystem with meta_uuid
	XFS V5 stores UUID in metadata and compares them with superblock UUID.
	To allow changing of user-visible UUID it stores original value in new
	superblock field (meta_uuid) and sets incompatible flag to indicate that
	new field must be used to verify metadata. Our driver currently does not
	check metadata UUID so simply accept such filesystem.

	Reported-By: Marcos Mello <marcosfrm@outlook.com>
	Reviewd by Jan Kara <jack@suse.cz>

2016-05-03  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: translate pxe prefix to tftp when checking for self-load
	Commit ba218c1 missed legacy pxe and pxe: prefixes which are
	translated to tftp, so comparison failed.

2016-04-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: reset net->stall in grub_net_seek_real
	If we open new connection, we need to reset stall indication, otherwise
	nothing will ever be polled (low level code rely on this field being
	zero when establishing connection).

2016-04-30  Stefan Fritsch  <sf@sfritsch.de>

	http: reset EOF indication in http_seek
	Otherwise next read will stop polling too early due to stale EOF
	indicator, returning incomplete data to caller.

2016-04-24  Mike Gilbert  <floppym@gentoo.org>

	build: Use AC_HEADER_MAJOR to find device macros
	Depending on the OS/libc, device macros are defined in different
	headers. This change ensures we include the right one.

	sys/types.h - BSD
	sys/mkdev.h - Sun
	sys/sysmacros.h - glibc (Linux)

	glibc currently pulls sys/sysmacros.h into sys/types.h, but this may
	change in a future release.

	https://sourceware.org/ml/libc-alpha/2015-11/msg00253.html

2016-04-09  Michael Chang  <mchang@suse.com>

	http: fix superfluous null line in range request header
	At least the apache sever is very unhappy with that extra null line and will
	take more than ten seconds in responding to each range request, which slows
	down a lot the entire http file transfer process or even time out.

2016-03-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: set -fno-pie together with -fno-PIE
	OpenBSD 5.9 apparently defaults to -fpie. We use -fno-PIE when appropriate
	already, but that is not enough - it does not turn off -fpie.

	Actually check for -fPIE is not precise enough. __PIE__ is set for both
	-fpie and -fPIE but with different values. As far as I can tell, both
	options were introduced at the same time, so both should always be supported.

	This fixes compilation on OpenBSD 5.9 which otherwise created insanely big
	lzma_decompress.img.

	Reported, suggested and tested by: Jiri B <jirib@devio.us>

2016-03-20  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: check that interface is not NULL in configure_by_dhcp_ack
	grub_net_add_addr may fail with OOM and we use returned interface
	later without any checks.

2016-03-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: fix memory leak in grub_cmd_dhcpopt

2016-03-15  Aaron Luft  <aluft@lifesize.com>

	Remove the variable oldname which is attempting to free stack space.
	Historically this variable hold previous value of filename that
	had to be freed if allocated previously. Currently this branch
	is entered only if filename was not allocated previously so it
	became redundant. It did not cause real problems because grub_free
	was not called, but code is confusing and causes compilation error
	in some cases.

2016-03-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	Makefile.util.def: add $LIBINTL to grub-macbless flags
	Fixes compilation on OpenBSD 5.9.

	Reported by Jiri B <jirib@devio.us>

2016-03-11  Robert Marshall  <rmarshall@redhat.com>

	Failed config now returns exit code (#1252311)
	Grub would notify the user if the new config was invalid, however, it
	did not exit properly with exit code 1. Added the proper exit code.

	Resolves: rhbz#1252311

2016-03-11  Michael Chang  <mchang@suse.com>

	xen_file: Fix invalid payload size

2016-03-10  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot2: Remove useless GRUB_PACKED
	Reported by: Daniel Kiper

2016-03-06  Andrei Borzenkov  <arvidjaar@gmail.com>

	20_linux_xen: fix test for GRUB_DEVICE
	Same fix as in 082bc9f.

2016-03-06  Mike Gilbert  <floppym@gentoo.org>

	10_linux: Fix grouping of tests for GRUB_DEVICE
	Commit 7290bb562 causes GRUB_DISABLE_LINUX_UUID to be ignored due to
	mixing of || and && operators. Add some parens to help with that.

2016-02-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS update

2016-02-28  Vladimir Serbinenko  <phcoder@gmail.com>

	Release 2.02~beta3

	grub_arch_sync_dma_caches: Accept volatile address

2016-02-27  Leif Lindholm  <leif.lindholm@linaro.org>

	efidisk: Respect block_io_protocol buffer alignment
	Returned from the OpenProtocol operation, the grub_efi_block_io_media
	structure contains the io_align field, specifying the minimum alignment
	required for buffers used in any data transfers with the device.

	Make grub_efidisk_readwrite() allocate a temporary buffer, aligned to
	this boundary, if the buffer passed to it does not already meet the
	requirements.

	Also sanity check the io_align field in grub_efidisk_open() for
	power-of-two-ness and bail if invalid.

2016-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	usbtrans: Fix memory coherence and use-after-free.

	ehci: Fix memory coherence
	This is a no-op on x86 but necessarry on ARM and may be necessarry on MIPS.

	arm-uboot: Make self-relocatable to allow loading at any address

	Allow _start == 0 with relocatable images

2016-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Provide __bss_start and _end symbols in grub-mkimage.
	For this ensure that all bss sections are merged.

	We need this to correctly prelink non-PE relocatable images.

2016-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Encapsulate image layout into a separate structure.
	Currently we pass around a lot of pointer. Instead put all relevant data
	into one structure.

	mkimagexx: Split PE and generic part for relocations.
	As a preparation for U-Boot relocations, split emitting PE-relocations
	from parsing source ELF-relocations.

	mkimage.c: Split into separate files.
	util/grub-mkimagexx.c is included in a special way into mkimage.c.
	Interoperation between defines makes this very tricky. Instead
	just have a clean interface and compile util/grub-mkimage*.c separately
	from mkimage.c

	bsd: Ensure that kernel is loaded before loading module.
	kernel_type may be set to the type of failed kernel. This patching-up is
	easier than to reflow kernel loading routines.

	cat: Don't switch terminal mode when there is nothing to highlight.
	This just pollutes serial console.

	Use console rather than serial_efi0 on arm64-efi in tests

2016-02-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	efidisk: fix misplaced parenthesis in b00e4c2

2016-02-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	efidisk: prevent errors from diskfilter scan of removable drives
	Map EFI_NO_MEDIA to GRUB_ERR_OUT_OF_RANGE that is ignored by diskfilter. This
	actually matches pretty close (we obviously attempt to read outside of media)
	and avoids adding more error codes.

	This affects only internally initiated scans. If read/write from removable is
	explicitly requested, we still return an error and text explanation is more
	clear for user than generic error.

	Reported and tested by Andreas Loew <Andreas.Loew@gmx.net>

2016-02-26  Vladimir Serbinenko  <phcoder@gmail.com>

	Regenerate checksums

	Makefile: Don't delete default_payload.elf if it doesn't exist.

2016-02-25  Josef Bacik  <jbacik@fb.com>

	net: fix ipv6 routing
	ipv6 routing in grub2 is broken, we cannot talk to anything outside our local
	network or anything that doesn't route in our global namespace.  This patch
	fixes this by doing a couple of things

	1) Read the router information off of the router advertisement.  If we have a
	router lifetime we need to take the source address and create a route from it.

	2) Changes the routing stuff slightly to allow you to specify a gateway _and_ an
	interface.  Since the router advertisements come in on the link local address we
	need to associate it with the global address on the card.  So when we are
	processing the router advertisement, either use the SLAAC interface we create
	and add the route to that interface, or loop through the global addresses we
	currently have on our interface and associate it with one of those addresses.
	We need to have a special case here for the default route so that it gets used,
	we do this by setting the masksize to 0 to mean it encompasses all networks.
	The routing code will automatically select the best route so if there is a
	closer match we will use that.

	With this patch I can now talk to ipv6 addresses outside of my local network.
	Thanks,

2016-02-24  Vladimir Serbinenko  <phcoder@gmail.com>

	ieee1275: fix signed comparison

2016-02-23  Andrei Borzenkov  <arvidjaar@gmail.com>

	search: actually skip floppy with --no-floppy
	grub_device_iterate() ignores device when iterator returns 1, not 0.

	Reported by Carlos E. R. <robin.listas@telefonica.net>

2016-02-23  Andrei Borzenkov  <arvidjaar@gmail.com>

	multiboot2: zero reserved field in memory map
	Documentation says, bootloader should set reserved field to zero.

	Reported by Wink Saville <wink@saville.com>

2016-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Improve EHCI logging
	Add dprintf's on common error paths and remove some entries which are too
	noisy.

	usb_keyboard: Remove useless include
	This prevents non-PCI machines from having USB.

	Refresh before abort
	This ensures that abort message is actually visible to the user.

2016-02-22  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: prevent buffer over-read
	Prevent buffer over-read in grub_machine_mmap_iterate. This was
	causing phys_base from being calculated properly. This then
	caused the wrong value to be placed in ramdisk_image within
	struct linux_hdrs. Which prevented the ramdisk from loading on
	boot.

	Newer SPARC systems contain more than 8 available memory entries.

	For example on a T5-8 with 2TB of memory, the memory layout could
	look like this:

	T5-8 Memory
	reg                      00000000 30000000 0000003f b0000000
	                         00000800 00000000 00000040 00000000
	                         00001000 00000000 00000040 00000000
	                         00001800 00000000 00000040 00000000
	                         00002000 00000000 00000040 00000000
	                         00002800 00000000 00000040 00000000
	                         00003000 00000000 00000040 00000000
	                         00003800 00000000 00000040 00000000
	available                00003800 00000000 0000003f ffcae000
	                         00003000 00000000 00000040 00000000
	                         00002800 00000000 00000040 00000000
	                         00002000 00000000 00000040 00000000
	                         00001800 00000000 00000040 00000000
	                         00001000 00000000 00000040 00000000
	                         00000800 00000000 00000040 00000000
	                         00000000 70000000 0000003f 70000000
	                         00000000 6eef8000 00000000 00002000
	                         00000000 30400000 00000000 3eaf6000
	name                     memory

2016-02-22  Thomas Huth  <thuth@redhat.com>

	menu_entry: Disable cursor during update_screen()
	When running grub in a VGA console of a KVM pseries guest on PowerPC,
	you can see the cursor sweeping over the whole line when entering a
	character in editor mode. This is visible because grub always refreshes
	the whole line when entering a character in editor mode, and drawing
	characters is quite a slow operation with the firmware used for the
	powerpc pseries guests (SLOF).
	To avoid this ugliness, the cursor should be disabled when refreshing
	the screen contents during update_screen().

2016-02-17  Vladimir Serbinenko  <phcoder@gmail.com>

	default_payload.elf: Always rebuild and remove before build.
	It's difficult to know all dependencies. Since it's manual and cheap
	target anyway, simply always rebuild it.

	default_payload.elf: Include password_pbkdf2.
	Withoout this module we may end up in a system where no password is
	accepted.

	default_payload.elf: Add modules from $(EXTRA_PAYLOAD_MODULES).
	This allows coreboot building system to add extra modules depending
	on user config.

	mm: Avoid integer overflow.

	Remove -Wno-maybe-uninitialized as it may not be present.

	Fix warnings when compiling with -O3

2016-02-14  Vladimir Serbinenko  <phcoder@gmail.com>

	Add wbinvd around bios call.
	Via C3 has problems with cache coherency when transitioning between the modes,
	so flush it around bios calls.

2016-02-12  Eric Snowberg  <eric.snowberg@oracle.com>

	OBP available region contains grub. Start at grub_phys_end.
	This prevents a problem where grub was being overwritten since
	grub_phys_start does not start at a zero offset within the memory
	map.

2016-02-12  Andreas Freimuth  <andreas_freimuth@web.de>

	Add Thinkpad T410s button cmos address.

2016-02-12  Vladimir Serbinenko  <phcoder@gmail.com>

	TODO: Remove obsolete link

2016-02-12  Toomas Soome  <tsoome@me.com>

	lz4: Fix pointer overflow

2016-02-12  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-shell: Update 32-bit OVMF binary name.

2016-02-12  Daniel Kiper  <daniel.kiper@oracle.com>

	relocator: Fix integer underflow.

2016-02-12  Vladimir Serbinenko  <phcoder@gmail.com>

	Change -v to -V for version of shell utils.

	xnu: Add new kernel path to autoconfig.

	arm64: Use cpu timer for timekeeping.

	powerpc: Trim header in tests.

	default_payload: Include syslinuxcfg, all filesystems and xnu.

	xnu: Supply random seed.
	Now we're able to load kernels up to El Capitan.

	Add RNG module.

	yylex: use grub_fatal for exit.
	lexer calls yylex_fatal on fatal internal errors. yylex_fatal itself is
	declared as noreturn and calls exit. Returning from noreturn function has
	unpredictable consequences.

	printf: Fix and test %% behaviour in presence of subsequenbt args.

	Split pmtimer wait and tsc measurement from pmtimer tsc calibration.

	Make grub_cpu_is_tsc_supported generally available.

	Make grub_acpi_find_fadt accessible generically

	Make unaligned types public.
	This simplifies code which has to handle those types.

	Fix emu compilation error on arm.

2016-02-11  Vladimir Serbinenko  <phcoder@gmail.com>

	xnu: Include relocated EFI in heap size.

	xnu: supply ramsize to the kernel.
	Without this info recent kernels crash as they allocate no heap.

2016-02-03  Andrei Borzenkov  <arvidjaar@gmail.com>

	support modules without symbol table
	all_video module does not have any code or data and exists solely for
	.moddeps section to pull in dependencies. This makes all symbols unneeded.

	While in current binutils (last released version as of this commit is 2.26)
	``strip --strip-unneeded'' unintentionally adds section symbols for each
	existing section, this behavior was considered a bug and changed in commit
	14f2c699ddca1e2f706342dffc59a6c7e23e844c to completely strip symbol table
	in this case.

	Older binutils (verified with 2.17) and some other toolchains (at least
	elftoolchain r3223M), both used in FreeBSD, remove symbol table in all_video
	as well.

	Relax run-time check and do not return error for modules without symbol table.
	Add additional checks to module verifier to make sure such modules

	a) have non-empty .moddeps section. Without either externally visible symbols
	or .moddeps modules are completely useless and should not be built.

	b) do not have any relocations.

	Closes: 46986

	v2: add run-time check for empty symbol table if relocations are present as
	    suggested by Vladimir.

2016-02-01  Andrei Borzenkov  <arvidjaar@gmail.com>

	10_linux: avoid multi-device root= kernel argument
	If root filesystem is multidev btrfs, do not attempt to pass all devices as
	kernel root= argument. This results in splitting command line in GRUB due to
	embedded newline and even if we managed to quote it, kernel does not know how
	to interpret it anyway. Multidev btrfs requires user space device scanning,
	so passing single device would not work too.

	This still respects user settings GRUB_DISABLE_LINUX_UUID. Not sure what we
	should do in this case.

	Closes: 45709

2016-01-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Error out if mtools invocation fails.

	arm64: Add support for relocations needed for linaro gcc

	efiemu: Fix compilation failure

	Document cpuid -p

2016-01-22  Robert Elliott  <elliott@hpe.com>

	efiemu: Handle persistent RAM and unknown possible future additions.

2016-01-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Document expr1 expr2 syntax for test command

2016-01-22  Michael Chang  <mchang@suse.com>

	Restore terminal settings on grub-emu exit.

2016-01-22  Vladimir Serbinenko  <phcoder@gmail.com>

	xen_boot: Remove obsolete module type distinctions.

	arm: Ignore qemu clock bug

	i386-ieee1275: Increase maximum heap size to accomodate highres graphi tests

2016-01-20  Colin Watson  <cjwatson@ubuntu.com>

	Remove pragmas related to -Wunreachable-code
	-Wunreachable-code has been a no-op since GCC 4.5; GRUB hasn't been
	compiled with it since 2012; and GCC 6 produces "error:
	'-Wunreachable-code' is not an option that controls warnings" for these.

	Fixes Debian bug #812047.

2016-01-16  Colin Watson  <cjwatson@ubuntu.com>

	loader/bsd: Fix signed/unsigned comparison

	ahci, ehci: Fix typos

2016-01-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: fix memory leak
	Found by: Coverity scan.
	CID: 73783

2016-01-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	tftp: fix memory leaks in open
	If protocol open fails, file is immediately freed, so data was leaked.

	Found by: Coverity scan.
	CID: 96659

2016-01-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	tcp: fix memory leaks
	Found by: Coverity scan.
	CID: 96639, 96647

	net: fix memory leaks
	Found by: Coverity scan.
	CID: 96638, 96648

	legacycfg: fix memory leaks and add NULL check
	Memory leaks found by Coverity scan.
	CID: 96642, 96645

2016-01-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader: Unintended sign extension
	CID: 96707, 96699, 96693, 96691, 96711, 96709, 96708, 96703, 96702,
	96700, 96698, 96696, 96695, 96692, 96710, 96705

2016-01-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	script: fix memory leak
	Found by: Coverity scan.
	CID: 96637

	normal: fix memory leak
	Found by: Coverity scan.
	CID: 96641, 96670, 96667

	xnu: fix memory leak
	Found by: Coverity scan.
	CID: 96663

	truecrypt: fix memory leak
	Found by: Coverity scan.
	CID: 156611

	gfxmenu: fix memory leak
	Found by: Coverity scan.
	CID: 96657

	efiemu: fix memory leak
	Found by: Coverity scan.
	CID: 156610

	efidisk: fix memory leak
	Found by: Coverity scan.
	CID: 96644

	verify: fix memory leak
	Found by: Coverity scan.
	CID: 96643

	password_pbkdf2: fix memory leak
	Found by: Coverity scan.
	CID: 96656

	parttool: fix memory leak
	Found by: Coverity scan.
	CID: 96652

2016-01-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	nativedisk: fix memory leak
	Based on Coverity scan.
	CID: 96660

	Extended to also cover other error return places.

2016-01-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpi: fix memory leak
	Found by: Coverity scan.
	CID: 96673

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-install: include ehci in list of native modules
	This matches behavior of "nativedisk" command.

	Reported and tested by Smith Henry <sh37092@gmail.com>

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mkimage: remove redundant NULL check
	Found by: Coverity scan.
	CID: 73737

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: remove dead and redundant code
	server cannot be NULL at this point (we return error earlier if it is).
	Also structure is zalloc'ed, so no need to explicitly initialize
	members to 0.

	Found by: Coverity scan.
	CID: 73837

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	hostdisk: fix device detection
	Condition was apparently reversed so GRUB assumed all devices were
	files. This later made it skip BLKFLSBUF ioctl on Linux which caused
	various page cache coherency issues. Observed were

	- failure to validate blocklist install (read content did not match
	  just written)

	- failure to detect Linux MD on disk after online hot addition
	  (GRUB got stale superblock)

	Closes: 46691

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	setup: fix NULL pointer dereference
	Check return value of grub_guess_root_devices

	Found by: Coverity scan.
	CID: 73638, 73751

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	mkimage: fix unintended sign extension
	Found by: Coverity scan.
	CID: 73691, 73717

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	util/getroot: delete dead code
	is_part cannot be non-zero at this point.

	Found by: Coveruty scan.
	CID: 73838

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader/multiboot: fix unintended sign extension
	Found by: Coveruty scan.
	CID: 73700, 73763

	kern/elf: fix unintended sign extension
	Found by: Coverity scan.
	CID: 73729, 73735, 73758, 73760

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	xfs: fix possible inode corruption in directory scan
	grub_xfs_iterate_dir did not restore first character after inline
	name when match was found. Dependning on XFS format this character
	could be inode number and we could return to the same node later in
	find_file if processing cycled symlinks.

	CID: 86724

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	rescue_parser: restructure code to avoid Coverity false positive
	If line contains single word, line and argv[0] are aliases, so
	no NULL dereference is possible, but Coverity does not know it.
	Change code to avoid ambiguity and also remove redundant call to
	grub_strchr.

	CID: 86725

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mklayout: check subscript bounds
	Found by: Coverity scan.
	CID: 73686

	grub-probe: fix memory leak
	Found by: Coverity scan.
	CID: 73783

	gfxmenu: fix memory leak
	Found by: Coverity scan.
	CID: 73766

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	util/setup: fix grub_util_path_list leak
	Add helper grub_util_free_path_list and use it where appropriate.

	Found by: Coverity scan.
	CID: 73727

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	setup: fix memory leak
	Found by: Coverity scan.
	CID: 73680, 73715

	efiemu: check return value of grub_efiemu_write_value
	Found by: Coverity scan.
	CID: 73590

	efiemu: change code to avoid Coverity false positive
	CID: 73623

	efiemu: fix unintended sign extension
	Found by: Coverity scan.
	CID: 73883, 73637

	hfs: fix memory leak
	Found by: Coverity scan.
	CID: 156531

	grub-module-verifier: fix unintended sign extension
	Found by: Coverity scan.
	CID: 156533, 156532

2016-01-08  Vladimir Serbinenko  <phcoder@gmail.com>

	Tests: Support arm-efi

2016-01-07  Vladimir Serbinenko  <phcoder@gmail.com>

	arm64/setjmp: Add missing move for arg1 == 0 case.

	grub-shell: Support arm64-efi

2016-01-07  Mark Salter  <msalter@redhat.com>

	arm-efi: Reduce timer event frequency by 10
	Timer event to keep grub msec counter was running at 1000HZ. This was too
	fast for UEFI timer driver and resulted in a 10x slowdown in grub time
	versus wallclock. Reduce the timer event frequency and increase tick
	increment accordingly to keep better time.

2016-01-07  Vladimir Serbinenko  <phcoder@gmail.com>

	x86_64-efi: Automatically add -bios OVMF.fd to qemu in tests.

	Allow GRUB_QEMU_OPTS to override machine.

	arm64: Disable tests that need native drivers.

	Disable NetBSD bootcheck on EFI until it supports ACPI on EFI.

	grub-shell: Use new cbfstool syntax.

	grub-shell: On i386-ieee1275 don't try to switch to console.
	console goes to serial as well, so this doesn't stop garbage from going
	to serial. But it creates garbage itself.

	hddboot_test: reenable on OVMF
	OVMF now supports booting from disks.

	iee1275/datetime: Fix off-by-1 error.

2016-01-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Adjust bootcheck tests for multiboot/coreboot/qemu to match real support.
	coreboot has ACPI while 2 others don't. *BSD need ACPI and have trouble
	without it. Don't even attempt to boot *BSD on multiboot or qemu targets.

	On coreboot boot all *BSD except 32-bit NetBSD which apparently does some
	early BIOS calls.

2016-01-05  Vladimir Serbinenko  <phcoder@gmail.com>

	minixfs_test: Check if mkfs.minixfs supports -B option.

	Add memdisk support to grub-emu.
	Use it to add custom files, so that tests which need them work.

	Move file loading functions to grub-emu.
	So that we can use it in grub-emu as well as utils.

	Disable progress indicator in grub-shell.
	This disables progress indicator for tests. This in turn fixes test
	flakiness as they ended up timing-dependent.

	Update checksums

2016-01-02  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpihalt: add GRUB_ACPI_OPCODE_CREATE_DWORD_FIELD (0x8a)
	Fixes ACPI halt on ASUSTeK P8B75-V,
	Bios: American Megatrends v: 0414 date: 04/24/2012

	Reported-By: Goh Lip <g.lip@gmx.com>

2016-01-02  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpihalt: fix GRUB_DSDT_TEST compilation

2016-01-01  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add missing BUILD_EXEEXT

2015-12-31  Vladimir Serbinenko  <phcoder@gmail.com>

	configure.ac: Reorder efiemu check to after link format check.
	efiemu is supposed to be disabled when compiling through exe format.
	Unfortunately format was determined only after efiemu check. Reorder to fix the
	problem

2015-12-31  Andrey Borzenkov  <arvidjaar@gmail.com>

	remove temporary .bin files (kernel and modules)

	add dejavu built fonts to cleanfiles

2015-12-31  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add grub-module-verifier files to EXTRA_DIST

2015-12-31  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Add -fno-unwind-tables if supported.
	Unwind tables are useless for us bt consume space if present. Ensure that they
	are not.

	module-verifier: allow limited-range relocations on sparc64.
	clang as incomplete mcmodel=large support. As we don't currently need full
	mcmodel=large support for sparc64, relax those checks.

	Disable build-time module check on emu.
	On emu some checks can be laxer like check for relocation range. Additionally
	module loading in emu is rarely used. So skip this check rather than making
	it laxer for all platforms. In ideal we may want to have slightly different
	check for emu but for now this is good enough.

	configure: Fix grub_cv_cc_fno_unwind_tables check.
	Check tries -fno-dwarf2-cfi-asm but adds -fno-asynchronous-unwind-tables
	to TARGET_CFLAGS. Fix this.

	Add -mno-stack-arg-probe on mingw.
	This argument disables generation of calls to __chkstk_ms. Those calls are
	useless on GRUB as function is dummy. Yet they increase module size and
	use limited-range relocations which may not work under some memory layouts.
	We currently don't use such layouts on concerned platforms but lt's correct
	this.

	Strip .ARM.exidx
	This section is generated by clang and is useful only for debugging.
	It contains exotic relocations, so strip them to avoid them interferring
	with module loading.

	module-verifier: Check range-limited relative relocations.
	Check that they point to the same module, so will end up in the same
	chunk of memory.

	xen/relocator: Use local symbol to ensure that code is relocation-free.

	backtrace: Fix register call syntax

	Verify modules on build-time rather than failing in runtime.

	sparc64: Fix assembly to let compiler to fill in memory references.
	This fixes the use of not fully relocatable (they assume that variables are
	under 4G limit in virtual memory) references.

2015-12-30  Andrey Borzenkov  <arvidjaar@gmail.com>

	30_os-prober: derive --class from os-prober generated label
	Currently only Windows gets distinguished icons, everything else is displayed
	using the same generic one. Add additional --class based on os-prober returned
	label, which usually is expected to match primary distribution name.

	Also use it for Windows as well - chainloader prober may actually return
	different strings (Windows, MS-DOS, Windows9xME).

2015-12-30  Vladimir Serbinenko  <phcoder@gmail.com>

	backtrace: Remove assembly assumption that grub_backtrace_pointer is under 4G

2015-12-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	menu: fix line count calculation for long lines
	It gave one extra screen line if length was exactly equal to screen
	width.

	Reported by Michael Chang.
	Also-By: Michael Chang <mchang@suse.com>

2015-12-29  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-mkrescue: Delete temporary file
	Reported by: Thomas Schmitt

	grub-mount: Fix oath parsing.
	Brackets detection was copied from somewhere else and makes no sense in case
	of grub-mount and prevents user from accessing and files with ) in them.

	exfat: Fix stream extension flag parsing.

2015-12-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	devmapper: check for valid device abstraction in get_grub_dev
	This was lost when code was refactored. Patch restores previous behavior.

	It is still not clear whether this is the right one. Due to the way we
	detect DM abstraction, partitions on DM are skipped, we fall through to
	generic detection which ends up in assuming parent device is BIOS disk.

	It is useful to install GRUB on VM disk from the host. But it also means
	that GRUB will mistakenly allow install on real system as well.

	For now let's fix regression; future behavior needs to be discussed.

	Closes: 45163

2015-12-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	windows: correct LBA in generated EFI HDD media paths
	GRUB keeps partition offset and size in units of 512B sectors. Media paths
	are defined in terms of LBA which are presumed to match HDD sector size.

	This is probably cosmetic (EFI requires that partition is searched by GUID)
	and still incorrect if GPT was created using different logical block size.
	But current code is obviously wrong and new has better chances to be correct.

2015-12-17  Robert Elliott  <elliott@hpe.com>

	lsefimmap: support persistent memory and other UEFI 2.5 features
	This should accompany
		76ce1de740 Translate UEFI persistent memory type

	1. Add a string for the EfiPersistentMemory type 14 that was
	added in UEFI 2.5.

	2. Decode the memory attributes that were added in UEFI 2.5:
	* NV (non-volatile)
	* MORE_RELIABLE (higher reliable, e.g., mirrored memory in a system
	  with partial memory mirroring)
	* RO (read-only)

	3. Use proper IEC binary units (KiB, MiB, etc.) for power-of-two
	values rather than misusing SI power-of-ten units (KB, MB, etc.)

	4. The lsmmap command only decodes memory ranges sizes up to GiB scale
	units.  Persistent memory ranges will reach into the TiB scale.
	Since 64-bit size field supports TiB, PiB, and EiB, decode all of
	them for completeness.

	5. In the lsefimmap command, rewrite the print statements to
	* avoid rounding
	* avoid a big nested if/else tree.

	For example: In the sixth entry below, the value of 309MB implies
	316416KB but is really reporting 316436KB.

	Widen the size column to 6 digits to accommodate typical cases.
	The worst case value would require 14 digits; if that happens,
	let the columns get out of sync.

	Old format:
	Type      Physical start  - end             #Pages     Size Attributes
	conv-mem  0000000000000000-0000000000092fff 00000093  588KB UC WC WT WB
	reserved  0000000000093000-0000000000093fff 00000001    4KB UC WC WT WB
	conv-mem  0000000000094000-000000000009ffff 0000000c   48KB UC WC WT WB
	conv-mem  0000000000100000-000000000fffffff 0000ff00  255MB UC WC WT WB
	BS-code   0000000010000000-0000000010048fff 00000049  292KB UC WC WT WB
	conv-mem  0000000010049000-000000002354dfff 00013505  309MB UC WC WT WB
	ldr-data  000000002354e000-000000003ecfffff 0001b7b2  439MB UC WC WT WB
	BS-data   000000003ed00000-000000003ed7ffff 00000080  512KB UC WC WT WB
	conv-mem  000000003ed80000-000000006af5ffff 0002c1e0  705MB UC WC WT WB
	reserved  000000006af60000-000000006b55ffff 00000600    6MB UC WC WT WB
	BS-data   000000006b560000-000000006b560fff 00000001    4KB UC WC WT WB
	RT-data   000000006b561000-000000006b5e1fff 00000081  516KB RT UC WC WT WB
	BS-data   000000006b5e2000-000000006ecfafff 00003719   55MB UC WC WT WB
	BS-code   000000006ecfb000-000000006ecfbfff 00000001    4KB UC WC WT WB
	conv-mem  000000006ecfc000-00000000711fafff 000024ff   36MB UC WC WT WB
	BS-data   00000000711fb000-000000007128dfff 00000093  588KB UC WC WT WB
	Unk 0d    0000000880000000-0000000e7fffffff 00600000   24GB UC WC WT WB NV
	reserved  0000001680000000-0000001c7fffffff 00600000   24GB UC WC WT WB NV

	New format:
	Type      Physical start  - end             #Pages        Size Attributes
	conv-mem  0000000000000000-0000000000092fff 00000093    588KiB UC WC WT WB
	reserved  0000000000093000-0000000000093fff 00000001      4KiB UC WC WT WB
	conv-mem  0000000000094000-000000000009ffff 0000000c     48KiB UC WC WT WB
	conv-mem  0000000000100000-000000000fffffff 0000ff00    255MiB UC WC WT WB
	BS-code   0000000010000000-0000000010048fff 00000049    292KiB UC WC WT WB
	conv-mem  0000000010049000-000000002354dfff 00013505 316436KiB UC WC WT WB
	ldr-data  000000002354e000-000000003ecfffff 0001b7b2 450248KiB UC WC WT WB
	BS-data   000000003ed00000-000000003ed7ffff 00000080    512KiB UC WC WT WB
	conv-mem  000000003ed80000-000000006af5ffff 0002c1e0 722816KiB UC WC WT WB
	reserved  000000006af60000-000000006b55ffff 00000600      6MiB UC WC WT WB
	BS-data   000000006b560000-000000006b560fff 00000001      4KiB UC WC WT WB
	RT-data   000000006b561000-000000006b5e1fff 00000081    516KiB RT UC WC WT WB
	BS-data   000000006b5e2000-000000006ecfafff 00003719  56420KiB UC WC WT WB
	BS-code   000000006ecfb000-000000006ecfbfff 00000001      4KiB UC WC WT WB
	conv-mem  000000006ecfc000-0000000071222fff 00002527  38044KiB UC WC WT WB
	BS-data   0000000071223000-00000000712ddfff 000000bb    748KiB UC WC WT WB
	persist   0000000880000000-0000000e7fffffff 00600000     24GiB UC WC WT WB NV
	reserved  0000001680000000-0000001c7fffffff 00600000     24GiB UC WC WT WB NV

2015-12-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	kernel: print and reset grub_errno after each embedded config line
	Otherwise it causes subsequent file open to fail, because grub_file_open
	misinterprets set grub_errno for grub_file_get_device_name failure.

	Closes: 46540

2015-12-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	Erase backspaced character in grub_username_get
	It probably does not work across linefeed, but hopefully user names are not
	that long (and nobody is using terminal that small).

2015-12-16  Hector Marco-Gisbert  <hecmargi@upv.es>

	Fix security issue when reading username and password
	This patch fixes two integer underflows at:
	  * grub-core/lib/crypto.c
	  * grub-core/normal/auth.c

	CVE-2015-8370

	Also-By: Andrey Borzenkov <arvidjaar@gmail.com>

2015-12-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: more additions
	Also-By: Robert Elliott <elliott@hpe.com>

2015-12-15  Robert Elliott  <elliott@hpe.com>

	Translate UEFI persistent memory type
	Define
	* GRUB_EFI_PERSISTENT_MEMORY (UEFI memory map type 14) per UEFI 2.5
	* GRUB_MEMORY_PERSISTENT (E820 type 7) per ACPI 3.0
	* GRUB_MEMORY_PERSISTENT_LEGACY (E820 unofficial type 12) per ACPI 3.0

	and translate GRUB_EFI_PERSISTENT_MEMORY to GRUB_MEMORY_PERSISTENT in
	grub_efi_mmap_iterate().

	Includes
	* adding the E820 names to lsmmap
	* handling the E820 types in make_efi_memtype()

	Suggested-by: Vladimir 'φ-coder/phcoder' Serbinenko <phcoder@gmail.com>
	Suggested-by: Andrei Borzenkov <arvidjaar@gmail.com>

2015-12-14  Vladimir Serbinenko  <phcoder@gmail.com>

	Document bootlocation discovery limitations and xen platform limitations

2015-12-07  Josef Bacik  <jbacik@fb.com>

	tcp: ack when we get an OOO/lost packet
	While adding tcp window scaling support I was finding that I'd get some packet
	loss or reordering when transferring from large distances and grub would just
	timeout.  This is because we weren't ack'ing when we got our OOO packet, so the
	sender didn't know it needed to retransmit anything, so eventually it would fill
	the window and stop transmitting, and we'd time out.  Fix this by ACK'ing when
	we don't find our next sequence numbered packet.  With this fix I no longer time
	out.  Thanks,

2015-12-01  Michael Chang  <mchang@suse.com>

	i386: fix TSC calibration using PIT
	Condition was accidentally reversed, so PIT calibration always failed
	when PIT was present and always succeeded when PIT was missing, but in
	the latter case resulted in absurdly fast clock.

	Reported and tested by Vitaly Kuznetsov <vkuznets@redhat.com>

2015-11-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	Do not include generated gnulib headers in tarball
	gnulib files are already handled by recursive make distdir invocation.
	Including all generated headers (after make completed) causes build
	failure if target system is different (different compile version etc).

2015-11-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	Replace numbers with grub_memory_type_t enums

2015-11-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: fix macports flex version detection
	Macports add extra information after version itself:

	$flex --version
	flex 2.5.35 Apple(flex-31)

	We require at least felx 2.5.35 so do not need to care about prehistoric
	"flex version n.n.n"; just use second field always.

	Reported by Peter Cheung <mcheung63@hotmail.com>

2015-11-27  Vladimir Serbinenko  <phcoder@gmail.com>

	tsc: Use alternative delay sources whenever appropriate.
	PIT isn't available on some of new hardware including Hyper-V. So
	use pmtimer for calibration. Moreover pmtimer calibration is faster, so
	use it on coreboor where booting time is important.

	Based on patch by Michael Chang.

2015-11-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: really mark memory of unknown type as reserved
	9be4c45dbe3c877d1f4856e99ee15133c6cd2261 added switch case between
	fall through cases, causing all memory regions of unknown type to be
	marked as available.

	Move default case into its own block and add explicit FALLTHROUGH
	annotation.

	Reported by Elliott, Robert (Persistent Memory) <elliott@hpe.com>

2015-11-24  Josef Bacik  <jbacik@fb.com>

	net: reset nb->data per dns record lookup loop
	We were resetting nb->data every time we tried a new server, but we need to do
	it every time we try for a different record, otherwise we don't end up falling
	back to the A record properly.  Thanks,

2015-11-18  Andrei Borzenkov  <arvidjaar@gmail.com>

	unix: do not close stdin in grub_passwd_get
	This makes it impossible to read from stdin without controlling tty:

	10:/mnt # echo -e passwd\\npasswd | setsid ./grub-mkpasswd-pbkdf2
	Enter password:
	Reenter password: ./grub-mkpasswd-pbkdf2: error: failure to read password.
	10:/mnt

2015-11-17  Andrei Borzenkov  <arvidjaar@gmail.com>

	lsefisystab: add missing comma after 7994077

2015-11-14  Pavel Bludov  <pbludov@gmail.com>

	Add some UUIDs found in the hardware

2015-11-13  Konstantin Vlasov  <kvlasov@odin.com>

	gfxterm: fix calculation of terminal-top and terminal-height
	They used screen width, not height.

2015-11-12  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	ofdisk: add sas disks to the device list

2015-11-12  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot: Don't rely on particular ordering of options.

	multiboot_mbi: Fix handling of --quirk-bad-kludge.

2015-11-12  Fu Wei  <fu.wei@linaro.org>

	xen_boot: Remove useless file_name_index variable.

	Document ARM64 xen commands

2015-11-11  Vladimir Serbinenko  <phcoder@gmail.com>

	asm-tests/i386-pc: Check that near jumps are 2 bytes.
	We already check that jump over 300 bytes gap is 3 bytes in code16-mode.
	Some clang versions generate 3-byte opcode for short jumps which makes
	boot.img blow over 512-byte limit. Enforce -no-integrated-as in such cases

2015-11-11  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	ofdisk: add a comment about vscsi method

2015-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	fdt.mod: Move license tag to the right file.

2015-11-09  Fu Wei  <fu.wei@linaro.org>

	fdt.mod: Add missing license tag.

2015-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	kern/elf: Ignore cast-align warnings

2015-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	cbfs: Fix corner case and compilation with recdent gcc
	Accept the header to touch the jump address at 0xfffffff0.

	Fix compilation for 64-bit EFI with recent GCC.

2015-11-08  Vladimir Serbinenko  <phcoder@gmail.com>

	fstester: Enforce LC_ALL=C

	Adapt build-system to use imported xen headers.

	Import xen headers directly into GRUB

	cbfs: Check for ptr range sanity.
	Triaged by Andrei and enhanced with suggestions by Aaron Durbin
	Also-By: Andrei Borzenkov <arvidjaar@gmail.com>

	Remove reliance C.UTF-8

	genmoddep.awk: Add a test that we have no circular dependencies

	Makefile.core.def: Break circular dependency on arm64.

	autogen: Use cp instead of ln -s.
	libgcrypt-grub shouldn't be modified directly anyway. With this patch
	tarball without contrib can be unpacked on FAT and stay usable for
	out-of-tree compile on full POSIX FS (compile on FAT not tested).

2015-11-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	partmap_test: check that parted is available
	Skip test if parted is unavailable instead of returning false failure.

2015-11-07  grub-devel@iam.tj  <grub-devel@iam.tj>

	cryptodisk: teach grub_cryptodisk_insert() about partitions (bug #45889)
	It is not possible to configure encrypted containers on multiple partitions of
	the same disk; after the first one all subsequent fail with

	disk/cryptodisk.c:978: already mounted as crypto0

	Store partition offset in cryptomount descriptor to distinguish between them.

2015-11-07  Andrey Borzenkov  <arvidjaar@gmail.com>

	doc: document config_directory and config_file variables

2015-11-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	unix/getroot: remove unused MAJOR definition
	We use major() everywhere, these definitions just add to confusion.

	Add comments to code for commit d313218

2015-11-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	devmapper/getroot: use makedev instead of direct shift
	Fixes device detection with large number of devices.

	Reported by Tim Wallberg <twalberg@comcast.net>

2015-11-06  Andrei Borzenkov  <arvidjaar@gmail.com>

	mkimage: zero fill alignment space
	This did not cause real problem but is good for reproducible builds. I hit
	it with recent bootinfoscript that displays embedded config; I was puzzled
	by random garbage at the end.

	Prezero memory buffer used to assemble core.img. This makes individual
	memset redundant. Also ensure buffer is filled with zeroes in several other
	places.

	Also remove redundant zeroing code where we fill in the whole memory block
	anyway.

2015-11-06  Vladimir Serbinenko  <phcoder@gmail.com>

	configure.ac: Explicitly add -mno-sse3 on x86.

	README: Remove dead link to the wiki

2015-10-29  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: mention powerpc64le support

2015-10-29  Ignat Korchagin  <ignat>

	tcp: Fix uninited mac address when accepting connection.

2015-10-29  Fu Wei  <fu.wei@linaro.org>

	arm64: Add support for xen boot protocol.

2015-10-29  Vladimir Serbinenko  <phcoder@gmail.com>

	arm64: Move FDT functions to separate module

2015-10-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: fix warnings with recent GCC
	../../grub-core/term/efi/console.c:128:32: error: suggest parentheses around '&&' within '||' [-Werror=parentheses]
	   if (key.unicode_char >= 0x20 && key.unicode_char <= 0x7f

2015-10-26  Eric Snowberg  <eric.snowberg@oracle.com>

	ofdisk: Fix devpath freeing logic.

2015-10-26  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	Implement cross-endian ELF load for powerpc

2015-10-25  Peter Jones  <pjones@redhat.com>

	Use EFI_SIMPLE_TEXT_INPUT_EX to support key combinations.

2015-10-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: find options to force endian on MIPS

2015-10-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: force o32 ABI on MIPS
	GRUB code expects O32 or N32. N32 is less tested than O32, so we prefer to
	compile with O32. Some systems (e.g. GNU Guix) default to using newer
	n64 or n32 ABI. Try to find suitable options to force o32.

	For GCC this is simply -mabi=32. While clang supports this option as well,
	o32 ABI is valid for MIPS target and n32/64 ABI are valid for MIPS64 target
	only, so use "-target mips/mipsel -mabi=32".

	Reported-By: Mark H Weaver <mhw@netris.org>
	Also-By: Mark H Weaver <mhw@netris.org>

2015-10-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: avoid closing NULL socket in DNS lookup
	Refactor code so that we do not store NULL pointers in array
	of in-flight DNS servers.

	Reported-By: Josef Bacik <jbacik@fb.com>

2015-10-11  Andrei Borzenkov  <arvidjaar@gmail.com>

	install: --compress argument is not optional
	Fixes crash if argument is not specified. Also use `|' to separate choices
	in list of compression methods to align it with --core-compress.

2015-10-11  Vladimir Serbinenko  <phcoder@gmail.com>

	mips: Make setjmp code N32-compliant.

	mips: Make the assembly-code N32-compatible.
	There are no $t4 or $t5 in N32 but there are $a4 and $a5.

2015-10-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	progress: avoid NULL dereference for net files
	From original patch by dann frazier <dann.frazier@canonical.com>:

	  grub_net_fs_open() saves off a copy of the file structure it gets passed and
	  uses it to create a bufio structure. It then overwrites the passed in file
	  structure with this new bufio structure. Since file->name doesn't get set
	  until we return back to grub_file_open(), it means that only the bufio
	  structure gets a valid file->name. The "real" file's name is left
	  uninitialized. This leads to a crash when the progress module hook is called
	  on it.

	grub_net_fs_open() already saved copy of file name as ->net->name, so change
	progress module to use it.

	Also, grub_file_open may leave file->name as NULL if grub_strdup fails. Check
	for it.

	Also-By: dann frazier <dann.frazier@canonical.com>

2015-10-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	file: ignore host disk in blocklist check
	It cannot work anyway because host disk cannot be read. This fixes hostfs access
	on native Windows build where filenames start with '\' or do not have initial
	separator at all (d:\foo).

	Issue was observed when running grub-fstest on Windows. On UNIX image name is
	canonicalized to always start with `/' so this was not noticed.

	This has side effect of allowing relative path names on host, but this already
	was the case with `ls' command, so it just extends it to all commands.

	Reported-By: Arch Stack <archstacker@gmail.com>
	Also-By: Arch Stack <archstacker@gmail.com>

2015-10-09  Vladimir Serbinenko  <phcoder@gmail.com>

	mips/dl: Handle addend in RELA entries.

	gfxmenu/model: Delete empty file.

2015-10-09  Alexander Bluhm  <bluhm@genua.de>

	ufs: Fix parameters to grub_memset.
	len = 0 made simply no sense. Fix parameters to be in line with read.

2015-10-07  Stanislav Kholmanskikh  <stanislav.kholmanskikh@oracle.com>

	ofnet: Do not set SUFFIX for sun4v network devices
	sun4v vnet devices do not implement the support of duplex and speed
	instance attributes. An attempt to open such a device with
	the attributes will fail:

	ok select net:speed=auto,duplex=auto
	Unknown key 'speed'
	Unknown key 'duplex'
	Manual Configuration: Host IP, boot server and filename must be specified
	WARNING: /virtual-devices@100/channel-devices@200/network@0: Can't open OBP standard TFTP package

	Can't open device
	ok

	Therefore, let's not set SUFFIX for such devices.

2015-10-07  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64 - use correct drive name within grub_util_sparc_setup
	Incorrect drive name was being passed into grub_util_sparc_setup,
	causing the grub-install to fail.

2015-09-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	cryptodisk: strip parenthesis from backing device name
	Otherwise subsequent disk open fails.

	Reported-By: Klemens Nanni <contact@autoboot.org>

2015-08-22  Felix Zielcke  <fzielcke@z-51.de>

	disk/ldm, partmap/msdos.c: fix spelling error

2015-08-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: do not try to load protocol module via itself
	Otherwise we get infinite recursion.

	Closes: 45729

2015-08-09  Josef Bacik  <jbacik@fb.com>

	efinet: handle get_status() on buggy firmware properly
	The EFI spec indicates that get_status() should return the address of the buffer
	we passed into transmit to indicate the the buffer was transmitted.  However we
	have boxes where the firmware returns some arbitrary address instead, which
	makes grub think that we've not sent anything.  So since we have the SNP stuff
	opened in exclusive mode just assume any non-NULL txbuf means that our transmit
	occurred properly.  This makes grub able to do its networking stuff properly on
	our broken firmware.  Thanks,

	cc: Peter Jones <pjones@redhat.com>

2015-08-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	linguas.sh: fix error when removing non-existing autogenerated files

2015-07-28  Vladimir Serbinenko  <phcoder@gmail.com>

	ahci: Ensure that bus mastering is set.
	Fixes ahci_test failing on several platforms.

2015-07-27  Vladimir Serbinenko  <phcoder@gmail.com>

	archelp: Never pass NULL as mtime.
	Moves complexity from fs code (NULL check) to common code (passing non-NULL).

	HFS: Convert to fshelp.
	HFS doesn't handle "." and ".." properly. Convert it to fshelp to reuse the
	logic.

	FAT: Convert to fshelp.
	exFAT doesn't handle "." and ".." correctly, convert it to fshelp to
	reuse the same logic.

	BFS: Convert to fshelp.
	BFS doesn't handle ".." correctly, so convert it to fshelp to reuse the logic.

	fshelp: Add handling of "." and ".." and grub_fshelp_find_file_lookup.
	Recent tests have discovered that many of our filesystems have flawed
	handling of "." and "..". Rather than attempting to fix it in filesystems
	themselves, make the common code fshelp aware of "." and ".." and handle
	them in this layer. Add grub_fshelp_find_file_lookup for easy conversion
	of BFS, HFS and exFAT which have the same problem and don't use fshelp.

	Switch procfs to use archelp.
	This fixes handling of "." and "..".

	grub-install: Use a+ in fopen rather than r+.
	r+ does not create a file if none exists.

	Add transform_data as a variant of data with substitutions.
	This fixrs name mismatch for grub.chrp with
	transform_program_name='s,grub,grub2,g'

2015-07-24  Ignat Korchagin  <ignat@cloudflare.com>

	efi: fix GetVariable return status check in 81ca24a
	GetVariable should return EFI_BUFFER_TOO_SMALL if given buffer of size
	zero; commit incorrectly checked for EFI_SUCCESS.

2015-07-24  Vladimir Serbinenko  <phcoder@gmail.com>

	zfs_test: Skip dotdot in volume root test.
	Given special semantics of ZFS it's far from clear what the expected
	result is. Just skip it for now

	xfs_test: Test both crc and non-crc filesystems.

	xfs: Fix handling of symlink with crc-enabled filesystem.

	reiserfs: Fix handling of first entry in the directory.
	Fixes garbage being added to "." filename.

2015-07-23  Ignat Korchagin  <ignat@cloudflare.com>

	efi: fix memory leak in variable handling

2015-07-23  Vladimir Serbinenko  <phcoder@gmail.com>

	exclude.pot: Add missing blacklisted strings.

	archelp: Fix handling of dot and dotdot at the end of the name.
	Fixes cpio_test and tar_test.

	arm-emu: Add __aeabi_memcpy* and __aeabi_memclr* symbols.
	Fixes compilation with clang.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	fwstart: Fix loading of address of read_spd_fail.

	fwstart: Add missing argument to p2align.
	Resulting binary is unchanged as it happens we were already aligned
	by chance.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	fwstart: Replace blt with bltz.
	blt A, $zero, B and bltz A, B are equivalent but clang recognizes only
	later, so use it.

	Resulting binary is unchanged.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove mips_attributes.
	mips_attributes was introduced to work around clang problems with
	-msoft-float. Those problems are now fixed and moreover .gnu_attributes
	itself is unportable and creates problem with clang.

	Revert "mips: Fix soft-float handling."

	This partially reverts commit 6a4ecd276ed39f66be0ad6ff0f8ff67598098605.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	ARM: provide __aeabi_memclr* and __aeabi_memcpy* symbols
	Fixes compilation with recent clang.

	diskfilter: Make name a const char to fix compilation error.

	dmraid_nvidia: Set a name to usable value to avoid null dereference.
	Reported by: Andrei Borzenkov

	configure.ac: Handle powerpc64le compiler
	Also-by: Paulo Flabiano Smorigo <pfsmorigo@linux.vnet.ibm.com>

2015-07-20  Bernhard Übelacker  <bernhardu@vr-web.de>

	loader/linux: Make trailer initrd entry aligned again.
	Regression from commit:
	  loader/linux: do not pad initrd with zeroes at the end
	  a8c473288d3f0a5e17a903a5121dea1a695dda3b

	Wimboot fails since the change above because it expects the "trailer"
	initrd element on an aligned address.
	This issue shows only when newc_name is used and the last initrd
	entry has a not aligned size.

2015-07-16  Vladimir Serbinenko  <phcoder@gmail.com>

	XFS: Fix wrong alignment treatment.

	grub_ext2_read_block: Fix return type on error.

2015-07-05  Andrei Borzenkov  <arvidjaar@gmail.com>

	use TARGET_LDFLAGS in grub_PROG_OBJCOPY_ABSOLUTE
	That's what Makefile will use and it is required if unusual flags
	must be passed to linker (e.g. to build ppc32 code on ppc64le with clang).

2015-06-26  Michael Chang  <mchang@suse.com>

	Fix missing byte order conversion in get_btrfs_fs_prefix function
	Since btrfs on-disk format uses little-endian, the searched item types
	(ROOT_REF, INODE_REF) need converting the byte order in order to
	function properly on big-endian systems.

2015-06-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	chainloader: fix resoource leak
	Found by: Coverity scan.
	CID: 96651

	loader/bsd: fix memory leak
	Found by: Coverity scan.
	CID: 96662, 96665

2015-06-20  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader/bsd: free memory leaks
	Found by: Coverity scan.
	CID: 96671, 96658, 96653

	search_wrap: fix memory leak
	Found by: Coverity scan.
	CID: 96675

	password_pbkdf2: fix memory leak
	Found by: Coverity scan.
	CID: 96676

	normal: fix memory leak
	Found by: Coverity scan.
	CID: 96677

	efi/serial: fix memory leak
	Found by: Coverity scan.
	CID: 96678

	ohci: fix memory leak
	Found by: Coverity scan.
	CID: 96679

	loader/bsd: free memory leaks
	Found by: Coverity scan.
	CID: 96682

	multiboot: fix memory leak
	Found by: Coverity scan.
	CID: 96684

	normal: fix memory leak
	Found by: Coverity scan.
	CID: 96685

	loader/bsd: fix memory leak
	Found by: Coverity scan.
	CID: 96686

	reed_solomon: fix memory leak
	Found by: Coverity scan.
	CID: 96688

	usb: fix use after free
	Found by: Coverity scan.
	CID: 96704

	xnu: fix use after free
	Found by: Coverity scan.
	CID: 96706

	disk/scsi: fix use after free
	Found by: Coverity scan.
	CID: 96713

	efi/chainloader: fix use after free
	Found by: Coverity scan.
	CID: 96714

	search: fix use after free
	Found by: Coverity scan.
	CID: 96715

	NEWS: emu libusb support removed

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: fix memory leak in probe (ofpath)
	Found by: Coverity scan.
	CID: 73772

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: restructure code to make static analysis easier
	Current code in probe() could not be verified to not contain memory leaks.
	Restructure code and ensure grub_device_close is always called at the end of
	loop.

	Calms down Coverity scan.
	CID: 73739

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	zfs: fix memory leak
	Found by: Coverity scan.
	CID: 73647

	xfs: silence Coverity overflow warning
	inode size cannot really overflow integer, but Coverity does not know it.
	CID: 96602

	zfs: memory leak
	Found by Coverity scan.
	CID: 96603

	unix/getroot: memory leak
	Found by Coverity scan.
	CID: 96605

	unix/relpath: memory leak
	Found by Coverity scan.
	CID: 96606

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	syslinux_parse: assorted issues found by Coverity
	1. Remove unneeded NULL check
	CID: 96607

	2. Do not allocate storage for initrd, copy it directly from input
	buffer. Avoids memory leak in failure path.
	CID: 96604

	3. Unchecked error return from print()
	CID: 96601, 73595

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	syslinux_parse: make print_escaped actually stop before `to'
	The only current user is mboot.c32 which unfortunately is not covered
	by regression tests.

2015-06-18  Andrei Borzenkov  <arvidjaar@gmail.com>

	fat: fix handling of "." and ".." directory entries
	Emulate dot and dotdot in root directory. For other directories do not
	add separator between name and extension for these two special entries.

	Closes: 45335

2015-06-18  Andrei Borzenkov  <arvidjaar@gmail.com>

	tests: regression tests for "." and ".." directory entries

2015-06-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	efinet: enable hardware filters when opening interface
	Exclusive open on SNP will close all existing protocol instances which
	may disable all receive filters on interface. Reinstall them after we
	opened protocol exclusively.

	Also follow UEFI specification recommendation and stop interfaces when
	closing them:

	Unexpected system errors, reboots and hangs can occur if an OS is loaded
	and the network devices are not Shutdown() and Stopped().

	Also by: Mark Salter <msalter@redhat.com>
	Closes: 45204

2015-06-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: mention libgcc removal

2015-06-15  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	Add flag for powerpc ieee1275 to avoid unneeded optimizations

2015-06-12  Mark Salter  <msalter@redhat.com>

	Fix exit to EFI firmware
	The current code for EFI grub_exit() calls grub_efi_fini() before
	returning to firmware. In the case of ARM, this leaves a timer
	event running which could lead to a firmware crash. This patch
	changes this so that grub_machine_fini() is called with a NORETURN
	flag. This allows machine-specific shutdown to happen as well
	as the shutdown done by grub_efi_fini().

2015-06-12  Paul Menzel  <paulepanter@users.sourceforge.net>

	disk/ahci.c: Use defines `GRUB_AHCI_HBA_PORT_CMD_SPIN_UP` and `GRUB_AHCI_HBA_PORT_CMD_POWER_ON`
	Instead of hard coding `2` and `4` use the macros defined already at the
	top of the file. As a consequence, wrap the now too long line.

2015-06-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: XFS v5 support

2015-06-12  Jan Kara  <jack@suse.cz>

	xfs: V5 filesystem format support
	Add support for new XFS on disk format. We have to handle optional
	filetype fields in directory entries, additional CRC, LSN, UUID entries
	in some structures, etc.

	xfs: Add helpers for inode size
	Add helpers to return size of XFS inode on disk and when loaded in
	memory.

2015-06-04  Toomas Soome  <tsoome@me.com>

	multiboot_header_tag_module_align fix to confirm multiboot specification

2015-06-02  Leif Lindholm  <leif.lindholm@linaro.org>

	configure.ac: clean up arm64 soft-float handling
	Fix compilation with gcc 5.1 (avoid internal compiler error), by
	replacing explicit -march +nofp+nosimd options with -mgeneral-regs-only.

	This also enables the removal of some further conditional build flag
	setting.

2015-06-01  dann frazier  <dann.frazier@canonical.com>

	arm64/setjmp: Add missing license macro
	Including the setjmp module in an arm64-efi image will cause it to
	immediately exit with an "incompatible license" error.

	The source file includes a GPLv3+ boilerplate, so fix this by declaring a
	GPLv3+ license using the GRUB_MOD_LICENSE macro.

2015-05-31  Paul Menzel  <paulepanter@users.sourceforge.net>

	disk/ahci.c: Add port number to port debug messages
	Currently, some messages cannot be mapped to the port they belong to as
	the port number is missing from the output. So add `port: n` to the
	debug messages.

2015-05-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	Clarify use of superusers variable and menu entry access
	superusers controls both CLI and editing. Also explicitly mention that
	empty superusers disables them.

	"Access to menuentry" is a bit vague - change to "execute menuentry"
	to make it obvious, what access is granted.

2015-05-30  Paul Menzel  <paulepanter@users.sourceforge.net>

	Correct spelling of *scheduled*
	Run the command below

		$ git grep -l schedulded | xargs sed -i 's/schedulded/scheduled/g'

	and revert the change in `ChangeLog-2015`.

	Including "miscellaneous" spelling fix noted by richardvoigt@gmail.com

2015-05-30  Toomas Soome  <tsoome@me.com>

	zfs extensible_dataset and large_blocks feature support
	large blocks basically use extensible dataset feature, or to be exact,
	setting recordsize above 128k will trigger large_block feature to be
	enabled and storing such blocks is using feature extensible dataset. so
	the extensible dataset is prerequisite.

	Changes implement read support extensible dataset… instead of fixed DMU
	types they dont specify type, making it possible to use fat zap objects
	from bonus area.

2015-05-27  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot1: never place modules in low memory.
	While in theory permitted by the spec, modules rarely fit in low memory
	anyway and not every kernel is able to handle modules in low memory anyway.
	At least VMWare is known not to be able to handle modules at arbitrary
	locations.

2015-05-24  Paul Menzel  <paulepanter@users.sourceforge.net>

	disk/ahci: Use defines `GRUB_ATA_STATUS_BUSY` and `GRUB_ATA_STATUS_DRQ`
	Instead of hard coding `0x88` use the macros defined in `disk/ata.h`.

2015-05-19  Paul Menzel  <paulepanter@users.sourceforge.net>

	cb_timestamps.c: Add new time stamp descriptions
	Add the descriptions of the “core”, that means no vendorcode or payload,
	coreboot time stamps added up to coreboot commit a7d92441 (timestamps:
	You can never have enough of them!) [1].

	Running `coreboot_boottime` in the GRUB command line interface now shows
	descriptions for all time stamps again on the ASRock E350M1.

	[1] http://review.coreboot.org/9608

2015-05-17  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: ignore gateway_ip (relay) field.
	From RFC1542:

	   The 'giaddr' field is rather poorly named.  It exists to facilitate
	   the transfer of BOOTREQUEST messages from a client, through BOOTP
	   relay agents, to servers on different networks than the client.
	   Similarly, it facilitates the delivery of BOOTREPLY messages from the
	   servers, through BOOTP relay agents, back to the client.  In no case
	   does it represent a general IP router to be used by the client.  A
	   BOOTP client MUST set the 'giaddr' field to zero (0.0.0.0) in all
	   BOOTREQUEST messages it generates.

	   A BOOTP client MUST NOT interpret the 'giaddr' field of a BOOTREPLY
	   message to be the IP address of an IP router.  A BOOTP client SHOULD
	   completely ignore the contents of the 'giaddr' field in BOOTREPLY
	   messages.

	Leave code ifdef'd out for the time being in case we see regression.

	Suggested by: Rink Springer <rink@rink.nu>
	Closes: 43396

2015-05-17  Andrei Borzenkov  <arvidjaar@gmail.com>

	hostdisk: fix crash with NULL device.map
	grub-macbless calls grub_util_biosdisk_init with NULL device.map.

2015-05-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	zfs: fix integer truncation in zap_lookup
	Size after shift could exceed 16 bits; use grub_unit32_t for result.

	Reported and tested by: Kostya Berger <bergerkos@yahoo.co.uk>
	Closes: 44448

2015-05-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	remove extra newlines in grub_util_* strings
	grub_util_{info,warn,error} already add trailing newlines, so remove
	them from format strings. Also trailing full stops are already added.

2015-05-12  Jan Kara  <jack@suse.cz>

	xfs: Convert inode numbers to cpu endianity immediately after reading
	Currently XFS driver converted inode numbers to native endianity only
	when using them to compute inode position. Although this works, it is
	somewhat confusing. So convert inode numbers when reading them from disk
	structures as every other field.

2015-05-11  Jan Kara  <jack@suse.cz>

	xfs: Fix termination loop for directory iteration
	Directory iteration used wrong position (sizeof wrong structure) for
	termination of iteration inside a directory block. Luckily the position
	ended up being wrong by just 1 byte and directory entries are larger so
	things worked out fine in practice. But fix the problem anyway.

2015-05-08  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpi: do not skip BIOS scan if EBDA length is zero
	EBDA layout is not standardized so we cannot assume first two bytes
	are length. Neither is it required by ACPI standard. HP 8710W is known
	to contain zeroes here.

	Closes: 45002

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add asm-tests to tarball

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	util/grub-mkrescue: Fix compilation

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	efinet: open Simple Network Protocol exclusively
	EDK2 network stack is based on Managed Network Protocol which is layered
	on top of Simple Management Protocol and does background polling. This
	polling races with grub for received (and probably trasmitted) packets
	which causes either serious slowdown or complete failure to load files.

	Open SNP device exclusively.  This destroys all child MNP instances and
	stops background polling.

	Exclusive open cannot be done when enumerating cards, as it would destroy
	PXE information we need to autoconfigure interface; and it cannot be done
	during autoconfiguration as we need to do it for non-PXE boot as well. So
	move SNP open to card ->open method and add matching ->close to clean up.

	Based on patch from Mark Salter <msalter@redhat.com>

	Also-By: Mark Salter <msalter@redhat.com>
	Closes: 41731

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	efinet: skip virtual IPv4 and IPv6 devices when enumerating cards
	EDK2 PXE driver creates two child devices - IPv4 and IPv6 - with
	bound SNP instance. This means we get three cards for every physical
	adapter when enumerating. Not only is this confusing, this may result
	in grub ignoring packets that come in via the "wrong" card.

	Example of device hierarchy is

	 Ctrl[91] PciRoot(0x0)/Pci(0x3,0x0)
	   Ctrl[95] PciRoot(0x0)/Pci(0x3,0x0)/MAC(525400123456,0x1)
	     Ctrl[B4] PciRoot(0x0)/Pci(0x3,0x0)/MAC(525400123456,0x1)/IPv4(0.0.0.0)
	     Ctrl[BC] PciRoot(0x0)/Pci(0x3,0x0)/MAC(525400123456,0x1)/IPv6(0000:0000:0000:0000:0000:0000:0000:0000)

	Skip PXE created virtual devices when enumerating cards. Make sure to
	find real card when applying initial autoconfiguration during PXE boot,
	this information is associated with one of child devices.

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	efidisk: move device path helpers in core for efinet

	convert to, not from, CPU byte order in DNS receive function

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader/linux: do not pad initrd with zeroes at the end
	Syslinux memdisk is using initrd image and needs to know uncompressed
	size in advance. For gzip uncompressed size is at the end of compressed
	stream. Grub padded each input file to 4 bytes at the end, which means
	syslinux got wrong size.

	Linux initramfs loader apparently does not care about trailing alignment.
	So change code to align beginning of each file instead which atomatically
	gives us the correct size for single file.

	Reported-By: David Shaw <dshaw@jabberwocky.com>

2015-05-07  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/relocator: Remove unused extern grub_relocator64_rip_addr

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-install-common: Increase buf size to 8192 as modinfo.sh is bigger.

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-mkrescue: Recognize -output as an alias of --output.
	This helps us to be in line with xorriso -as mkisofs.

	Suggested by: Thomas Schmitt

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	linux.c: Ensure that initrd is page-aligned.

	Revert parts accidentally committed 2 commits ago.

2015-05-07  Fu Wei  <fu.wei@linaro.org>

	fdt.h: Add grub_fdt_set_reg64 macro

	arm64: Export useful functions from linux.c

2015-05-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	Revert "efinet: memory leak on module removal"
	This reverts commits 47b2bee3ef0ea60fc3f5bfc37f3784e559385297
	and 8d3c4544ffdd0289a4b0bdeb0cdc6355f801a4b3. It is not safe
	to free allocated cards, dangling pointers main remain. Such
	cleanup requires more changes in net core.

	efinet: cannot free const char * pointer

	efinet: memory leak on module removal

2015-05-03  Andrei Borzenkov  <arvidjaar@gmail.com>

	zfs: add missing NULL check and fix incorrect buffer overwrite
	grub_memset should zero out padding after data end. It is not clear
	why it is needed at all - ZFS block is at least 512 bytes and power
	of two, so it is always multiple of 16 bytes. This grub_memset
	apparently never did anything.

2015-05-03  Toomas Soome  <tsoome@me.com>

	zfs: com.delphix:embedded_data feature support

	zfs: com.delphix:hole_birth feature support
	In the past birth was always zero for holes. This feature started
	to make use of birth for holes as well, so change code to test for
	valid DVA address instead.

2015-04-29  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mkconfig: use $pkgdatadir in scripts
	Otherwise scripts will source wrong grub-mkconfig_lib.

2015-04-24  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove -V in grub-mkrescue.c
	It clashhes with -V which is alias to -volid.

2015-04-13  Toomas Soome  <tsoome@me.com>

	getroot: include sys/mkdev.h for makedev
	Solaris (like) systems need to include sys/mkdev.h for makedev() function.

2015-04-13  Toomas Soome  <tsoome@me.com>

	core/partmap: rename 'sun' to avoid clash with predefined symbol
	the symbol “sun” is defined macro in solaris derived systems, from
	gcc -dM -E:

	and therefore can not be used as name.

2015-04-12  Paul Menzel  <paulepanter@users.sourceforge.net>

	docs/grub.texi: Fix spelling of cbfstool

2015-04-06  Andrei Borzenkov  <arvidjaar@gmail.com>

	core: avoid NULL derefrence in grub_divmod64s
	It can be called with NULL for third argument.  grub_divmod32* for
	now are called only from within wrappers, so skip check.

	Reported-By: Michael Zimmermann <sigmaepsilon92@gmail.com>

2015-03-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	do not emit cryptomount without crypto UUID

2015-03-28  Sarah Newman  <srn@prgmr.com>

	grub-core/loader/i386/xen.c: Initialized initrd_ctx so we don't free a random pointer from the stack.

2015-03-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: trivial grub_cpu_to_XX_compile_time cleanup

2015-03-27  Lunar  <lunar@torproject.org>

	syslinux: Support {vesa,}menu.c32.

2015-03-27  Steve McIntyre  <steve@einval.com>

	Recognize EFI platform even in case of mismatch between Linux and EFI.
	Some x86 systems might be capable of running a 64-bit Linux kernel but
	only use a 32-bit EFI (e.g. Intel Bay Trail systems). It's useful for
	grub-install to be able to recognise such systems, to set the default
	x86 platform correctly.

	To allow grub-install to know the size of the firmware rather than
	just the size of the kernel, there is now an extra EFI sysfs file to
	describe the underlying firmware. Read that if possible, otherwise
	fall back to the kernel type as before.

2015-03-27  Michael Zimmermann  <sigmaepsilon92@gmail.com>

	Add missing initializers to silence suprious warnings.

2015-03-27  Leif Lindholm  <leif.lindholm@linaro.org>

	dl_helper: Cleanup
	Use the new thumb_get_instruction_word/thumb_set_instruction_word
	helpers throughout.

	Style cleanup (missing spaces).

	Move Thumb MOVW/MOVT handlers into Thumb relocation section of file.

2015-03-27  Martin Wilck  <martin.wilck@ts.fujitsu.com>

	efinet: Check for immediate completition.
	This both speeds GRUB up and workarounds unexpected EFI behaviour.

2015-03-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Make Makefile.util.def independent of platform.

2015-03-27  Daniel Kahn Gillmor  <dkg@fifthhorseman.net>

	util/mkimage: Use stable timestamp when generating binaries.

2015-03-27  Vladimir Serbinenko  <phcoder@gmail.com>

	modinfo.sh.in: Add missing config variables.

	Makefile.core.def: Remove obsolete LDADD_KERNEL

	arp, icmp: Fix handling in case of oversized or invalid packets.
	This restrict ARP handling to MAC and IP addresses but in practice we need
	only this case anyway and other cases are very rar if exist at all. It makes
	code much simpler and less error-prone.

2015-03-23  Colin Watson  <cjwatson@ubuntu.com>

	hostfs: Drop unnecessary feature test macros
	_BSD_SOURCE was added to allow the use of DT_DIR, but that was removed
	in e768b77068a0b030a07576852bd0f121c9a077eb.  While adding
	_DEFAULT_SOURCE as well works around problems with current glibc,
	neither is in fact needed nowadays.

2015-03-20  Vladimir Serbinenko  <phcoder@gmail.com>

	compiler-rt-emu: Add missing file.

	emunet: Fix init error checking.
	Otherwise emunet doesn't expose any cards.

	fddboot_test: Add -no-pad to xorriso.

	grub-mkrescue: pass all unrecognized options unchanged to xorriso.

	cacheinfo: Add missing license information.

2015-03-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: add LVM RAID1 support
	LVM miscalculates bitmap size with small extent, so start with 16K as
	for other RAID types.

	Until version 2.02.103 LVM counts metadata segments twice when checking
	available space, reduce segment count by one to account for this bug.

2015-03-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	core: add LVM RAID1 support
	Closes 44534.

2015-03-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: explicitly set segment type for LVM mirror
	LVM mirror defaults to RAID1 today and can be different on different
	systems as set in lvm.conf.

2015-03-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: better estimation of filesystem time for LVM/RAID
	Write activity with LVM/RAID can happen after filesystem is unmounted.
	In my testing modification time of loop files was 15 - 20 seconds
	after unmount.  So use time as close to unmount as possible as
	reference instead.

2015-03-06  Vladimir Serbinenko  <phcoder@gmail.com>

	hfsplus: Fix potential access to uninited memory on invalid FS

2015-03-06  Jon McCune  <jonmccune@google.com>

	autogen.sh: Allow overriding the python to be used by setting $PYTHON.
	Some installations have several python versions installed. Allow user
	to choose which one to use by setting $PYTHON.

2015-03-05  Andrei Borzenkov  <arvidjaar@gmail.com>

	update gnulib/argp-help.c to fix garbage in grub-mknetdir --help output
	argp_help attempts to translate empty string, which results in printing
	meta information about translation, like in

	bor@opensuse:~/build/grub> grub2-mknetdir --help
	Использование: grub2-mknetdir [ПАРАМЕТР…]
	Project-Id-Version: grub 2.02-pre2
	Report-Msgid-Bugs-To: bug-grub@gnu.org
	...

	Update gnulib/argp-help.c to the current version which fixes this
	(commit b9bfe78424b871f5b92e5ee9e7d21ef951a6801d).

2015-03-05  Andrey Borzenkov  <arvidjaar@gmail.com>

	update m4/extern-inline.m4 to upstream version to fix compilation on FreeBSD
	In file included from util/grub-mkimage.c:54:0:
	./grub-core/gnulib/argp.h:627:49: error: '__sbistype' is static but
	used in inline function '_option_is_short' which is not static
	[-Werror] cc1: all warnings being treated as errors gmake[2]: ***
	[util/grub_mkimage-grub-mkimage.o] Error 1

	Update m4/extern-inline.m4 to current upstream gnulib version that
	contains fix for this (commit b9bfe78424b871f5b92e5ee9e7d21ef951a6801d).

	Reported-By: Beeblebrox <zaphod@berentweb.com>

2015-03-04  Vladimir Serbinenko  <phcoder@gmail.com>

	syslinux_parse: Fix the case of unknown localboot.
	Reported by: Jordan Uggla

	configure.ac: Fix the name of pciaccess header.

	Fix canonicalize_file_name clash.
	canonicalize_file_name clashed with gnulib function. Additionally
	it was declared in 2 places: emu/misc.h and util/misc.h. Added
	grub_ prefix and removed second declaration.

2015-03-03  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove emu libusb support.
	It's disabled by default and has been broken for a long time.
	As nobody is interested in fixing and maintaining it, remove it.

	configure.ac: Remove unused COND_clang

	Remove libgcc dependency.
	libgcc for boot environment isn't always present and compatible.
	libgcc is often absent if endianness or bit-size at boot is different
	from running OS.
	libgcc may use optimised opcodes that aren't available on boot time.
	So instead of relying on libgcc shipped with the compiler, supply
	the functions in GRUB directly.
	Tests are present to ensure that those replacement functions behave the
	way compiler expects them to.

	types.h: Use __builtin_bswap* with clang.
	clang pretends to be GCC 4.2 but we use __builtin_bswap* only with GCC 4.3+.
	clang support __builtin_bswap*, so use it.

	configure.ac: Set $CPPFLAGS when checking for no_app_regs.
	Fixes compilation for sparc64 with clang.

	Don't continue to query block-size if disk doesn't have it.
	Stops poluting screen with a lot of "block-size: exception -21".

2015-02-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: free temporary variable

2015-02-28  Vladimir Serbinenko  <phcoder@gmail.com>

	exclude.pot: Add new technical strings

	grub-probe: Mark a "[default=]" for translation.

	grub-shell: Add missing --locale-directory.
	Fixes the language tests is no make install was done.

	ntfs_test: Skip is setfattr is unavailable.

2015-02-26  Vladimir Serbinenko  <phcoder@gmail.com>

	emu/cache: Change declaration of __clear_cache to match builtin declaration.
	Fixes compile of arm64-emu.

	arm/dl: Fix handling of nonstandard relocation sizes

	gzio: Optimize by removing division.

	raid6: Optimize by removing division.

	dmraid_nvidia: Fix division by 0 and missing byte-swap.

	crypto: restrict cipher block size to power of 2.
	All current ciphers have blocks which are power of 2 and it's
	unlikely to change. Other block length would be tricky to handle anyway.
	This restriction allows avoiding extra divisions.

	jpeg: Optimise by replacing division with shifts.

	png: Optimize by avoiding divisions.

	Add missing lib/division.c

	fbblit: Optimize by replacing division with additions and shifts.

	bitmap_scale: Optimize by moving division out of the loop.

	minilzo: Skip parts tha we don't need.

2015-02-23  Vladimir Serbinenko  <phcoder@gmail.com>

	mips: Fix soft-float handling.
	Add -msoft-float alongside clang arguments to specify ABI.
	Specify ABI in asm files explicitly.
	This trigers asm warning due to gcc failing to propagate -msoft-float
	but it's tolerable.

	Add missing grub_ prefix in memcpy invocation

	Allow clang compilation for thumb with -mthumb-interwork.
	clang already uses -mthumb-interwork behaviour even thout it doesn't
	support the option.

	arm64: Fix compilation failure.
	Don't supply +nosimd to asm files.
	Otherwise +nosimd coming from flags forbids some of instructions
	used in cache_flush.

	Supply signed division to fix ARM compilation.
	Previously we supplied only unsigned divisions on platforms that need software
	division.
	Yet compiler may itself use a signed division. A typical example would be a
	difference between 2 pointers which involves division by object size.

2015-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	acpi: Fix unused function warning.

	configure.ac: Add ia64-specific way to disable floats.

	i386/tsc: Fix unused function warning on xen.

2015-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Experimental support for clang for sparc64.
	Automatically discover command line options to make clang and
	gcc behave in same way.

	Tested with qemu.

2015-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Discover which option provides soft-float on configure stage.
	Deals with clang needing other arguments to stop issuing floating
	instructions than gcc.

2015-02-21  Vladimir Serbinenko  <phcoder@gmail.com>

	mips: Switch to more portable .org
	Binary is unchanged.

	sparc64: Switch to more portable .org.
	Binaries are unchanged.

	kernel-8086: Switch to more portable .org.

	Relax requirements on asm for non-BIOS i386 platforms.
	These platforms don't have a hard limit on size of resulting code16
	code, so we don't care if assembly is bigger than necessarry.

	qemu: Switch to more portable .org
	Binary is checked identical.

	qemu: Fix GateA20 enabling.
	GateA20 code was inactive due to address error.

	qemu: Fix compilation

	Remove realmode.S from coreboot and qemu.
	It's not used there.

	Remove obsolete ADDR32 and DATA32 checks.

	i386: Remove needless ADDR32 prefixes when address is known and fixed.
	Shaves off 6 bytes in lzma_decompress.img.

	i386-pc/boot: Explicitly mark kernel_address[_high] as local.
	Otherwise apple asm might try to make accesses relocatable.

	Change dot assignmnet to more portable .org.
	Binary is unchanged (verified)

	i386: Move from explicit ADDR32/DATA32 prefixes to instruction suffixes.
	Is more portable.
	Binary is unchanged (verified).

	Test which flags make our asm compile.
	Previously we relied on assumption that clang always needs -no-integrated-as
	but it's not always true.

	INSTALL: clarify that clang support is experimental

	zfs/mzap_lookup: Fix argument types

	wildcard: Mark unused argument as such.

	ofdisk: Exclude floppies from scanning.
	It causes similar hang as CD on at least the qemu.

	configure: Add -msoft-float to CCASFLAGS
	Otherwise mismatch between API flags triggers linker failure

	mips/startup_raw: Use more portable .asciz

	Provide __aeabi_mem{cpy,set}
	Fixes ARM compilation

	div_test: Don't try to divide by zero

	INSTALL: Fix names of host flags to match actual behaviour

	Strip .MIPS.abiflags which causes compile failure

2015-02-20  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Move adding of include options to the very end to avoid subshell.

	configure: Add missing comma.

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	ext2: Ignore INCOMPAT_MMP.
	It's not really incompatible as long as driver never writes to FS.

	ext2: Support META_BG.
	This fixes bug that system would become unbootable after ext*
	online resize if no resize_inode was created at ext* format time.

2015-02-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	tests: remove hardcoded paths from syslinux_test
	abs_top_srcdir appeared in Autoconf 2.52f. Minimal grub requirement
	is 2.60 so we should be good here.

	build-sys: add syslinux test files to tarball

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	Add test for syslinux converter

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	Don't remove initrd= parameter.
	Based on simplified patch by Lunar.

	Reported by: Lunar

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	syslinux_parse: Always output comments even if no entries are found.

2015-02-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	diskfilter_make_raid: more memory leaks in failure path

2015-02-14  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/lvm: Use zalloc to ensure that segments are initialised to sane value.
	Reported by: EmanueL Czirai.

2015-02-14  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Fix information request tag size calculation

2015-02-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	diskfilter: fix double free of lv names for mdraid
	Avoid micro-optimization in grub_diskfilter_make_raid and make sure
	name and fullname are independent strings. This avoids need to special
	case it everywhere else.

	Also fix memory leak in failure case in grub_diskfilter_make_raid.

	Closes: 41582

2015-02-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	diskfilter: fix crash in validate_lv for mdraid arrays
	Commit 750f4bacd3262376ced3f837d8dc78f834ca233a put LV validation before
	actual vg assignment. Make grub_diskfilter_make_raid to assign ->vg as
	happens in other cases for consistency. Also clean up redundant code and add
	explicit NULL lv->vg check in validate_lv.

	Also fix segment validation in validate_lv; it became obvious when crash
	was fixed.

	Closes: 44199

2015-02-12  Jiri Slaby  <jslaby@suse.cz>

	util: mkimage, fix gcc5 build failure
	gcc5 reports:
	../util/mkimage.c: In function 'grub_install_get_image_target':
	../util/mkimage.c:954:5: error: loop exit may only be reached after undefined behavior [-Werror=aggressive-loop-optimizations]
	     && j < ARRAY_SIZE (image_targets[i].names); j++)
	     ^
	../util/mkimage.c:953:39: note: possible undefined statement is here
	      for (j = 0; image_targets[i].names[j]
	                                        ^

	Well, let's move the index 'j' test before accesing the array to:
	1) make the loop obvious
	2) make gcc happy

2015-02-03  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: implement additional relocations generated by gcc 4.9 at -O3
	GCC 4.9 also generates R_ARM_THM_MOVW_ABS_NC and R_ARM_THM_MOVT_ABS,
	as an alternative to ABS32.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	setup: fix blocklist size calculation
	Found by: Coverity scan.

	grub-fstest: fix descriptor leak
	Found by: Coverity scan.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/pxe: fix error condition
	Test return value of grub_netbuff_reserve(), buf itself cannot be
	NULL here.

	Found by: Coverity scan.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mkimage: fix potential NULL pointer dereference
	Move fatal check whether symtab_section is NULL before first reference.

	Found by: Coverity scan.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/ip: check result of grub_netbuff_push
	Found by: Coverity scan.

	tests: add test command file tests
	This requires access to files in both host and grub image, so
	implementing as separate test unit instead of script test was
	more easy.

	test: consistently use TMPDIR and same name pattern for temp files

	test: fix previous commit - we need to return from subexpression
	( ... ) was processed recursively, we need to return from it. Revert
	this change.

	test: do not stop after first file test or closing bracket
	Closes: 44115

2015-01-28  Leif Lindholm  <leif.lindholm@linaro.org>

	configure.ac: don't use -msoft-float for arm64
	aarch64 toolchains do not support the -msoft-float option added by
	commit 3661261f. Insted, for arm64 use -march=armv8-a+nofp+nosimd.

	Reported-by: Ryan Harkin <ryan.harkin@linaro.org>

2015-01-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	script/execute.c: fix memory leak.
	Make sure to continue loop over array after failure to free
	allocated strings.

	Found by: Coverity scan.

2015-01-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	syslinux_parse: fix memory leak.
	Found by: Coverity scan.

2015-01-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	Change quotes to match overall style in NEWS

	loader/xnu: fix memory leak.
	Foound by: Coverity scan.

	util/grub-probe: fix memory leaks.
	Found by: Coverity scan.

	fs/hfsplus: fix memory leak.
	Found by: Coverity scan.

	fs/zfs/zfscrypt.c: fix indentation.

	fs/zfs/zfscrypt.c: fix memory leaks.
	Found by: Coverity scan.

	commands/parttool: fix memory leak.
	Found by: Coverity scan.

	fs/zfs/zfs.c: fix memory leak.
	Found by: Coverity scan.

	linux/ofpath: fix descriptor leak
	Found by: Coverity scan

	linux/hostdisk: use strncpy instead of strlcpy
	strlcpy is not available on Linux as part of standard libraries.
	It probably is not worth extra configure checks espicially as we
	need to handle missing function anyway.

2015-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Document intentional fallthroughs.
	Found by: Coverity scan.

	linux/ofpath: Fix error handling.
	Found by: Coverity Scan.

	linux/hostdisk: Limit strcpy size to buffer size.
	Found by: Coverity scan.

	fs/zfscrypt: Add missing explicit cast.
	Found by: Coverity scan.

	fs/zfs: Fix error handling.
	Found by: Coverity Scan.

2015-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/{cbfs,cpio}: Remove useless check if mode is NULL.
	Callers already ensure that it's not null.

	Found by: Coverity Scan.

2015-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/acpi: Use ALIGN_UP rather than manual expression.
	Improves readability and hopefully automatic scanning.

	Found by: Coverity Scan.

2015-01-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	util/setup: fix memory leak.
	Found by: Coverity scan.

	util/mkimage: fix memory leaks.
	Found by: Coverity scan.

	util/grub-mount: fix descriptor leak.
	Found by: Coverity scan.

	util/grub-mkstandalone: fix memory leak.
	Found by: Coverity scan.

	util/grub-install: rearrange code to avoid memory leak.
	Found by: Coverity scan.

	linux/getroot: fix memory leak.
	Found by: Coverity scan.

	util/install: fix memory leak.
	Found by: Coverity scan.

	util/setup: fix memory leak.
	Found by: Coverity scan.

	linux/ofpath: fix various memory leaks.
	Found by: Coverity scan.

	linux/getroot: fix descriptor leak.
	Found by: Coverity scan.

2015-01-26  Vladimir Serbinenko  <phcoder@gmail.com>

	util/misc.c: Check ftello return value.
	Found by: Coverity scan.

	grub-macbless: Fix resource leak.
	Found by: Coverity scan.

	grub-install: Fix memory leak.
	Found by: Coverity scan.

	grub-install-common: Fix sizeof usage.
	Found by: Coverity scan.

	util/getroot: Add missing grub_disk_close.
	Found by: Coverity scan.

	vbe: Fix incorrect register usage.
	Found by: Coverity scan.

	unix/password: Fix file descriptor leak.
	Found by: Coverity scan.

	linux/getroot: Fix error handling.
	Found by: Coverity scan.

	linux/blocklist: Fix memory leak.
	Found by: Coverity scan.

	devmapper/getroot: Fix memory leak.
	Found by: Coverity scan.

	normal/misc: Close device on all pathes.
	Found by: Coverity scan.

	normal/main: Fix error handling.
	Found by: Coverity scan.

	xnu: Add missing error check.
	Found by: Coveriy scan.

	plan9: Add missing grub_device_close.
	Found by: Coverity scan.

	multiboot: Simplify to avoid confusing assignment.
	Found by: Coverity scan.

	bsd: Add missing null-pointer check.
	Found by: Coverity scan.

	lib/syslinux_parse: Add missing error check.
	Found by: Coverity scan.

	lib/syslinux_parse: Fix memory leak.
	Found by: Coveriy scan.

	lib/syslinux_parse: Add missing alloc check.
	Found by: Coverity scan.

	i386/pc/mmap: Fix memset size.
	Found by: Coverity scan.

	gfxmenu/theme_loader: Add missing allos error check.
	Found by: Coverity scan.

	gfxmenu/icon_manager: Fix null pointer dereference.
	Found by: Coverity scan.

	fs/ufs: Add missing error check.
	Found by: Coverity scan.

	configure.ac: Always add -D_FILE_OFFSET_BITS=64.

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/sfs: Fix error check and add sanity check.
	Found by: Coverity scan.

	fs/reiserfs: Fix sector count overflow.
	Found by: Coverity scan.

	fs/ntfs: Add sizes sanity checks.
	Found by: Coverity scan.

	fs/ntfs: Add missing free.
	Found by: Coverity scan.

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/minix: Fix sector promotion to 64-bit.
	While on it make GRUB_MINIX_ZONE2SECT into function.

	Found by: Coverity scan

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	grub_iso9660_read: Explicitly check read_node return value.
	Not really needed as grub_errno is already checked but is nicer.

	Found by: Coverity scan.

2015-01-25  Andrei Borzenkov  <arvidjaar@gmail.com>

	commands/fileXX: Fix remaining memory leak.
	Found by: Coverity Scan.

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/hfs: Add pointer sanity checks.
	Found by: Coverity scan.

	fs/hfs/hfs_open: Check that mount succeeded.
	Found by: Coverity scan.

	fs/fat: Fix codepath to properly free on error.
	Found by: Coverity scan.

	fs/cpio_common: Add a sanity check on namesize.
	Found by: Coverity scan.

	fs/cbfs: Add missing free.
	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	font: Add missing free.
	Found by: Coverity Scan.

	biosdisk: Add missing cast.
	Found by: Coverity scan.

	disk/geli: Add missing free.
	Found by: Coverity scan.

	disk/geli: Add missing seek success check.
	Found by: Coverity scan.

	disk/diskfilter: Add missing lv presence check.
	Found by: Coverity scan.

	disk/cryptodisk: Add missing error check.
	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/ahci: Fix device_map_range argument.
	Argument is not used on x86, hence it's gone unnoticed.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/AFsplitter: check argument validity before doing any allocs.
	This avoids possible memory leaks.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/wildcard: Add missing free.
	Found by: Coverity scan.

	commands/verify: Fix sha1 context zeroing-out.
	Current code doesn't zero-out context completely. It's a minor issue
	really as sha1 init already takes care of initing the context.

	commands/tr: Simplify and fix missing parameter test.
	Found by: Coverity scan

	commands/syslinux: Add missing free.
	Found by: Coverity scan.

	commands/parttool: Add missing device close.
	Found by: Coverity scan.

	commands/nativedisk: Add missing device_close.
	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/macbless: Handle device opening errors correctly.
	Wrong variable was checked for errors.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/macbless: Fix potential overflow.
	Is a minor concern as no such FS would be created under normal circumstances
	and failure was benign.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/macbless: Remove incorrect grub_free.
	Found by: Coverity Scan

	commands/legacycfg: Fix resource leaks.

	zfs: Fix disk-matching logic.
	Reported by: Tim Chase <dweeezil>

	commands/hdparm: Add missing grub_disk_close.
	Found by: Coverity scan.

	gptsync: Add missing device_close.
	Found by: Coverity scan

	commands/fileXX: Fix memory leak.
	Found by: Coverity Scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/file: Change the confusing loop stop condition.
	Old condition was used to zero-out header variable on exit of the loop.
	This is correct but confusing. Replace with in-loop logic.

	Found by: Coverity Scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/acpi: Use ALIGN_UP rather than manual expression.
	Improves readability and hopefully automatic scanning.

	Found by: Coverity Scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	uhci: Fix null pointer dereference.
	Found by: Coverity scan.

	Always add -msoft-float to avoid compiler generating float arithmetics.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	Generate empty ChangeLog if no .git is available.
	When making dist from a git snapshot without repo available make dist would
	fail to find ChangeLog. Generate empty ChangeLog if no ChangeLog is already
	present and repo is not available.

	Reported by: Andrei Borzenkov <arvidjaar@gmail.com>

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	Makefile.am: Fix Changelog cutoff address.
	gitlog-to-changelog Doesn't generate entries for cutoff day, only
	for days after the cutoff date, adjust by one to compensate.

	efidisk: Return the determined root disk even if partition is unknown.

	util/grub-mkrescue.c: Always include part_msdos and part_gpt on EFI.
	When booted from stick, EFI would use GPT partition and our root
	device detection algortihm depends on GRUB's ability to see the same
	partitions. Hence include msdos and gpt partmap modules on EFI even when
	they're not needed to access root filesystem.

	conf/Makefile.common: Remove unused {LD,C}FLAGS_CPU.

	Autogenerate ChangeLog from git changelog.
	Old ChangeLog is moved to ChangeLog-2015. For all changes starting from
	this one ChangeLog will be generated from gitlog only on explicit make
	invocation and make dist.

2015-01-23  Vladimir Serbinenko  <phcoder@gmail.com>

		* tests/file_filter/file: Really add missing file.

2015-01-23  Andrei Borzenkov  <arvidjaar@gmail.com>

	Mention platform "none" in NEWS

2015-01-23  Andrey Borzenkov  <arvidjaar@gmail.com>

	accept also hdX as alias to native Xen disk name
	To be compatible with legacy pv-grub, sort disks by increasing order of handle
	value. This allows reusing legacy pv-grub menu.lst which is using hdX names.

	Suggested-By: Michael Chang <mchang@suse.com>
	Closes: 44026
