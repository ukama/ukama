// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	store "github.com/ukama/ukama/nodes/ukamaOS/distro/system/pcrf/pkg/controller/store"
)

// SessionManager is an autogenerated mock type for the SessionManager type
type SessionManager struct {
	mock.Mock
}

// CreateSesssion provides a mock function with given fields: ctx, sub, ns, rxf, txf
func (_m *SessionManager) CreateSesssion(ctx context.Context, sub *store.Subscriber, ns *store.Session, rxf *store.Flow, txf *store.Flow) error {
	ret := _m.Called(ctx, sub, ns, rxf, txf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *store.Subscriber, *store.Session, *store.Flow, *store.Flow) error); ok {
		r0 = rf(ctx, sub, ns, rxf, txf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndAllSessions provides a mock function with given fields:
func (_m *SessionManager) EndAllSessions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndSession provides a mock function with given fields: ctx, sub
func (_m *SessionManager) EndSession(ctx context.Context, sub *store.Subscriber) error {
	ret := _m.Called(ctx, sub)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *store.Subscriber) error); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IfSessionExist provides a mock function with given fields: ctx, imsi, ip
func (_m *SessionManager) IfSessionExist(ctx context.Context, imsi string, ip string) bool {
	ret := _m.Called(ctx, imsi, ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, imsi, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewSessionManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionManager creates a new instance of SessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionManager(t mockConstructorTestingTNewSessionManager) *SessionManager {
	mock := &SessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
