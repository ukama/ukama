// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DataPath is an autogenerated mock type for the DataPath type
type DataPath struct {
	mock.Mock
}

// AddNewDataPath provides a mock function with given fields: ip, rxMeter, txMeter, rxRate, txRate, burstSize, rxCookie, txCookie
func (_m *DataPath) AddNewDataPath(ip string, rxMeter uint32, txMeter uint32, rxRate uint32, txRate uint32, burstSize uint32, rxCookie uint64, txCookie uint64) error {
	ret := _m.Called(ip, rxMeter, txMeter, rxRate, txRate, burstSize, rxCookie, txCookie)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32, uint32, uint32, uint32, uint64, uint64) error); ok {
		r0 = rf(ip, rxMeter, txMeter, rxRate, txRate, burstSize, rxCookie, txCookie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataPathCount provides a mock function with given fields:
func (_m *DataPath) DataPathCount() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// DataPathStats provides a mock function with given fields: rxCookieID, txCookieID
func (_m *DataPath) DataPathStats(rxCookieID uint64, txCookieID uint64) (uint64, uint64, uint64, uint64, error) {
	ret := _m.Called(rxCookieID, txCookieID)

	var r0 uint64
	var r1 uint64
	var r2 uint64
	var r3 uint64
	var r4 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (uint64, uint64, uint64, uint64, error)); ok {
		return rf(rxCookieID, txCookieID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) uint64); ok {
		r0 = rf(rxCookieID, txCookieID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) uint64); ok {
		r1 = rf(rxCookieID, txCookieID)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(uint64, uint64) uint64); ok {
		r2 = rf(rxCookieID, txCookieID)
	} else {
		r2 = ret.Get(2).(uint64)
	}

	if rf, ok := ret.Get(3).(func(uint64, uint64) uint64); ok {
		r3 = rf(rxCookieID, txCookieID)
	} else {
		r3 = ret.Get(3).(uint64)
	}

	if rf, ok := ret.Get(4).(func(uint64, uint64) error); ok {
		r4 = rf(rxCookieID, txCookieID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// DeleteDataPath provides a mock function with given fields: ip, rxMeter, txMeter
func (_m *DataPath) DeleteDataPath(ip string, rxMeter uint32, txMeter uint32) error {
	ret := _m.Called(ip, rxMeter, txMeter)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32) error); ok {
		r0 = rf(ip, rxMeter, txMeter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDataPath interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataPath creates a new instance of DataPath. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataPath(t mockConstructorTestingTNewDataPath) *DataPath {
	mock := &DataPath{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
