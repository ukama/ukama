name: console-testing

on:
 pull_request:
  paths:
   - 'testing/console/**'
   - '.github/workflows/testing-console.yml'

jobs:
 test:
  name: Run Playwright Tests
  runs-on: ubuntu-latest

  steps:
   - uses: actions/checkout@v4

   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: '20'

   - name: Setup pnpm
     uses: pnpm/action-setup@v2
     with:
      version: 8

   - name: Install OpenVPN
     run: |
      sudo apt-get update
      sudo apt-get install -y openvpn

   - name: Setup VPN
     run: |
      echo "${{ secrets.VPN_CONFIG }}" > vpn.ovpn
      sudo openvpn --config vpn.ovpn --daemon
      sleep 10  # Wait for VPN connection to establish
      curl ifconfig.me  # Verify VPN connection

   - name: Install dependencies
     run: |
      cd testing/console
      pnpm install
      pnpm exec playwright install --with-deps

   - name: Run Playwright tests
     env:
      CONSOLE_BASE_URL: ${{ secrets.CONSOLE_BASE_URL }}
      AUTH_BASE_URL: ${{ secrets.AUTH_BASE_URL }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      LIGHTHOUSE_SCORE_THRESHOLD: ${{ secrets.LIGHTHOUSE_SCORE_THRESHOLD }}
     run: |
      cd testing/console
      mkdir -p test-results
      pnpm test-ci

   - name: Upload test results
     if: always()
     uses: actions/upload-artifact@v4
     with:
      name: playwright-report
      path: testing/console/playwright-report
      retention-days: 30

   - name: Upload HTML report
     if: always()
     uses: actions/upload-artifact@v4
     with:
      name: playwright-report-html
      path: testing/console/playwright-report/index.html
      retention-days: 30

   - name: Comment PR with report URL
     if: github.event_name == 'pull_request'
     uses: actions/github-script@v7
     with:
      script: |
       const fs = require('fs');
       const reportPath = 'testing/console/playwright-report/index.html';
       const statsPath = 'testing/console/test-results/test-results.json';

       if (fs.existsSync(reportPath)) {
         const runId = context.runId;
         const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
           owner: context.repo.owner,
           repo: context.repo.repo,
           run_id: runId
         });
         
         const reportArtifact = artifacts.data.artifacts.find(artifact => artifact.name === 'playwright-report');
         const htmlReportArtifact = artifacts.data.artifacts.find(artifact => artifact.name === 'playwright-report-html');
         
         const artifactUrl = reportArtifact ? 
           `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts/${reportArtifact.id}` :
           `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts`;
           
         const htmlReportUrl = htmlReportArtifact ?
           `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts/${htmlReportArtifact.id}` :
           artifactUrl;
         
         let statsMessage = '';
         if (fs.existsSync(statsPath)) {
           const results = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
           let total = 0, passed = 0, failed = 0, skipped = 0;

           function countTests(suites) {
             for (const suite of suites) {
               if (suite.specs) {
                 for (const spec of suite.specs) {
                   if (spec.tests) {
                     for (const test of spec.tests) {
                       total++;
                       if (test.status === 'expected') passed++;
                       else if (test.status === 'unexpected') failed++;
                       else if (test.status === 'skipped') skipped++;
                     }
                   }
                 }
               }
             }
           }
           countTests(results.suites);

           statsMessage = `üìä Test Results:\n` +
             `- Total Tests: ${total}\n` +
             `- ‚úÖ Passed: ${passed}\n` +
             `- ‚ùå Failed: ${failed}\n` +
             `- ‚è≠Ô∏è Skipped: ${skipped}`;
         }

         await github.rest.issues.createComment({
           issue_number: context.issue.number,
           owner: context.repo.owner,
           repo: context.repo.repo,
           body: `${statsMessage}\n\n[View full report](${artifactUrl})\n[View HTML report](${htmlReportUrl})`
         });
       }
