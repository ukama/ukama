// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	simmgr "github.com/ukama/ukama/services/cloud/users/pb/gen/simmgr"

	testing "testing"
)

// SimManagerServiceServer is an autogenerated mock type for the SimManagerServiceServer type
type SimManagerServiceServer struct {
	mock.Mock
}

// GetSimInfo provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSimInfo(_a0 context.Context, _a1 *simmgr.GetSimInfoRequest) (*simmgr.GetSimInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *simmgr.GetSimInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetSimInfoRequest) *simmgr.GetSimInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetSimInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetSimInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimStatus provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSimStatus(_a0 context.Context, _a1 *simmgr.GetSimStatusRequest) (*simmgr.GetSimStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *simmgr.GetSimStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetSimStatusRequest) *simmgr.GetSimStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetSimStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetSimStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetUsage(_a0 context.Context, _a1 *simmgr.GetUsageRequest) (*simmgr.GetUsageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *simmgr.GetUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetUsageRequest) *simmgr.GetUsageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetUsageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetServiceStatus provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) SetServiceStatus(_a0 context.Context, _a1 *simmgr.SetServiceStatusRequest) (*simmgr.SetServiceStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *simmgr.SetServiceStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.SetServiceStatusRequest) *simmgr.SetServiceStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.SetServiceStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.SetServiceStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) TerminateSim(_a0 context.Context, _a1 *simmgr.TerminateSimRequest) (*simmgr.TerminateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *simmgr.TerminateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.TerminateSimRequest) *simmgr.TerminateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.TerminateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.TerminateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSimManagerServiceServer provides a mock function with given fields:
func (_m *SimManagerServiceServer) mustEmbedUnimplementedSimManagerServiceServer() {
	_m.Called()
}

// NewSimManagerServiceServer creates a new instance of SimManagerServiceServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceServer(t testing.TB) *SimManagerServiceServer {
	mock := &SimManagerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
