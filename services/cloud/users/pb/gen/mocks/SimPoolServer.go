// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	simmgr "github.com/ukama/ukama/services/cloud/users/pb/gen/simmgr"

	testing "testing"
)

// SimPoolServer is an autogenerated mock type for the SimPoolServer type
type SimPoolServer struct {
	mock.Mock
}

// PopIccid provides a mock function with given fields: _a0, _a1
func (_m *SimPoolServer) PopIccid(_a0 context.Context, _a1 *simmgr.PopIccidRequest) (*simmgr.PopIccidResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *simmgr.PopIccidResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.PopIccidRequest) *simmgr.PopIccidResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.PopIccidResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.PopIccidRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSimPoolServer provides a mock function with given fields:
func (_m *SimPoolServer) mustEmbedUnimplementedSimPoolServer() {
	_m.Called()
}

// NewSimPoolServer creates a new instance of SimPoolServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimPoolServer(t testing.TB) *SimPoolServer {
	mock := &SimPoolServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
