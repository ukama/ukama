// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	simmgr "github.com/ukama/ukama/services/cloud/users/pb/gen/simmgr"

	testing "testing"
)

// SimManagerServiceClient is an autogenerated mock type for the SimManagerServiceClient type
type SimManagerServiceClient struct {
	mock.Mock
}

// GetQrCode provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetQrCode(ctx context.Context, in *simmgr.GetQrCodeRequest, opts ...grpc.CallOption) (*simmgr.GetQrCodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *simmgr.GetQrCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetQrCodeRequest, ...grpc.CallOption) *simmgr.GetQrCodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetQrCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetQrCodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimInfo provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSimInfo(ctx context.Context, in *simmgr.GetSimInfoRequest, opts ...grpc.CallOption) (*simmgr.GetSimInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *simmgr.GetSimInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetSimInfoRequest, ...grpc.CallOption) *simmgr.GetSimInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetSimInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetSimInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimStatus provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSimStatus(ctx context.Context, in *simmgr.GetSimStatusRequest, opts ...grpc.CallOption) (*simmgr.GetSimStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *simmgr.GetSimStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetSimStatusRequest, ...grpc.CallOption) *simmgr.GetSimStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetSimStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetSimStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetUsage(ctx context.Context, in *simmgr.GetUsageRequest, opts ...grpc.CallOption) (*simmgr.GetUsageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *simmgr.GetUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.GetUsageRequest, ...grpc.CallOption) *simmgr.GetUsageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.GetUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.GetUsageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetServiceStatus provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) SetServiceStatus(ctx context.Context, in *simmgr.SetServiceStatusRequest, opts ...grpc.CallOption) (*simmgr.SetServiceStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *simmgr.SetServiceStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.SetServiceStatusRequest, ...grpc.CallOption) *simmgr.SetServiceStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.SetServiceStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.SetServiceStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) TerminateSim(ctx context.Context, in *simmgr.TerminateSimRequest, opts ...grpc.CallOption) (*simmgr.TerminateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *simmgr.TerminateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *simmgr.TerminateSimRequest, ...grpc.CallOption) *simmgr.TerminateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simmgr.TerminateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *simmgr.TerminateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSimManagerServiceClient creates a new instance of SimManagerServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceClient(t testing.TB) *SimManagerServiceClient {
	mock := &SimManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
