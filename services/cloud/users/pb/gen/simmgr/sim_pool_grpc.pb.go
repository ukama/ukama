// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: sim_pool.proto

package simmgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimPoolClient is the client API for SimPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimPoolClient interface {
	PopIccid(ctx context.Context, in *PopIccidRequest, opts ...grpc.CallOption) (*PopIccidResponse, error)
}

type simPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewSimPoolClient(cc grpc.ClientConnInterface) SimPoolClient {
	return &simPoolClient{cc}
}

func (c *simPoolClient) PopIccid(ctx context.Context, in *PopIccidRequest, opts ...grpc.CallOption) (*PopIccidResponse, error) {
	out := new(PopIccidResponse)
	err := c.cc.Invoke(ctx, "/ukama.sim_manager.v1.SimPool/PopIccid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimPoolServer is the server API for SimPool service.
// All implementations must embed UnimplementedSimPoolServer
// for forward compatibility
type SimPoolServer interface {
	PopIccid(context.Context, *PopIccidRequest) (*PopIccidResponse, error)
	mustEmbedUnimplementedSimPoolServer()
}

// UnimplementedSimPoolServer must be embedded to have forward compatible implementations.
type UnimplementedSimPoolServer struct {
}

func (UnimplementedSimPoolServer) PopIccid(context.Context, *PopIccidRequest) (*PopIccidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopIccid not implemented")
}
func (UnimplementedSimPoolServer) mustEmbedUnimplementedSimPoolServer() {}

// UnsafeSimPoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimPoolServer will
// result in compilation errors.
type UnsafeSimPoolServer interface {
	mustEmbedUnimplementedSimPoolServer()
}

func RegisterSimPoolServer(s grpc.ServiceRegistrar, srv SimPoolServer) {
	s.RegisterService(&SimPool_ServiceDesc, srv)
}

func _SimPool_PopIccid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopIccidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimPoolServer).PopIccid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.sim_manager.v1.SimPool/PopIccid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimPoolServer).PopIccid(ctx, req.(*PopIccidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimPool_ServiceDesc is the grpc.ServiceDesc for SimPool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimPool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.sim_manager.v1.SimPool",
	HandlerType: (*SimPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PopIccid",
			Handler:    _SimPool_PopIccid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sim_pool.proto",
}
