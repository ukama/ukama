// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/services/cloud/node/pb/gen"

	orgpbgen "github.com/ukama/ukama/services/cloud/org/pb/gen"

	pbgen "github.com/ukama/ukama/services/cloud/network/pb/gen"

	testing "testing"
)

// registry is an autogenerated mock type for the registry type
type registry struct {
	mock.Mock
}

// Add provides a mock function with given fields: orgName, nodeId, name, attachedNodes
func (_m *registry) Add(orgName string, nodeId string, name string, attachedNodes ...string) (*gen.Node, error) {
	_va := make([]interface{}, len(attachedNodes))
	for _i := range attachedNodes {
		_va[_i] = attachedNodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, orgName, nodeId, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.Node
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) *gen.Node); ok {
		r0 = rf(orgName, nodeId, name, attachedNodes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, ...string) error); ok {
		r1 = rf(orgName, nodeId, name, attachedNodes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNode provides a mock function with given fields: towerNodeId, amplNodeId
func (_m *registry) AttachNode(towerNodeId string, amplNodeId ...string) {
	_va := make([]interface{}, len(amplNodeId))
	for _i := range amplNodeId {
		_va[_i] = amplNodeId[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, towerNodeId)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// DeleteNode provides a mock function with given fields: nodeId
func (_m *registry) DeleteNode(nodeId string) (*pbgen.DeleteNodeResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *pbgen.DeleteNodeResponse
	if rf, ok := ret.Get(0).(func(string) *pbgen.DeleteNodeResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.DeleteNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNode provides a mock function with given fields: nodeId, attachedId
func (_m *registry) DetachNode(nodeId string, attachedId string) (*gen.Node, error) {
	ret := _m.Called(nodeId, attachedId)

	var r0 *gen.Node
	if rf, ok := ret.Get(0).(func(string, string) *gen.Node); ok {
		r0 = rf(nodeId, attachedId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nodeId, attachedId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: nodeId
func (_m *registry) GetNode(nodeId string) (*gen.GetNodeResponse, error) {
	ret := _m.Called(nodeId)

	var r0 *gen.GetNodeResponse
	if rf, ok := ret.Get(0).(func(string) *gen.GetNodeResponse); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: orgName
func (_m *registry) GetNodes(orgName string) (*pbgen.GetNodesResponse, error) {
	ret := _m.Called(orgName)

	var r0 *pbgen.GetNodesResponse
	if rf, ok := ret.Get(0).(func(string) *pbgen.GetNodesResponse); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbgen.GetNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: orgName
func (_m *registry) GetOrg(orgName string) (*orgpbgen.Organization, error) {
	ret := _m.Called(orgName)

	var r0 *orgpbgen.Organization
	if rf, ok := ret.Get(0).(func(string) *orgpbgen.Organization); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orgpbgen.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorized provides a mock function with given fields: userId, org
func (_m *registry) IsAuthorized(userId string, org string) (bool, error) {
	ret := _m.Called(userId, org)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userId, org)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: orgName, nodeId, name, attachedNodes
func (_m *registry) UpdateNode(orgName string, nodeId string, name string, attachedNodes ...string) (*gen.Node, error) {
	_va := make([]interface{}, len(attachedNodes))
	for _i := range attachedNodes {
		_va[_i] = attachedNodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, orgName, nodeId, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.Node
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) *gen.Node); ok {
		r0 = rf(orgName, nodeId, name, attachedNodes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, ...string) error); ok {
		r1 = rf(orgName, nodeId, name, attachedNodes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newRegistry creates a new instance of registry. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func newRegistry(t testing.TB) *registry {
	mock := &registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
