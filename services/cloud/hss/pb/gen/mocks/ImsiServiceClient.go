// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukamaX/cloud/hss/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ImsiServiceClient is an autogenerated mock type for the ImsiServiceClient type
type ImsiServiceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *ImsiServiceClient) Add(ctx context.Context, in *gen.AddImsiRequest, opts ...grpc.CallOption) (*gen.AddImsiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddImsiResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddImsiRequest, ...grpc.CallOption) *gen.AddImsiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddImsiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddImsiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddGuti provides a mock function with given fields: ctx, in, opts
func (_m *ImsiServiceClient) AddGuti(ctx context.Context, in *gen.AddGutiRequest, opts ...grpc.CallOption) (*gen.AddGutiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddGutiResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddGutiRequest, ...grpc.CallOption) *gen.AddGutiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddGutiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddGutiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *ImsiServiceClient) Delete(ctx context.Context, in *gen.DeleteImsiRequest, opts ...grpc.CallOption) (*gen.DeleteImsiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteImsiResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteImsiRequest, ...grpc.CallOption) *gen.DeleteImsiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteImsiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteImsiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *ImsiServiceClient) Get(ctx context.Context, in *gen.GetImsiRequest, opts ...grpc.CallOption) (*gen.GetImsiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetImsiResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetImsiRequest, ...grpc.CallOption) *gen.GetImsiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetImsiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetImsiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *ImsiServiceClient) Update(ctx context.Context, in *gen.UpdateImsiRequest, opts ...grpc.CallOption) (*gen.UpdateImsiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateImsiResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateImsiRequest, ...grpc.CallOption) *gen.UpdateImsiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateImsiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateImsiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTai provides a mock function with given fields: ctx, in, opts
func (_m *ImsiServiceClient) UpdateTai(ctx context.Context, in *gen.UpdateTaiRequest, opts ...grpc.CallOption) (*gen.UpdateTaiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UpdateTaiResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateTaiRequest, ...grpc.CallOption) *gen.UpdateTaiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateTaiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateTaiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
