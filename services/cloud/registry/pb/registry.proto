syntax = "proto3";

option go_package = "pb/gen";


package ukama.registry.v1;

service RegistryService {
    rpc AddOrg(AddOrgRequest) returns (AddOrgResponse);
    rpc GetOrg(GetOrgRequest) returns (Organization);
    rpc AddNetwork(AddNetworkRequest) returns (NetworkResponse);
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc UpdateNodeState(UpdateNodeStateRequest) returns (UpdateNodeStateResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
    rpc AttachNodes(AttachNodesRequest) returns (AttachNodesResponse);
    rpc DetachNode(DetachNodeRequest) returns (DetachNodeResponse);
}

message AddOrgRequest {
    string name = 1;
    string owner = 2;
}

message AddOrgResponse{
    Organization org = 1;
}

message AddNodeRequest{
    Node node = 1;
    string  orgName = 2;
    string network = 3;
}

message AddNodeResponse{
    Node node = 1;
}

message GetOrgRequest{
    string name = 1;
}

message DeleteNodeRequest{
    string nodeId = 1;
}

message DeleteNodeResponse{
    string nodeId = 1;
}

message GetNodeRequest{
    string nodeId = 1;
}

message GetNodeResponse{
    Node node = 1;
    Organization org = 2;
    Network network = 3;
}

message  UpdateNodeStateRequest{
    string nodeId = 1;
    NodeState state = 2;
}

message UpdateNodeStateResponse{
    string nodeId = 1;
    NodeState state = 2;
}

message  UpdateNodeRequest{
    string nodeId = 1;
    string name = 2;
}

message UpdateNodeResponse {
    Node node = 1;
}

message GetNodesRequest{    
    string orgName = 1 ;
}

message GetNodesResponse{
    string orgName = 1;
    repeated Node nodes = 2;
}

message AddNetworkRequest{
    string name = 1;
    string orgName = 2;
}
message NetworkResponse{
    Network network = 1;
}

message AttachNodesRequest {
    string parentNodeId = 1;
    repeated string  attachedNodeIds = 2;
}

message AttachNodesResponse {

}

message DetachNodeRequest{
    string detachedNodeId = 2;
}

message DetachNodeResponse {

}

message Network {
    string name = 1;
}

message Organization {
    string name = 1;
    string owner = 3;
}

enum NodeState {
    UNDEFINED = 0;
    PENDING = 1;
    ONBOARDED = 2;
}

enum NodeType{
    NODE_TYPE_UNDEFINED = 0;
    HOME = 1;
    TOWER = 2;
    AMPLIFIER = 3;
}

message Node {
    string nodeId = 1;
    NodeState state = 4;
    NodeType type = 5;
    string name = 6;
    repeated Node attached = 7;
}