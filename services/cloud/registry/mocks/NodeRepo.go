// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/services/cloud/registry/pkg/db"

	ukama "github.com/ukama/ukama/services/common/ukama"
)

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: node, nestedFunc
func (_m *NodeRepo) Add(node *db.Node, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, node)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node, ...func() error) error); ok {
		r0 = rf(node, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachNodes provides a mock function with given fields: nodeId, attachedNodeId
func (_m *NodeRepo) AttachNodes(nodeId ukama.NodeID, attachedNodeId []ukama.NodeID) error {
	ret := _m.Called(nodeId, attachedNodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, []ukama.NodeID) error); ok {
		r0 = rf(nodeId, attachedNodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, nestedFunc
func (_m *NodeRepo) Delete(id ukama.NodeID, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, ...func() error) error); ok {
		r0 = rf(id, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachNode provides a mock function with given fields: detachNodeId
func (_m *NodeRepo) DetachNode(detachNodeId ukama.NodeID) error {
	ret := _m.Called(detachNodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) error); ok {
		r0 = rf(detachNodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodeRepo) Get(id ukama.NodeID) (*db.Node, error) {
	ret := _m.Called(id)

	var r0 *db.Node
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: orgName
func (_m *NodeRepo) GetByOrg(orgName string) ([]db.Node, error) {
	ret := _m.Called(orgName)

	var r0 []db.Node
	if rf, ok := ret.Get(0).(func(string) []db.Node); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, state, nodeName, nestedFunc
func (_m *NodeRepo) Update(id ukama.NodeID, state *db.NodeState, nodeName *string, nestedFunc ...func() error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, state, nodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, *db.NodeState, *string, ...func() error) error); ok {
		r0 = rf(id, state, nodeName, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
