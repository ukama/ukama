// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/services/cloud/registry/pkg/db"

	testing "testing"
)

// NetRepo is an autogenerated mock type for the NetRepo type
type NetRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: orgId, network
func (_m *NetRepo) Add(orgId uint32, network string) (*db.Network, error) {
	ret := _m.Called(orgId, network)

	var r0 *db.Network
	if rf, ok := ret.Get(0).(func(uint32, string) *db.Network); ok {
		r0 = rf(orgId, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, string) error); ok {
		r1 = rf(orgId, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: orgName, network
func (_m *NetRepo) Get(orgName string, network string) (*db.Network, error) {
	ret := _m.Called(orgName, network)

	var r0 *db.Network
	if rf, ok := ret.Get(0).(func(string, string) *db.Network); ok {
		r0 = rf(orgName, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgName, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNetRepo creates a new instance of NetRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetRepo(t testing.TB) *NetRepo {
	mock := &NetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
