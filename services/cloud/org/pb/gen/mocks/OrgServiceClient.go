// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/services/cloud/org/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// OrgServiceClient is an autogenerated mock type for the OrgServiceClient type
type OrgServiceClient struct {
	mock.Mock
}

// AddOrg provides a mock function with given fields: ctx, in, opts
func (_m *OrgServiceClient) AddOrg(ctx context.Context, in *gen.AddOrgRequest, opts ...grpc.CallOption) (*gen.AddOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddOrgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddOrgRequest, ...grpc.CallOption) *gen.AddOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddOrgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: ctx, in, opts
func (_m *OrgServiceClient) GetOrg(ctx context.Context, in *gen.GetOrgRequest, opts ...grpc.CallOption) (*gen.GetOrgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetOrgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetOrgRequest, ...grpc.CallOption) *gen.GetOrgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetOrgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetOrgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrgServiceClient creates a new instance of OrgServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrgServiceClient(t testing.TB) *OrgServiceClient {
	mock := &OrgServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
