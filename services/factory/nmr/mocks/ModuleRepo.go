// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "github.com/ukama/ukama/services/factory/nmr/internal/db"
import mock "github.com/stretchr/testify/mock"

// ModuleRepo is an autogenerated mock type for the ModuleRepo type
type ModuleRepo struct {
	mock.Mock
}

// AddModule provides a mock function with given fields: module
func (_m *ModuleRepo) AddModule(module *db.Module) error {
	ret := _m.Called(module)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Module) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBootstrapCert provides a mock function with given fields: ModuleId
func (_m *ModuleRepo) DeleteBootstrapCert(ModuleId string) error {
	ret := _m.Called(ModuleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ModuleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModule provides a mock function with given fields: moduleId
func (_m *ModuleRepo) DeleteModule(moduleId string) error {
	ret := _m.Called(moduleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(moduleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModule provides a mock function with given fields: moduleId
func (_m *ModuleRepo) GetModule(moduleId string) (*db.Module, error) {
	ret := _m.Called(moduleId)

	var r0 *db.Module
	if rf, ok := ret.Get(0).(func(string) *db.Module); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleMfgData provides a mock function with given fields: moduleId
func (_m *ModuleRepo) GetModuleMfgData(moduleId string) (*db.Module, error) {
	ret := _m.Called(moduleId)

	var r0 *db.Module
	if rf, ok := ret.Get(0).(func(string) *db.Module); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleMfgField provides a mock function with given fields: moduleId, field
func (_m *ModuleRepo) GetModuleMfgField(moduleId string, field string) (*db.Module, error) {
	ret := _m.Called(moduleId, field)

	var r0 *db.Module
	if rf, ok := ret.Get(0).(func(string, string) *db.Module); ok {
		r0 = rf(moduleId, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(moduleId, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleMfgStatus provides a mock function with given fields: moduleId
func (_m *ModuleRepo) GetModuleMfgStatus(moduleId string) (*db.MfgStatus, error) {
	ret := _m.Called(moduleId)

	var r0 *db.MfgStatus
	if rf, ok := ret.Get(0).(func(string) *db.MfgStatus); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MfgStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModules provides a mock function with given fields:
func (_m *ModuleRepo) ListModules() (*[]db.Module, error) {
	ret := _m.Called()

	var r0 *[]db.Module
	if rf, ok := ret.Get(0).(func() *[]db.Module); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModuleMfgField provides a mock function with given fields: moduleId, field, module
func (_m *ModuleRepo) UpdateModuleMfgField(moduleId string, field string, module db.Module) error {
	ret := _m.Called(moduleId, field, module)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, db.Module) error); ok {
		r0 = rf(moduleId, field, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModuleMfgStatus provides a mock function with given fields: moduleId, status
func (_m *ModuleRepo) UpdateModuleMfgStatus(moduleId string, status db.MfgStatus) error {
	ret := _m.Called(moduleId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.MfgStatus) error); ok {
		r0 = rf(moduleId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNodeId provides a mock function with given fields: moduleId, nodeId
func (_m *ModuleRepo) UpdateNodeId(moduleId string, nodeId string) error {
	ret := _m.Called(moduleId, nodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(moduleId, nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertModule provides a mock function with given fields: Module
func (_m *ModuleRepo) UpsertModule(Module *db.Module) error {
	ret := _m.Called(Module)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Module) error); ok {
		r0 = rf(Module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
