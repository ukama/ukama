// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "github.com/ukama/ukama/services/factory/nmr/internal/db"
import mock "github.com/stretchr/testify/mock"

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

// AddOrUpdateNode provides a mock function with given fields: node
func (_m *NodeRepo) AddOrUpdateNode(node *db.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNode provides a mock function with given fields: nodeId
func (_m *NodeRepo) DeleteNode(nodeId string) error {
	ret := _m.Called(nodeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNode provides a mock function with given fields: nodeId
func (_m *NodeRepo) GetNode(nodeId string) (*db.Node, error) {
	ret := _m.Called(nodeId)

	var r0 *db.Node
	if rf, ok := ret.Get(0).(func(string) *db.Node); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeMfgTestStatus provides a mock function with given fields: nodeId
func (_m *NodeRepo) GetNodeMfgTestStatus(nodeId string) (*db.MfgTestStatus, *[]byte, error) {
	ret := _m.Called(nodeId)

	var r0 *db.MfgTestStatus
	if rf, ok := ret.Get(0).(func(string) *db.MfgTestStatus); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MfgTestStatus)
		}
	}

	var r1 *[]byte
	if rf, ok := ret.Get(1).(func(string) *[]byte); ok {
		r1 = rf(nodeId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(nodeId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNodeStatus provides a mock function with given fields: nodeId
func (_m *NodeRepo) GetNodeStatus(nodeId string) (*db.MfgStatus, error) {
	ret := _m.Called(nodeId)

	var r0 *db.MfgStatus
	if rf, ok := ret.Get(0).(func(string) *db.MfgStatus); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MfgStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields:
func (_m *NodeRepo) ListNodes() (*[]db.Node, error) {
	ret := _m.Called()

	var r0 *[]db.Node
	if rf, ok := ret.Get(0).(func() *[]db.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeMfgTestStatus provides a mock function with given fields: node
func (_m *NodeRepo) UpdateNodeMfgTestStatus(node *db.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNodeStatus provides a mock function with given fields: nodeId, status
func (_m *NodeRepo) UpdateNodeStatus(nodeId string, status db.MfgStatus) error {
	ret := _m.Called(nodeId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.MfgStatus) error); ok {
		r0 = rf(nodeId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
