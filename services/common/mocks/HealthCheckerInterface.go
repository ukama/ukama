// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// HealthCheckerInterface is an autogenerated mock type for the HealthCheckerInterface type
type HealthCheckerInterface struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, request
func (_m *HealthCheckerInterface) Check(ctx context.Context, request *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *grpc_health_v1.HealthCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc_health_v1.HealthCheckRequest) *grpc_health_v1.HealthCheckResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc_health_v1.HealthCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc_health_v1.HealthCheckRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: request, server
func (_m *HealthCheckerInterface) Watch(request *grpc_health_v1.HealthCheckRequest, server grpc_health_v1.Health_WatchServer) error {
	ret := _m.Called(request, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(*grpc_health_v1.HealthCheckRequest, grpc_health_v1.Health_WatchServer) error); ok {
		r0 = rf(request, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHealthCheckerInterface creates a new instance of HealthCheckerInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthCheckerInterface(t testing.TB) *HealthCheckerInterface {
	mock := &HealthCheckerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
