// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/ukama/ukamaX/hub/hub/pkg"

	semver "github.com/Masterminds/semver/v3"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetFile provides a mock function with given fields: ctx, artifactName, version, ext
func (_m *Storage) GetFile(ctx context.Context, artifactName string, version *semver.Version, ext string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, artifactName, version, ext)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, *semver.Version, string) io.ReadCloser); ok {
		r0 = rf(ctx, artifactName, version, ext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *semver.Version, string) error); ok {
		r1 = rf(ctx, artifactName, version, ext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, artifactName
func (_m *Storage) ListVersions(ctx context.Context, artifactName string) (*[]pkg.AritfactInfo, error) {
	ret := _m.Called(ctx, artifactName)

	var r0 *[]pkg.AritfactInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]pkg.AritfactInfo); ok {
		r0 = rf(ctx, artifactName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]pkg.AritfactInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, artifactName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApps provides a mock function with given fields: ctx
func (_m *Storage) ListApps(ctx context.Context) (*[]pkg.CappInfo, error) {
	ret := _m.Called(ctx)

	var r0 *[]pkg.CappInfo
	if rf, ok := ret.Get(0).(func(context.Context) *[]pkg.CappInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]pkg.CappInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFile provides a mock function with given fields: ctx, artifactName, version, ext, content
func (_m *Storage) PutFile(ctx context.Context, artifactName string, version *semver.Version, ext string, content io.Reader) (string, error) {
	ret := _m.Called(ctx, artifactName, version, ext, content)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, *semver.Version, string, io.Reader) string); ok {
		r0 = rf(ctx, artifactName, version, ext, content)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *semver.Version, string, io.Reader) error); ok {
		r1 = rf(ctx, artifactName, version, ext, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
