syntax = "proto3";

option go_package = "pb/gen";

package ukama.hss.v1;


import "validator.proto";
import "google/protobuf/wrappers.proto";

service UserService {
    // adds new user with ICCID. Designed for internal use only.
    rpc Add (AddRequest) returns (AddResponse);
    // adds new user with ICCID. Designed for internal use only.
    rpc AddInternal (AddInternalRequest) returns (AddInternalResponse);

    // deletes user and IMSI that is assigend to him
    rpc Delete (DeleteRequest) returns (DeleteResponse);
    
    // lists all users for organization
    rpc List(ListRequest) returns (ListResponse);
    // Get user info
    rpc Get(GetRequest) returns (GetResponse);
    // Get user info
    rpc Update(UpdateRequest) returns (UpdateResponse);
    // Generate sim token from ICCID
    rpc GenerateSimToken(GenerateSimTokenRequest) returns (GenerateSimTokenResponse);

    // Set status of sim
    rpc SetSimStatus (SetSimStatusRequest) returns (SetSimStatusResponse);

    // Terminates all user's sim cards
    rpc DeactivateUser(DeactivateUserRequest) returns (DeactivateUserResponse);

}

message AddInternalRequest{
    string org = 1 [(validator.field) = { string_not_empty: true,  length_gt: 1 }];
    User user = 2 [(validator.field) = { msg_exists: true }];
    string iccid = 3;
    bool isPhysicalSim = 4;
}

message AddInternalResponse{
    User user = 1;
    string iccid = 2;
}

message AddRequest{
    string org = 1 [(validator.field) = { string_not_empty: true,  length_gt: 1 }];
    User user = 2 [(validator.field) = { msg_exists: true }];
    // Optional.  SimToken could be generated by GenerateSimToken function
    // If empty then ICCID is taken from the sim pool
    // For debug purpose value `I_DO_NOT_NEED_A_SIM` can be used. In that case ICCID and IMSI is not attached to the user
    string sim_token = 3;
}

message AddResponse{
    User user = 1;
    string iccid = 2 [(validator.field) = {regex: "^[0-9]{18,19}$"}];
}


message DeleteRequest{
    string userId = 2 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
}

message DeleteResponse {

}

message ListRequest {
    string org =1 [(validator.field) = { string_not_empty: true,  length_gt: 2 }];
}

message ListResponse{
    string org =1;
    repeated  User users = 2;
}

message GenerateSimTokenRequest{
    bool fromPool = 1;
    string iccid = 2 [(validator.field) = {regex: "^[0-9]{18,19}$"}];
}

message GenerateSimTokenResponse{
    string sim_token = 1;
}

message GetRequest {
    string userId = 2 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
}

message GetResponse {
    User user = 1;
    Sim sim = 2;
}

message UpdateRequest {
    string userId = 1 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
    UserAttributes user = 2;
}
message UpdateResponse {
    User user = 1;
}
message DeactivateUserRequest {
    string userId = 2 [(validator.field) = {uuid_ver: 0, string_not_empty: true}];
}

message  DeactivateUserResponse{

}


message UserAttributes {
    string name = 1;
    string email = 2  [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$"}];
    string phone = 3  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"}];
}

message User {
    string name = 2 [(validator.field) = { string_not_empty: true,  length_gt: 1 }];
    string email = 4  [(validator.field) = { human_error:"must be an email format" regex: "^$|^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$"}];
    string phone = 5  [(validator.field) = { human_error:"must be a phone number format", regex: "^$|^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$"}];
    string uuid = 6  [(validator.field) = {uuid_ver: 0}];
    bool isDeactivated = 7;
}

message Sim {
    string iccid = 1;

    // Type of sim card.
    bool isPhysical = 2;

    // Status of sim card inside of Ukama Network
    SimStatus ukama = 3;

    // Status of sim card in a Sim manager.
    // If status is IDLE or ACTIVE then sim card can be used outside of Ukama Network
    SimStatus carrier = 4;
}

message SimStatus{
    enum Status {
        UNKNOWN = 0;
        INACTIVE = 1;
        ACTIVE = 2;
    }
    Status status = 1;
    Services services = 2;
}

message Services {
    bool voice = 1;
    bool data = 2;
    bool sms = 3;
}

message SetSimStatusRequest {
    string iccid = 1 [(validator.field) = {regex: "^[0-9]{18,19}$"}];

    message SetServices {
        google.protobuf.BoolValue voice = 1;
        google.protobuf.BoolValue data = 2;
        google.protobuf.BoolValue sms = 3;
    }

    // Status of sim card inside of Ukama Network
    SetServices ukama = 2;

    // Status of sim card in a Sim manager.
    // If status is IDLE or ACTIVE then sim card can be used outside of Ukama Network
    SetServices carrier = 3;
}

message SetSimStatusResponse{
    Sim sim = 1;
}