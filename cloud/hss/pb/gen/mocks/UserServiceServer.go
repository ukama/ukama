// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukamaX/cloud/hss/pb/gen"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Add(_a0 context.Context, _a1 *gen.AddRequest) (*gen.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddRequest) *gen.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddInternal provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) AddInternal(_a0 context.Context, _a1 *gen.AddInternalRequest) (*gen.AddInternalResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddInternalResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddInternalRequest) *gen.AddInternalResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddInternalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddInternalRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) DeactivateUser(_a0 context.Context, _a1 *gen.DeactivateUserRequest) (*gen.DeactivateUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeactivateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateUserRequest) *gen.DeactivateUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeactivateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeactivateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteRequest) (*gen.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteRequest) *gen.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSimToken provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) GenerateSimToken(_a0 context.Context, _a1 *gen.GenerateSimTokenRequest) (*gen.GenerateSimTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GenerateSimTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GenerateSimTokenRequest) *gen.GenerateSimTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GenerateSimTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GenerateSimTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Get(_a0 context.Context, _a1 *gen.GetRequest) (*gen.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRequest) *gen.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) List(_a0 context.Context, _a1 *gen.ListRequest) (*gen.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListRequest) *gen.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSimStatus provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) SetSimStatus(_a0 context.Context, _a1 *gen.SetSimStatusRequest) (*gen.SetSimStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.SetSimStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetSimStatusRequest) *gen.SetSimStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetSimStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetSimStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Update(_a0 context.Context, _a1 *gen.UpdateRequest) (*gen.UpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateRequest) *gen.UpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserServiceServer provides a mock function with given fields:
func (_m *UserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_m.Called()
}
