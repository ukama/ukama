// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukamaX/cloud/hss/pb/gen"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Add(_a0 context.Context, _a1 *gen.AddUserRequest) (*gen.AddUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddUserRequest) *gen.AddUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Delete(_a0 context.Context, _a1 *gen.DeleteUserRequest) (*gen.DeleteUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteUserRequest) *gen.DeleteUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) List(_a0 context.Context, _a1 *gen.ListUsersRequest) (*gen.ListUsersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ListUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ListUsersRequest) *gen.ListUsersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ListUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ListUsersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserServiceServer provides a mock function with given fields:
func (_m *UserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_m.Called()
}
