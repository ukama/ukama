// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SimProvider is an autogenerated mock type for the SimProvider type
type SimProvider struct {
	mock.Mock
}

// GetICCIDFromPool provides a mock function with given fields:
func (_m *SimProvider) GetICCIDFromPool() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetICCIDWithCode provides a mock function with given fields: simCode
func (_m *SimProvider) GetICCIDWithCode(simCode string) (string, error) {
	ret := _m.Called(simCode)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(simCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(simCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimToken provides a mock function with given fields: iccid
func (_m *SimProvider) GetSimToken(iccid string) (string, error) {
	ret := _m.Called(iccid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(iccid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
