// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukamaX/cloud/hss/pkg/db"

	uuid "github.com/satori/go.uuid"
)

// ImsiRepo is an autogenerated mock type for the ImsiRepo type
type ImsiRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: orgName, imsi
func (_m *ImsiRepo) Add(orgName string, imsi *db.Imsi) error {
	ret := _m.Called(orgName, imsi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *db.Imsi) error); ok {
		r0 = rf(orgName, imsi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: imsi
func (_m *ImsiRepo) Delete(imsi string) error {
	ret := _m.Called(imsi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(imsi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserId provides a mock function with given fields: user
func (_m *ImsiRepo) DeleteByUserId(user uuid.UUID) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ImsiRepo) Get(id int) (*db.Imsi, error) {
	ret := _m.Called(id)

	var r0 *db.Imsi
	if rf, ok := ret.Get(0).(func(int) *db.Imsi); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Imsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByImsi provides a mock function with given fields: imsi
func (_m *ImsiRepo) GetByImsi(imsi string) (*db.Imsi, error) {
	ret := _m.Called(imsi)

	var r0 *db.Imsi
	if rf, ok := ret.Get(0).(func(string) *db.Imsi); ok {
		r0 = rf(imsi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Imsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImsiByUserUuid provides a mock function with given fields: userUuid
func (_m *ImsiRepo) GetImsiByUserUuid(userUuid uuid.UUID) ([]*db.Imsi, error) {
	ret := _m.Called(userUuid)

	var r0 []*db.Imsi
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*db.Imsi); ok {
		r0 = rf(userUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Imsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: imsi, subscriber
func (_m *ImsiRepo) Update(imsi string, subscriber *db.Imsi) error {
	ret := _m.Called(imsi, subscriber)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *db.Imsi) error); ok {
		r0 = rf(imsi, subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTai provides a mock function with given fields: imis, tai
func (_m *ImsiRepo) UpdateTai(imis string, tai db.Tai) error {
	ret := _m.Called(imis, tai)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.Tai) error); ok {
		r0 = rf(imis, tai)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
