// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukamaX/cloud/registry/internal/db"

	ukama "github.com/ukama/ukamaX/common/ukama"

	uuid "github.com/satori/go.uuid"
)

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: node
func (_m *NodeRepo) Add(node *db.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *NodeRepo) Delete(id ukama.NodeID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodeRepo) Get(id ukama.NodeID) (*db.Node, error) {
	ret := _m.Called(id)

	var r0 *db.Node
	if rf, ok := ret.Get(0).(func(ukama.NodeID) *db.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ukama.NodeID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrg provides a mock function with given fields: orgName, ownerId
func (_m *NodeRepo) GetByOrg(orgName string, ownerId uuid.UUID) ([]db.Node, error) {
	ret := _m.Called(orgName, ownerId)

	var r0 []db.Node
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) []db.Node); ok {
		r0 = rf(orgName, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(orgName, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, state
func (_m *NodeRepo) Update(id ukama.NodeID, state db.NodeState) error {
	ret := _m.Called(id, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(ukama.NodeID, db.NodeState) error); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
