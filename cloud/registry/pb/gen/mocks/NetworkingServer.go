// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukamaX/cloud/registry/pb/gen"
)

// NetworkingServer is an autogenerated mock type for the NetworkingServer type
type NetworkingServer struct {
	mock.Mock
}

// ResolveNodeIp provides a mock function with given fields: _a0, _a1
func (_m *NetworkingServer) ResolveNodeIp(_a0 context.Context, _a1 *gen.ResolveNodeIpRequest) (*gen.ResolveNodeIpResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ResolveNodeIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ResolveNodeIpRequest) *gen.ResolveNodeIpResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ResolveNodeIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ResolveNodeIpRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeIp provides a mock function with given fields: _a0, _a1
func (_m *NetworkingServer) SetNodeIp(_a0 context.Context, _a1 *gen.SetNodeIpRequest) (*gen.SetNodeIpResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.SetNodeIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetNodeIpRequest) *gen.SetNodeIpResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetNodeIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetNodeIpRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNetworkingServer provides a mock function with given fields:
func (_m *NetworkingServer) mustEmbedUnimplementedNetworkingServer() {
	_m.Called()
}
