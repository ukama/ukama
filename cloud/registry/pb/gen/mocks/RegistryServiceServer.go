// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukamaX/cloud/registry/pb/gen"
)

// RegistryServiceServer is an autogenerated mock type for the RegistryServiceServer type
type RegistryServiceServer struct {
	mock.Mock
}

// AddNetwork provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) AddNetwork(_a0 context.Context, _a1 *gen.AddNetworkRequest) (*gen.NetworkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.NetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNetworkRequest) *gen.NetworkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.NetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNetworkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) AddNode(_a0 context.Context, _a1 *gen.AddNodeRequest) (*gen.AddNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddNodeRequest) *gen.AddNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrg provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) AddOrg(_a0 context.Context, _a1 *gen.AddOrgRequest) (*gen.AddOrgResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AddOrgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddOrgRequest) *gen.AddOrgResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddOrgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNodes provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) AttachNodes(_a0 context.Context, _a1 *gen.AttachNodesRequest) (*gen.AttachNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.AttachNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AttachNodesRequest) *gen.AttachNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AttachNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AttachNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) DeleteNode(_a0 context.Context, _a1 *gen.DeleteNodeRequest) (*gen.DeleteNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeleteNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteNodeRequest) *gen.DeleteNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) DetachNode(_a0 context.Context, _a1 *gen.DetachNodeRequest) (*gen.DetachNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DetachNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DetachNodeRequest) *gen.DetachNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DetachNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DetachNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) GetNode(_a0 context.Context, _a1 *gen.GetNodeRequest) (*gen.GetNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodeRequest) *gen.GetNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) GetNodes(_a0 context.Context, _a1 *gen.GetNodesRequest) (*gen.GetNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetNodesRequest) *gen.GetNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) GetOrg(_a0 context.Context, _a1 *gen.GetOrgRequest) (*gen.Organization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.Organization
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetOrgRequest) *gen.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetOrgRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) UpdateNode(_a0 context.Context, _a1 *gen.UpdateNodeRequest) (*gen.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeRequest) *gen.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeState provides a mock function with given fields: _a0, _a1
func (_m *RegistryServiceServer) UpdateNodeState(_a0 context.Context, _a1 *gen.UpdateNodeStateRequest) (*gen.UpdateNodeStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateNodeStateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateNodeStateRequest) *gen.UpdateNodeStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateNodeStateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateNodeStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedRegistryServiceServer provides a mock function with given fields:
func (_m *RegistryServiceServer) mustEmbedUnimplementedRegistryServiceServer() {
	_m.Called()
}
