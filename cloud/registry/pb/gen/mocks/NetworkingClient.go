// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukamaX/cloud/registry/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NetworkingClient is an autogenerated mock type for the NetworkingClient type
type NetworkingClient struct {
	mock.Mock
}

// ResolveNodeIp provides a mock function with given fields: ctx, in, opts
func (_m *NetworkingClient) ResolveNodeIp(ctx context.Context, in *gen.ResolveNodeIpRequest, opts ...grpc.CallOption) (*gen.ResolveNodeIpResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ResolveNodeIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ResolveNodeIpRequest, ...grpc.CallOption) *gen.ResolveNodeIpResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ResolveNodeIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ResolveNodeIpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeIp provides a mock function with given fields: ctx, in, opts
func (_m *NetworkingClient) SetNodeIp(ctx context.Context, in *gen.SetNodeIpRequest, opts ...grpc.CallOption) (*gen.SetNodeIpResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.SetNodeIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SetNodeIpRequest, ...grpc.CallOption) *gen.SetNodeIpResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SetNodeIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.SetNodeIpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
