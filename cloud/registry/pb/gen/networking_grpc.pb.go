// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkingClient is the client API for Networking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkingClient interface {
	ResolveNodeIp(ctx context.Context, in *ResolveNodeIpRequest, opts ...grpc.CallOption) (*ResolveNodeIpResponse, error)
	SetNodeIp(ctx context.Context, in *SetNodeIpRequest, opts ...grpc.CallOption) (*SetNodeIpResponse, error)
}

type networkingClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkingClient(cc grpc.ClientConnInterface) NetworkingClient {
	return &networkingClient{cc}
}

func (c *networkingClient) ResolveNodeIp(ctx context.Context, in *ResolveNodeIpRequest, opts ...grpc.CallOption) (*ResolveNodeIpResponse, error) {
	out := new(ResolveNodeIpResponse)
	err := c.cc.Invoke(ctx, "/registry.v1.Networking/ResolveNodeIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkingClient) SetNodeIp(ctx context.Context, in *SetNodeIpRequest, opts ...grpc.CallOption) (*SetNodeIpResponse, error) {
	out := new(SetNodeIpResponse)
	err := c.cc.Invoke(ctx, "/registry.v1.Networking/SetNodeIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkingServer is the server API for Networking service.
// All implementations must embed UnimplementedNetworkingServer
// for forward compatibility
type NetworkingServer interface {
	ResolveNodeIp(context.Context, *ResolveNodeIpRequest) (*ResolveNodeIpResponse, error)
	SetNodeIp(context.Context, *SetNodeIpRequest) (*SetNodeIpResponse, error)
	mustEmbedUnimplementedNetworkingServer()
}

// UnimplementedNetworkingServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkingServer struct {
}

func (UnimplementedNetworkingServer) ResolveNodeIp(context.Context, *ResolveNodeIpRequest) (*ResolveNodeIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveNodeIp not implemented")
}
func (UnimplementedNetworkingServer) SetNodeIp(context.Context, *SetNodeIpRequest) (*SetNodeIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeIp not implemented")
}
func (UnimplementedNetworkingServer) mustEmbedUnimplementedNetworkingServer() {}

// UnsafeNetworkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkingServer will
// result in compilation errors.
type UnsafeNetworkingServer interface {
	mustEmbedUnimplementedNetworkingServer()
}

func RegisterNetworkingServer(s grpc.ServiceRegistrar, srv NetworkingServer) {
	s.RegisterService(&Networking_ServiceDesc, srv)
}

func _Networking_ResolveNodeIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveNodeIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkingServer).ResolveNodeIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.v1.Networking/ResolveNodeIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkingServer).ResolveNodeIp(ctx, req.(*ResolveNodeIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networking_SetNodeIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkingServer).SetNodeIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.v1.Networking/SetNodeIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkingServer).SetNodeIp(ctx, req.(*SetNodeIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Networking_ServiceDesc is the grpc.ServiceDesc for Networking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Networking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.v1.Networking",
	HandlerType: (*NetworkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveNodeIp",
			Handler:    _Networking_ResolveNodeIp_Handler,
		},
		{
			MethodName: "SetNodeIp",
			Handler:    _Networking_SetNodeIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networking.proto",
}
